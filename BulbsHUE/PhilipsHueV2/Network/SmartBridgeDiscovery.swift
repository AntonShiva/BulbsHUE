//
//  SmartBridgeDiscovery.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 13.08.2025.
//

import Foundation
import Network

#if canImport(Darwin)
import Darwin
#endif

/// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Hue Bridge —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
class SmartBridgeDiscovery {
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    static func getLocalNetworkDevices() -> [String] {
        guard let deviceIP = getCurrentDeviceIP() else {
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return []
        }
        
        let components = deviceIP.components(separatedBy: ".")
        guard components.count == 4 else {
            return []
        }
        
        let subnet = "\(components[0]).\(components[1]).\(components[2])"
        var devices: [String] = []
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è Hue Bridge:
        let commonLastOctets = [
            1,   // –†–æ—É—Ç–µ—Ä
            2, 3, 4, 5, 6, 7, 8, 9, 10,  // –ü–µ—Ä–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            20, 21, 22, 23, 24, 25,       // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            50, 51, 52, 53, 54, 55,       // –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            100, 101, 102, 103, 104, 105, // DHCP –¥–∏–∞–ø–∞–∑–æ–Ω –º–Ω–æ–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
            200, 201, 202, 203, 204, 205  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–¥—Ä–µ—Å–∞
        ]
        
        for octet in commonLastOctets {
            let ip = "\(subnet).\(octet)"
            if ip != deviceIP {
                devices.append(ip)
            }
        }
        
        print("üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ \(devices.count) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–¥—Å–µ—Ç–∏ \(subnet).x")
        return devices
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    static func getDefaultGateway() -> String? {
        // –ù–∞ iOS –º—ã –º–æ–∂–µ–º –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å gateway —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        // –∏–ª–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ IP –∞–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        
        guard let deviceIP = getCurrentDeviceIP() else {
            return nil
        }
        
        let components = deviceIP.components(separatedBy: ".")
        guard components.count == 4 else {
            return nil
        }
        
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ gateway –æ–±—ã—á–Ω–æ .1 –≤ –ø–æ–¥—Å–µ—Ç–∏
        let possibleGateway = "\(components[0]).\(components[1]).\(components[2]).1"
        
        print("üåê –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π gateway: \(possibleGateway)")
        return possibleGateway
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –º–∞—Å–∫–∏ —Å–µ—Ç–∏
    static func getSubnetRange() -> [String] {
        guard let deviceIP = getCurrentDeviceIP(),
              let gateway = getDefaultGateway() else {
            return []
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–µ—Ç—å –∏–∑ IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        let deviceComponents = deviceIP.components(separatedBy: ".")
        let gatewayComponents = gateway.components(separatedBy: ".")
        
        guard deviceComponents.count == 4, gatewayComponents.count == 4 else {
            return []
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–∫—Ç–µ—Ç–∞ –∫–∞–∫ –±–∞–∑—É –ø–æ–¥—Å–µ—Ç–∏
        let subnet = "\(deviceComponents[0]).\(deviceComponents[1]).\(deviceComponents[2])"
        
        var subnetIPs: [String] = []
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω .1-.254 (–∏—Å–∫–ª—é—á–∞—è broadcast)
        for i in 1...254 {
            let ip = "\(subnet).\(i)"
            if ip != deviceIP { // –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π IP
                subnetIPs.append(ip)
            }
        }
        
        print("üè† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–¥—Å–µ—Ç–∏ \(subnet).x: \(subnetIPs.count) –∞–¥—Ä–µ—Å–æ–≤")
        return subnetIPs
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç Hue Bridge –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    static func discoverBridgeIntelligently(completion: @escaping ([Bridge]) -> Void) {
        print("üß† –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Hue Bridge...")
        
        var foundBridges: [Bridge] = []
        var completedSteps = 0
        let totalSteps = 3
        let lock = NSLock()
        
        func stepCompleted(bridges: [Bridge], stepName: String) {
            lock.lock()
            defer { lock.unlock() }
            
            print("‚úÖ \(stepName): –Ω–∞–π–¥–µ–Ω–æ \(bridges.count) –º–æ—Å—Ç–æ–≤")
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ—Å—Ç—ã
            for bridge in bridges {
                if !foundBridges.contains(where: { $0.id == bridge.id }) {
                    foundBridges.append(bridge)
                }
            }
            
            completedSteps += 1
            
            if completedSteps >= totalSteps {
                print("üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: \(foundBridges.count) —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ—Å—Ç–æ–≤")
                completion(foundBridges)
            }
        }
        
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–¥—Å–µ—Ç–∏
        let priorityDevices = getLocalNetworkDevices()
        checkMultipleIPs(priorityDevices) { bridges in
            stepCompleted(bridges: bridges, stepName: "Priority Subnet Scan")
        }
        
        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∫—Ä—É–≥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        if let gateway = getDefaultGateway() {
            let gatewayRange = generateNearbyIPs(around: gateway, count: 20)
            checkMultipleIPs(gatewayRange) { bridges in
                stepCompleted(bridges: bridges, stepName: "Gateway Range Scan")
            }
        } else {
            stepCompleted(bridges: [], stepName: "Gateway Range Scan")
        }
        
        // –®–∞–≥ 3: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ Bonjour/mDNS
        if #available(iOS 14.0, *) {
            attemptBonjourDiscovery { bridges in
                stepCompleted(bridges: bridges, stepName: "Bonjour Discovery")
            }
        } else {
            stepCompleted(bridges: [], stepName: "Bonjour Discovery")
        }
        
        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
        DispatchQueue.global().asyncAfter(deadline: .now() + 15.0) { // –£–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
            if completedSteps < totalSteps {
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
                completion(foundBridges)
            }
        }
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å–∞ —Ä—è–¥–æ–º —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
    static func generateNearbyIPs(around centerIP: String, count: Int) -> [String] {
        let components = centerIP.components(separatedBy: ".")
        guard components.count == 4,
              let lastOctet = Int(components[3]) else {
            return []
        }
        
        let subnet = "\(components[0]).\(components[1]).\(components[2])"
        var nearbyIPs: [String] = []
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –≤—ã—à–µ –∏ –Ω–∏–∂–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ
        let range = count / 2
        for offset in -range...range {
            let newOctet = lastOctet + offset
            if newOctet > 0 && newOctet < 255 {
                nearbyIPs.append("\(subnet).\(newOctet)")
            }
        }
        
        return nearbyIPs
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ IP –∞–¥—Ä–µ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    static func checkMultipleIPs(_ ips: [String], completion: @escaping ([Bridge]) -> Void) {
        let dispatchGroup = DispatchGroup()
        var foundBridges: [Bridge] = []
        let bridgeLock = NSLock()
        
        for ip in ips {
            dispatchGroup.enter()
            
            checkSingleIP(ip) { bridge in
                if let bridge = bridge {
                    bridgeLock.lock()
                    foundBridges.append(bridge)
                    bridgeLock.unlock()
                }
                dispatchGroup.leave()
            }
        }
        
        dispatchGroup.notify(queue: .global()) {
            completion(foundBridges)
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω IP –∞–¥—Ä–µ—Å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Hue Bridge
    static func checkSingleIP(_ ip: String, completion: @escaping (Bridge?) -> Void) {
        guard let url = URL(string: "http://\(ip)/api/0/config") else {
            completion(nil)
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 2.0
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data,
                  let httpResponse = response as? HTTPURLResponse,
                  httpResponse.statusCode == 200,
                  error == nil else {
                completion(nil)
                return
            }
            
            do {
                guard let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                      let bridgeID = json["bridgeid"] as? String,
                      !bridgeID.isEmpty else {
                    completion(nil)
                    return
                }
                
                let name = json["name"] as? String ?? "Philips Hue Bridge"
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ Hue Bridge
                if let modelID = json["modelid"] as? String {
                    let validModels = ["BSB001", "BSB002", "BSB003", "Hue Bridge"]
                    if !validModels.contains(where: { modelID.contains($0) }) {
                        completion(nil)
                        return
                    }
                }
                
                print("‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω Hue Bridge –Ω–∞ \(ip): \(bridgeID)")
                let bridge = Bridge(
                    id: bridgeID,
                    internalipaddress: ip,
                    port: 80,
                    name: name
                )
                completion(bridge)
                
            } catch {
                completion(nil)
            }
        }.resume()
    }
    
    /// –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–æ—Å—Ç —á–µ—Ä–µ–∑ Bonjour/mDNS
    @available(iOS 14.0, *)
    static func attemptBonjourDiscovery(completion: @escaping ([Bridge]) -> Void) {
        print("üì° –ü–æ–ø—ã—Ç–∫–∞ Bonjour/mDNS –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...")
        
        let browser = NWBrowser(for: .bonjour(type: "_hue._tcp", domain: nil), using: .tcp)
        var foundBridges: [Bridge] = []
        
        browser.browseResultsChangedHandler = { results, changes in
            for result in results {
                if case .service(let name, let type, let domain, _) = result.endpoint {
                    print("üì° mDNS –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–∏—Å: \(name).\(type)\(domain)")
                    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã resolve IP –∞–¥—Ä–µ—Å
                    // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å NWConnection
                }
            }
        }
        
        browser.stateUpdateHandler = { state in
            switch state {
            case .ready:
                print("üì° mDNS –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤")
            case .failed(let error):
                print("‚ùå mDNS –æ—à–∏–±–∫–∞: \(error)")
                completion([])
            default:
                break
            }
        }
        
        browser.start(queue: .global())
        
        // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è mDNS
        DispatchQueue.global().asyncAfter(deadline: .now() + 5.0) {
            browser.cancel()
            completion(foundBridges)
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    static func getCurrentDeviceIP() -> String? {
        var address: String?
        var ifaddr: UnsafeMutablePointer<ifaddrs>? = nil
        
        if getifaddrs(&ifaddr) == 0 {
            var ptr = ifaddr
            while ptr != nil {
                defer { ptr = ptr?.pointee.ifa_next }
                
                let interface = ptr?.pointee
                let addrFamily = interface?.ifa_addr.pointee.sa_family
                
                if addrFamily == UInt8(AF_INET) {
                    let name = String(cString: (interface?.ifa_name)!)
                    if name == "en0" { // WiFi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        var hostname = [CChar](repeating: 0, count: Int(NI_MAXHOST))
                        getnameinfo(interface?.ifa_addr, socklen_t((interface?.ifa_addr.pointee.sa_len)!),
                                  &hostname, socklen_t(hostname.count),
                                  nil, socklen_t(0), NI_NUMERICHOST)
                        address = String(cString: hostname)
                        break
                    }
                }
            }
        }
        
        freeifaddrs(ifaddr)
        return address
    }
}
