//
//  HueBridgeDiscovery.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 31.07.2025.
//

import Foundation
import Network
import Combine

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è discovery –º–µ—Ç–æ–¥–æ–≤
protocol BridgeDiscoveryMethod {
    func discoverBridges(completion: @escaping ([Bridge]) -> Void)
}

/// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Hue Bridge
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π Philips –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ mDNS
class HueBridgeDiscovery {
    
    // MARK: - Properties
    
    private var mdnsDiscovery: MDNSBridgeDiscovery
    private var cloudDiscovery: CloudBridgeDiscovery
    
    // MARK: - Initialization
    
    init() {
        self.mdnsDiscovery = MDNSBridgeDiscovery()
        self.cloudDiscovery = CloudBridgeDiscovery()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ (mDNS + Cloud –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge...")
        
        var allBridges: [Bridge] = []
        let group = DispatchGroup()
        
        // mDNS –ø–æ–∏—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        group.enter()
        mdnsDiscovery.discoverBridges { bridges in
            print("üì° mDNS –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç–æ–≤")
            allBridges.append(contentsOf: bridges)
            group.leave()
        }
        
        // Cloud –ø–æ–∏—Å–∫ (fallback)
        group.enter()
        cloudDiscovery.discoverBridges { bridges in
            print("‚òÅÔ∏è Cloud –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç–æ–≤")
            allBridges.append(contentsOf: bridges)
            group.leave()
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ—Å—Ç—ã
        group.notify(queue: .main) {
            let uniqueBridges = Array(Set(allBridges))
            print("‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ—Å—Ç–æ–≤: \(uniqueBridges.count)")
            completion(uniqueBridges)
        }
    }
}

/// mDNS Discovery —á–µ—Ä–µ–∑ NetServiceBrowser (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
class MDNSBridgeDiscovery: NSObject, BridgeDiscoveryMethod {
    
    // MARK: - Properties
    
    private var browser: NetServiceBrowser?
    private var services: [NetService] = []
    private var completion: (([Bridge]) -> Void)?
    private var discoveredBridges: [Bridge] = []
    private let discoveryTimeout: TimeInterval = 5.0
    
    // MARK: - Public Methods
    
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º mDNS –ø–æ–∏—Å–∫ _hue._tcp.local...")
        
        self.completion = completion
        self.discoveredBridges = []
        self.services = []
        
        // –°–æ–∑–¥–∞–µ–º browser –¥–ª—è –ø–æ–∏—Å–∫–∞ _hue._tcp —Å–µ—Ä–≤–∏—Å–æ–≤
        browser = NetServiceBrowser()
        browser?.delegate = self
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        browser?.searchForServices(ofType: "_hue._tcp.", inDomain: "local.")
        
        // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        DispatchQueue.main.asyncAfter(deadline: .now() + discoveryTimeout) { [weak self] in
            self?.finishDiscovery()
        }
    }
    
    // MARK: - Private Methods
    
    private func finishDiscovery() {
        browser?.stop()
        browser = nil
        
        print("‚è±Ô∏è mDNS –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(discoveredBridges.count)")
        completion?(discoveredBridges)
        completion = nil
    }
    
    private func resolveService(_ service: NetService) {
        print("üîÑ –†–µ–∑–æ–ª–≤–∏–º —Å–µ—Ä–≤–∏—Å: \(service.name)")
        service.delegate = self
        service.resolve(withTimeout: 3.0)
        services.append(service)
    }
    
    private func extractBridgeInfo(from service: NetService) {
        guard let addresses = service.addresses, !addresses.isEmpty else {
            print("‚ùå –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ —É —Å–µ—Ä–≤–∏—Å–∞ \(service.name)")
            return
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∞–¥—Ä–µ—Å
        var ipAddress: String?
        for addressData in addresses {
            let address = addressData.withUnsafeBytes { bytes in
                bytes.bindMemory(to: sockaddr.self).baseAddress!
            }
            
            if address.pointee.sa_family == AF_INET {
                // IPv4
                var hostname = [CChar](repeating: 0, count: Int(NI_MAXHOST))
                if getnameinfo(address, socklen_t(addressData.count),
                              &hostname, socklen_t(hostname.count),
                              nil, 0, NI_NUMERICHOST) == 0 {
                    ipAddress = String(cString: hostname)
                    break
                }
            }
        }
        
        guard let ip = ipAddress else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å IP –∞–¥—Ä–µ—Å")
            return
        }
        
        print("‚úÖ –ù–∞–π–¥–µ–Ω IP: \(ip), –ø–æ—Ä—Ç: \(service.port)")
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º Bridge ID –∏–∑ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞
        // –§–æ—Ä–º–∞—Ç: "Philips Hue - XXXXXX" –≥–¥–µ XXXXXX - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä Bridge ID
        var bridgeId = service.name
        if service.name.contains(" - ") {
            let components = service.name.components(separatedBy: " - ")
            if components.count > 1 {
                bridgeId = components.last ?? service.name
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Bridge –æ–±—ä–µ–∫—Ç
        let tempBridge = Bridge(
            id: bridgeId,
            internalipaddress: ip,
            port: 443, // HTTPS –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            name: service.name
        )
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ—Å—Ç —á–µ—Ä–µ–∑ /description.xml
        validateBridge(tempBridge) { [weak self] validatedBridge in
            if let bridge = validatedBridge {
                DispatchQueue.main.async {
                    self?.discoveredBridges.append(bridge)
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –º–æ—Å—Ç: \(bridge)")
                }
            }
        }
    }
    
    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–æ—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –µ–≥–æ —Ä–µ–∞–ª—å–Ω—ã–π ID
    private func validateBridge(_ bridge: Bridge, completion: @escaping (Bridge?) -> Void) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º /description.xml (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        let descriptionURL = URL(string: "http://\(bridge.internalipaddress)/description.xml")!
        
        print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ—Å—Ç —á–µ—Ä–µ–∑ \(descriptionURL)")
        
        var request = URLRequest(url: descriptionURL)
        request.timeoutInterval = 3.0
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: \(error)")
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                self.validateBridgeViaAPI(bridge, completion: completion)
                return
            }
            
            guard let data = data,
                  let xmlString = String(data: data, encoding: .utf8) else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–æ—Å—Ç–∞")
                completion(nil)
                return
            }
            
            // –ü–∞—Ä—Å–∏–º XML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ—Å—Ç–µ
            if let bridgeInfo = self.parseDescriptionXML(xmlString) {
                var validatedBridge = bridge
                validatedBridge.id = bridgeInfo.serialNumber
                validatedBridge.name = bridgeInfo.friendlyName
                
                print("‚úÖ –ú–æ—Å—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ XML: ID=\(validatedBridge.id)")
                completion(validatedBridge)
            } else {
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                self.validateBridgeViaAPI(bridge, completion: completion)
            }
        }.resume()
    }
    
    /// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ /api/config
    private func validateBridgeViaAPI(_ bridge: Bridge, completion: @escaping (Bridge?) -> Void) {
        let configURL = URL(string: "https://\(bridge.internalipaddress)/api/config")!
        
        print("üîç –ü—Ä–æ–±—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ API: \(configURL)")
        
        var request = URLRequest(url: configURL)
        request.timeoutInterval = 3.0
        
        // –°–æ–∑–¥–∞–µ–º session —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö IP
        let session = URLSession(configuration: .default, delegate: TrustAllCertsDelegate(), delegateQueue: nil)
        
        session.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ API: \(error)")
                // –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç
                completion(bridge)
                return
            }
            
            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
                completion(bridge)
                return
            }
            
            // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let bridgeId = json["bridgeid"] as? String {
                    var validatedBridge = bridge
                    validatedBridge.id = bridgeId
                    validatedBridge.name = json["name"] as? String ?? "Philips Hue Bridge"
                    
                    print("‚úÖ –ú–æ—Å—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API: ID=\(validatedBridge.id)")
                    completion(validatedBridge)
                } else {
                    print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API")
                    completion(bridge)
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
                // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ –û—Ç–≤–µ—Ç: \(responseString)")
                }
                completion(bridge)
            }
        }.resume()
    }
    
    /// –ü–∞—Ä—Å–∏—Ç description.xml –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ—Å—Ç–µ
    private func parseDescriptionXML(_ xml: String) -> (serialNumber: String, friendlyName: String)? {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ XML –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è XMLParser
        var serialNumber: String?
        var friendlyName: String?
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º serialNumber
        if let serialRange = xml.range(of: "<serialNumber>"),
           let serialEndRange = xml.range(of: "</serialNumber>") {
            let startIndex = serialRange.upperBound
            let endIndex = serialEndRange.lowerBound
            serialNumber = String(xml[startIndex..<endIndex])
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º friendlyName
        if let nameRange = xml.range(of: "<friendlyName>"),
           let nameEndRange = xml.range(of: "</friendlyName>") {
            let startIndex = nameRange.upperBound
            let endIndex = nameEndRange.lowerBound
            friendlyName = String(xml[startIndex..<endIndex])
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Hue Bridge
        let isHueBridge = xml.contains("Philips hue") ||
                         xml.contains("Royal Philips") ||
                         xml.contains("modelName>Philips hue bridge")
        
        if isHueBridge, let serial = serialNumber {
            return (serial, friendlyName ?? "Philips Hue Bridge")
        }
        
        return nil
    }
}

// MARK: - NetServiceBrowserDelegate

extension MDNSBridgeDiscovery: NetServiceBrowserDelegate {
    
    func netServiceBrowser(_ browser: NetServiceBrowser, didFind service: NetService, moreComing: Bool) {
        print("üì° –ù–∞–π–¥–µ–Ω mDNS —Å–µ—Ä–≤–∏—Å: \(service.name) —Ç–∏–ø–∞ \(service.type)")
        resolveService(service)
    }
    
    func netServiceBrowser(_ browser: NetServiceBrowser, didRemove service: NetService, moreComing: Bool) {
        print("üì° –£–¥–∞–ª–µ–Ω mDNS —Å–µ—Ä–≤–∏—Å: \(service.name)")
        services.removeAll { $0 == service }
    }
    
    func netServiceBrowserDidStopSearch(_ browser: NetServiceBrowser) {
        print("üõë mDNS –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    func netServiceBrowser(_ browser: NetServiceBrowser, didNotSearch errorDict: [String : NSNumber]) {
        print("‚ùå –û—à–∏–±–∫–∞ mDNS –ø–æ–∏—Å–∫–∞: \(errorDict)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
        if let errorCode = errorDict[NetService.errorCode] as? Int {
            switch errorCode {
            case -72008:
                print("üö´ –û—à–∏–±–∫–∞ -72008: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –æ—à–∏–±–∫–∏
            default:
                print("‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: \(errorCode)")
            }
        }
        
        finishDiscovery()
    }
}

// MARK: - NetServiceDelegate

extension MDNSBridgeDiscovery: NetServiceDelegate {
    
    func netServiceDidResolveAddress(_ sender: NetService) {
        print("‚úÖ –ê–¥—Ä–µ—Å —Ä–µ–∑–æ–ª–≤–ª–µ–Ω –¥–ª—è: \(sender.name)")
        extractBridgeInfo(from: sender)
    }
    
    func netService(_ sender: NetService, didNotResolve errorDict: [String : NSNumber]) {
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å: \(sender.name), –æ—à–∏–±–∫–∞: \(errorDict)")
    }
}

/// Cloud Discovery —á–µ—Ä–µ–∑ N-UPnP (fallback –º–µ—Ç–æ–¥)
class CloudBridgeDiscovery: BridgeDiscoveryMethod {
    
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("‚òÅÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Philips Cloud (N-UPnP)...")
        
        guard let url = URL(string: "https://discovery.meethue.com") else {
            completion([])
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ Cloud –ø–æ–∏—Å–∫–∞: \(error)")
                completion([])
                return
            }
            
            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Cloud")
                completion([])
                return
            }
            
            do {
                let bridges = try JSONDecoder().decode([Bridge].self, from: data)
                print("‚úÖ Cloud –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤: \(bridges.count)")
                completion(bridges)
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Cloud –æ—Ç–≤–µ—Ç–∞: \(error)")
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ –û—Ç–≤–µ—Ç Cloud: \(responseString)")
                }
                completion([])
            }
        }.resume()
    }
}

/// –î–µ–ª–µ–≥–∞—Ç –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö IP)
class TrustAllCertsDelegate: NSObject, URLSessionDelegate {
    func urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge,
                   completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) {
        if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust,
           let serverTrust = challenge.protectionSpace.serverTrust {
            let credential = URLCredential(trust: serverTrust)
            completionHandler(.useCredential, credential)
        } else {
            completionHandler(.performDefaultHandling, nil)
        }
    }
}
