//
//  HueBridgeDiscovery.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 31.07.2025.
//

import Foundation
import Network

/// –ù–∞–¥–µ–∂–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ Philips Hue Bridge —á–µ—Ä–µ–∑ SSDP
/// –†–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
///
/// **–†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:** –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge —á–µ—Ä–µ–∑ SSDP –ø—Ä–æ—Ç–æ–∫–æ–ª.
/// –ë–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Hue Essentials) –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—Å—Ç–æ–≤.
///
/// **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
/// 1. SSDP Discovery - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç UDP multicast –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ UPnP —É—Å—Ç—Ä–æ–π—Å—Ç–≤
/// 2. Cloud Discovery - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Philips —Å–µ—Ä–≤–∏—Å 
/// 3. IP Scan - —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
///
/// **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
/// ```swift
/// let discovery = HueBridgeDiscovery()
/// discovery.discoverBridges { bridges in
///     print("–ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(bridges.count)")
/// }
/// ```
@available(iOS 12.0, *)
class HueBridgeDiscovery {
    
    // MARK: - Properties
    
    private var udpConnection: NWConnection?
    private var isDiscovering = false
    private let discoveryTimeout: TimeInterval = 10.0
    private let lock = NSLock() // –î–æ–±–∞–≤–ª—è–µ–º lock –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞
    
    // MARK: - Public Methods
    
    /// –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SSDP –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge...")
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
        guard !isDiscovering else {
            print("‚ö†Ô∏è Discovery —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            completion([])
            return
        }
        
        isDiscovering = true
        
        var allFoundBridges: [Bridge] = []
        let lock = NSLock()
        var completedTasks = 0
        let totalTasks = 2 // Cloud + IP scan (SSDP –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ multicast entitlement)
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π wrapper –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        func safeTaskCompletion(bridges: [Bridge], taskName: String) {
            lock.lock()
            defer { lock.unlock() }
            
            print("‚úÖ \(taskName) –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: \(bridges.count) –º–æ—Å—Ç–æ–≤")
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ—Å—Ç—ã
            let uniqueBridges = bridges.filter { newBridge in
                !allFoundBridges.contains { $0.id == newBridge.id }
            }
            allFoundBridges.append(contentsOf: uniqueBridges)
            
            completedTasks += 1
            
            // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º completion
            if completedTasks >= totalTasks {
                isDiscovering = false
                DispatchQueue.main.async {
                    print("üéØ –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ –º–æ—Å—Ç–æ–≤: \(allFoundBridges.count)")
                    completion(allFoundBridges)
                }
            }
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: SSDP —Ç—Ä–µ–±—É–µ—Ç multicast entitlement –æ—Ç Apple
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Cloud Discovery –∏ IP scan
        
        // 1. Cloud Discovery (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
        cloudDiscovery { bridges in
            safeTaskCompletion(bridges: bridges, taskName: "Cloud Discovery")
        }
        
        // 2. IP Scan (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
        ipScanDiscovery { bridges in
            safeTaskCompletion(bridges: bridges, taskName: "IP Scan Discovery")
        }
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        DispatchQueue.global().asyncAfter(deadline: .now() + discoveryTimeout) { [weak self] in
            self?.lock.lock()
            defer { self?.lock.unlock() }
            
            guard let self = self, self.isDiscovering else { return }
            
            self.isDiscovering = false
            DispatchQueue.main.async {
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞, –Ω–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(allFoundBridges.count)")
                completion(allFoundBridges)
            }
        }
    }
    
    // MARK: - Private Methods
    
    /// SSDP Discovery - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    private func ssdpDiscovery(completion: @escaping ([Bridge]) -> Void) {
        print("üì° –ó–∞–ø—É—Å–∫–∞–µ–º SSDP discovery...")
        
        var foundBridges: [Bridge] = []
        var hasCompleted = false // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ completion
        let ssdpLock = NSLock()
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π wrapper –¥–ª—è completion
        func safeCompletion(_ bridges: [Bridge]) {
            ssdpLock.lock()
            defer { ssdpLock.unlock() }
            
            guard !hasCompleted else { return }
            hasCompleted = true
            completion(bridges)
        }
        
        // –°–æ–∑–¥–∞–µ–º UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è multicast
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è iOS 17+
        let host = NWEndpoint.Host("239.255.255.250")
        let port = NWEndpoint.Port(1900)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é UDP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è multicast
        let parameters = NWParameters.udp
        
        udpConnection = NWConnection(
            host: host,
            port: port,
            using: parameters
        )
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SSDP M-SEARCH –∑–∞–ø—Ä–æ—Å –¥–ª—è Hue Bridge
        let ssdpRequest = """
        M-SEARCH * HTTP/1.1\r
        HOST: 239.255.255.250:1900\r
        MAN: "ssdp:discover"\r
        MX: 3\r
        ST: urn:schemas-upnp-org:device:basic:1\r
        \r
        
        """.data(using: .utf8)!
        
        udpConnection?.stateUpdateHandler = { [weak self] state in
            switch state {
            case .ready:
                print("üì° SSDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
                self?.udpConnection?.send(content: ssdpRequest, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå SSDP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                    } else {
                        print("‚úÖ SSDP –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }
                })
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è rootdevice (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
                let rootDeviceRequest = """
                M-SEARCH * HTTP/1.1\r
                HOST: 239.255.255.250:1900\r
                MAN: "ssdp:discover"\r
                MX: 3\r
                ST: upnp:rootdevice\r
                \r
                
                """.data(using: .utf8)!
                
                self?.udpConnection?.send(content: rootDeviceRequest, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå SSDP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ rootdevice –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                    } else {
                        print("‚úÖ SSDP rootdevice –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }
                })
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Philips Hue
                let hueRequest = """
                M-SEARCH * HTTP/1.1\r
                HOST: 239.255.255.250:1900\r
                MAN: "ssdp:discover"\r
                MX: 3\r
                ST: urn:schemas-upnp-org:device:IpBridge:1\r
                \r
                
                """.data(using: .utf8)!
                
                self?.udpConnection?.send(content: hueRequest, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå SSDP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Hue –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                    } else {
                        print("‚úÖ SSDP Hue-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }
                })
                
                // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                self?.receiveSSDP { bridges in
                    ssdpLock.lock()
                    foundBridges.append(contentsOf: bridges)
                    ssdpLock.unlock()
                }
                
            case .failed(let error):
                print("‚ùå SSDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: \(error)")
                if let nwError = error as? NWError {
                    switch nwError {
                    case .posix(let code):
                        print("üîç POSIX –æ—à–∏–±–∫–∞: \(code) (\(code.rawValue))")
                    case .dns(let dnsError):
                        print("üîç DNS –æ—à–∏–±–∫–∞: \(dnsError)")
                    case .tls(let tlsError):
                        print("üîç TLS –æ—à–∏–±–∫–∞: \(tlsError)")
                    default:
                        print("üîç –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: \(nwError)")
                    }
                }
                safeCompletion([])
                
            case .waiting(let error):
                print("‚è≥ SSDP –æ–∂–∏–¥–∞–Ω–∏–µ: \(error)")
                // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                
            case .preparing:
                print("üîÑ SSDP –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                
            case .setup:
                print("‚öôÔ∏è SSDP –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                
            case .cancelled:
                print("üö´ SSDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                safeCompletion([])
                
            @unknown default:
                print("‚ùì SSDP –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: \(state)")
                break
            }
        }
        
        udpConnection?.start(queue: .global())
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è SSDP - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
        DispatchQueue.global().asyncAfter(deadline: .now() + 6.0) { [weak self] in
            print("üì° SSDP –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: \(foundBridges.count) –º–æ—Å—Ç–æ–≤")
            self?.udpConnection?.cancel()
            safeCompletion(foundBridges)
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ SSDP –æ—Ç–≤–µ—Ç–æ–≤
    private func receiveSSDP(completion: @escaping ([Bridge]) -> Void) {
        var allBridges: [Bridge] = []
        
        func receiveNext() {
            udpConnection?.receiveMessage { data, context, isComplete, error in
                defer { receiveNext() } // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
                
                guard let data = data,
                      let response = String(data: data, encoding: .utf8) else {
                    return
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç Hue Bridge
                if response.contains("IpBridge") || response.contains("hue") {
                    print("üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π Hue Bridge –≤ SSDP –æ—Ç–≤–µ—Ç–µ")
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ LOCATION –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    if let locationURL = self.extractLocationURL(from: response) {
                        print("üìç LOCATION URL: \(locationURL)")
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ Hue Bridge
                        self.validateHueBridge(locationURL: locationURL) { bridge in
                            if let bridge = bridge {
                                allBridges.append(bridge)
                                print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω Hue Bridge: \(bridge.id)")
                            }
                        }
                    }
                }
            }
        }
        
        receiveNext()
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ–º LOCATION URL –∏–∑ SSDP –æ—Ç–≤–µ—Ç–∞
    private func extractLocationURL(from response: String) -> String? {
        let lines = response.components(separatedBy: .newlines)
        for line in lines {
            if line.lowercased().hasPrefix("location:") {
                return line.components(separatedBy: ": ").last?.trimmingCharacters(in: .whitespacesAndNewlines)
            }
        }
        return nil
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Hue Bridge
    private func validateHueBridge(locationURL: String, completion: @escaping (Bridge?) -> Void) {
        guard let url = URL(string: locationURL) else {
            completion(nil)
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard let data = data,
                  error == nil,
                  let xmlString = String(data: data, encoding: .utf8) else {
                completion(nil)
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º XML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if self.isHueBridge(xml: xmlString) {
                let bridgeID = self.extractBridgeID(from: xmlString) ?? "unknown"
                let bridgeName = self.extractBridgeName(from: xmlString) ?? "Philips Hue Bridge"
                let bridgeIP = url.host ?? "unknown"
                
                let bridge = Bridge(
                    id: bridgeID,
                    internalipaddress: bridgeIP,
                    port: url.port ?? 80,
                    name: bridgeName
                )
                
                completion(bridge)
            } else {
                completion(nil)
            }
        }.resume()
    }
    
    /// Cloud Discovery —á–µ—Ä–µ–∑ Philips —Å–µ—Ä–≤–∏—Å
    private func cloudDiscovery(completion: @escaping ([Bridge]) -> Void) {
        print("‚òÅÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º Cloud Discovery...")
        
        var hasCompleted = false
        let cloudLock = NSLock()
        
        func safeCompletion(_ bridges: [Bridge]) {
            cloudLock.lock()
            defer { cloudLock.unlock() }
            
            guard !hasCompleted else { return }
            hasCompleted = true
            completion(bridges)
        }
        
        guard let url = URL(string: "https://discovery.meethue.com") else {
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å URL –¥–ª—è Cloud Discovery")
            safeCompletion([])
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 5.0
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {
                print("‚ùå Cloud –æ—à–∏–±–∫–∞: \(error?.localizedDescription ?? "unknown")")
                safeCompletion([])
                return
            }
            
            do {
                let bridges = try JSONDecoder().decode([Bridge].self, from: data)
                print("‚òÅÔ∏è Cloud –æ—Ç–≤–µ—Ç–∏–ª: \(bridges.count) –º–æ—Å—Ç–æ–≤")
                safeCompletion(bridges)
            } catch {
                print("‚ùå Cloud JSON –æ—à–∏–±–∫–∞: \(error)")
                safeCompletion([])
            }
        }.resume()
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        DispatchQueue.global().asyncAfter(deadline: .now() + 6.0) {
            safeCompletion([])
        }
    }
    
    /// IP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    private func ipScanDiscovery(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞...")
        
        var hasCompleted = false
        let ipScanLock = NSLock()
        
        func safeCompletion(_ bridges: [Bridge]) {
            ipScanLock.lock()
            defer { ipScanLock.unlock() }
            
            guard !hasCompleted else { return }
            hasCompleted = true
            completion(bridges)
        }
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑ SSDP —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
        let commonIPs = [
            // 192.168.1.x –¥–∏–∞–ø–∞–∑–æ–Ω (—Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π)
            "192.168.1.2", "192.168.1.3", "192.168.1.4", "192.168.1.5", "192.168.1.6", "192.168.1.7", "192.168.1.8", "192.168.1.10",
            // 192.168.0.x –¥–∏–∞–ø–∞–∑–æ–Ω
            "192.168.0.2", "192.168.0.3", "192.168.0.4", "192.168.0.5", "192.168.0.6", "192.168.0.7", "192.168.0.8", "192.168.0.10",
            // 192.168.100.x (–ø–æ–ø—É–ª—è—Ä–Ω—ã–π —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤)
            "192.168.100.2", "192.168.100.3", "192.168.100.4", "192.168.100.5",
            // Google Nest WiFi
            "192.168.86.2", "192.168.86.3", "192.168.86.4", "192.168.86.5",
            // 10.0.0.x –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∏
            "10.0.0.2", "10.0.0.3", "10.0.0.4", "10.0.0.5", "10.0.1.2", "10.0.1.3",
            // 172.16.x.x –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ
            "172.16.0.2", "172.16.0.3", "172.16.1.2", "172.16.1.3"
        ]
        
        var foundBridges: [Bridge] = []
        var completedIPs = 0
        let totalIPs = commonIPs.count
        
        for ip in commonIPs {
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º IP: \(ip)")
            checkIP(ip) { bridge in
                ipScanLock.lock()
                if let bridge = bridge {
                    foundBridges.append(bridge)
                    print("‚úÖ –ù–∞–π–¥–µ–Ω –º–æ—Å—Ç –Ω–∞ \(ip): \(bridge.id)")
                } else {
                    print("‚ùå –ú–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ \(ip)")
                }
                
                completedIPs += 1
                
                // –ï—Å–ª–∏ –≤—Å–µ IP –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º
                if completedIPs >= totalIPs {
                    print("üèÅ IP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(foundBridges.count)")
                    ipScanLock.unlock()
                    safeCompletion(foundBridges)
                    return
                }
                ipScanLock.unlock()
            }
        }
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è IP scan
        DispatchQueue.global().asyncAfter(deadline: .now() + 5.0) {
            safeCompletion(foundBridges)
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω IP –∞–¥—Ä–µ—Å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Hue Bridge - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    private func checkIP(_ ip: String, completion: @escaping (Bridge?) -> Void) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º /api/0/config (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
        checkIPViaConfig(ip) { bridge in
            if bridge != nil {
                completion(bridge)
            } else {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º /description.xml  
                self.checkIPViaXML(ip, completion: completion)
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ /api/0/config (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
    private func checkIPViaConfig(_ ip: String, completion: @escaping (Bridge?) -> Void) {
        guard let url = URL(string: "http://\(ip)/api/0/config") else {
            completion(nil)
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 2.0
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data,
                  let httpResponse = response as? HTTPURLResponse,
                  httpResponse.statusCode == 200,
                  error == nil else {
                print("üîç /api/0/config –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ \(ip)")
                completion(nil)
                return
            }
            
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let bridgeID = json["bridgeid"] as? String,
                   let name = json["name"] as? String {
                    
                    print("‚úÖ –ù–∞–π–¥–µ–Ω Hue Bridge —á–µ—Ä–µ–∑ /api/0/config –Ω–∞ \(ip): \(bridgeID)")
                    let bridge = Bridge(
                        id: bridgeID,
                        internalipaddress: ip,
                        port: 80,
                        name: name
                    )
                    completion(bridge)
                } else {
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ /api/0/config –Ω–∞ \(ip)")
                    completion(nil)
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ \(ip): \(error)")
                completion(nil)
            }
        }.resume()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ /description.xml (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    private func checkIPViaXML(_ ip: String, completion: @escaping (Bridge?) -> Void) {
        guard let url = URL(string: "http://\(ip)/description.xml") else {
            completion(nil)
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 1.5 // –ë—ã—Å—Ç—Ä–µ–µ —Ç–∞–π–º–∞—É—Ç
        request.setValue("application/xml", forHTTPHeaderField: "Accept")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data,
                  error == nil,
                  let xmlString = String(data: data, encoding: .utf8) else {
                completion(nil)
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Hue Bridge
            guard self.isHueBridge(xml: xmlString) else {
                completion(nil)
                return
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–æ—Å—Ç–∞
            let bridgeID = self.extractBridgeID(from: xmlString) ?? "unknown"
            let bridgeName = self.extractBridgeName(from: xmlString) ?? "Philips Hue Bridge"
            
            let bridge = Bridge(
                id: bridgeID,
                internalipaddress: ip,
                port: 80,
                name: bridgeName
            )
            
            completion(bridge)
        }.resume()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Hue Bridge - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    private func isHueBridge(xml: String) -> Bool {
        let lowerXml = xml.lowercased()
        return lowerXml.contains("philips hue") ||
               lowerXml.contains("royal philips") ||
               lowerXml.contains("modelname>philips hue bridge") ||
               lowerXml.contains("ipbridge") ||
               lowerXml.contains("signify") || // –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü Hue
               (lowerXml.contains("manufacturer>royal philips") && lowerXml.contains("hue"))
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –º–æ—Å—Ç–∞ –∏–∑ XML - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    private func extractBridgeID(from xml: String) -> String? {
        // –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ ID
        let patterns = [
            "<serialNumber>",
            "<serialnumber>",
            "<UDN>uuid:",
            "<udn>uuid:"
        ]
        
        for pattern in patterns {
            if let start = xml.range(of: pattern, options: .caseInsensitive) {
                let searchStart = start.upperBound
                
                if pattern.contains("uuid:") {
                    // –î–ª—è UDN –∏—â–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–≥–∞
                    if let end = xml.range(of: "</UDN>", options: .caseInsensitive, range: searchStart..<xml.endIndex) {
                        let udn = String(xml[searchStart..<end.lowerBound])
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ bridge ID
                        if udn.count >= 12 {
                            return String(udn.suffix(12))
                        }
                    }
                } else {
                    // –î–ª—è serialNumber
                    if let end = xml.range(of: "</serialNumber>", options: .caseInsensitive, range: searchStart..<xml.endIndex) {
                        let id = String(xml[searchStart..<end.lowerBound])
                        return id.trimmingCharacters(in: .whitespacesAndNewlines)
                    }
                }
            }
        }
        return nil
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –º–æ—Å—Ç–∞ –∏–∑ XML - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    private func extractBridgeName(from xml: String) -> String? {
        let patterns = [
            "<friendlyName>",
            "<friendlyname>",
            "<modelDescription>",
            "<modeldescription>"
        ]
        
        for pattern in patterns {
            if let start = xml.range(of: pattern, options: .caseInsensitive) {
                let searchStart = start.upperBound
                let endPattern = "</" + pattern.dropFirst().dropLast() + ">"
                
                if let end = xml.range(of: endPattern, options: .caseInsensitive, range: searchStart..<xml.endIndex) {
                    let name = String(xml[searchStart..<end.lowerBound])
                    let cleanName = name.trimmingCharacters(in: .whitespacesAndNewlines)
                    if !cleanName.isEmpty {
                        return cleanName
                    }
                }
            }
        }
        return nil
    }
    
    // MARK: - Cleanup
    
    deinit {
        udpConnection?.cancel()
    }
}
