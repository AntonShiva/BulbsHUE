//
//  NetworkDiagnostics.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 13.08.2025.
//

import Foundation
import Network
import SystemConfiguration

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ Hue Bridge
class NetworkDiagnostics {
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    static func isInternetAvailable() -> Bool {
        var zeroAddress = sockaddr_in()
        zeroAddress.sin_len = UInt8(MemoryLayout<sockaddr_in>.size)
        zeroAddress.sin_family = sa_family_t(AF_INET)
        
        guard let defaultRouteReachability = withUnsafePointer(to: &zeroAddress, {
            $0.withMemoryRebound(to: sockaddr.self, capacity: 1) {
                SCNetworkReachabilityCreateWithAddress(nil, $0)
            }
        }) else {
            return false
        }
        
        var flags: SCNetworkReachabilityFlags = []
        if !SCNetworkReachabilityGetFlags(defaultRouteReachability, &flags) {
            return false
        }
        
        let isReachable = flags.contains(.reachable)
        let needsConnection = flags.contains(.connectionRequired)
        
        return isReachable && !needsConnection
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ—Ç–µ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    static func getCurrentNetworkInfo() -> String {
        var info = "üì∂ –°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        let internetAvailable = isInternetAvailable()
        info += "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: \(internetAvailable ? "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" : "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")\n"
        
        // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if let deviceIP = SmartBridgeDiscovery.getCurrentDeviceIP() {
            info += "üì± IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: \(deviceIP)\n"
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–µ—Ç—å
            let subnet = extractSubnet(from: deviceIP)
            info += "üè† –ü–æ–¥—Å–µ—Ç—å: \(subnet)\n"
        } else {
            info += "üì± IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ‚ùå –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Wi-Fi
        info += "üì° Wi-Fi: \(isConnectedToWiFi() ? "‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω" : "‚ùå –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")\n"
        
        return info
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Å–µ—Ç—å –∏–∑ IP –∞–¥—Ä–µ—Å–∞
    private static func extractSubnet(from ip: String) -> String {
        let components = ip.components(separatedBy: ".")
        if components.count >= 3 {
            return "\(components[0]).\(components[1]).\(components[2]).x"
        }
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi
    private static func isConnectedToWiFi() -> Bool {
        guard let reachability = SCNetworkReachabilityCreateWithName(nil, "www.apple.com") else {
            return false
        }
        
        var flags: SCNetworkReachabilityFlags = []
        SCNetworkReachabilityGetFlags(reachability, &flags)
        
        return flags.contains(.reachable) && !flags.contains(.isWWAN)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å –Ω–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å
    static func pingHost(_ host: String, completion: @escaping (Bool, TimeInterval?) -> Void) {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        guard let url = URL(string: "http://\(host)") else {
            completion(false, nil)
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 3.0
        request.httpMethod = "HEAD" // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        
        URLSession.shared.dataTask(with: request) { _, response, error in
            let responseTime = CFAbsoluteTimeGetCurrent() - startTime
            
            if error == nil, let httpResponse = response as? HTTPURLResponse {
                completion(httpResponse.statusCode < 500, responseTime)
            } else {
                completion(false, nil)
            }
        }.resume()
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ Philips
    static func testPhilipsCloudService(completion: @escaping (Bool, String) -> Void) {
        guard let url = URL(string: "https://discovery.meethue.com") else {
            completion(false, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å URL")
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 10.0
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        
        let startTime = CFAbsoluteTimeGetCurrent()
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            let responseTime = CFAbsoluteTimeGetCurrent() - startTime
            
            if let error = error {
                completion(false, "–û—à–∏–±–∫–∞: \(error.localizedDescription)")
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion(false, "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                return
            }
            
            if httpResponse.statusCode == 200 {
                if let data = data, data.count > 0 {
                    completion(true, "‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: \(String(format: "%.2f", responseTime))—Å)")
                } else {
                    completion(false, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞")
                }
            } else {
                completion(false, "HTTP \(httpResponse.statusCode)")
            }
        }.resume()
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
    static func generateDiagnosticReport(completion: @escaping (String) -> Void) {
        var report = "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–¢–ò HUE BRIDGE\n"
        report += "=" * 40 + "\n\n"
        
        // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
        report += getCurrentNetworkInfo() + "\n"
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        testPhilipsCloudService { success, message in
            report += "‚òÅÔ∏è Philips Cloud: \(message)\n\n"
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞
            let testIPs = ["192.168.1.1", "192.168.0.1", "10.0.0.1"]
            var completedTests = 0
            
            report += "üè† –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ô –°–ï–¢–ò:\n"
            
            for ip in testIPs {
                pingHost(ip) { success, responseTime in
                    if success, let time = responseTime {
                        report += "‚úÖ \(ip) –æ—Ç–≤–µ—á–∞–µ—Ç (\(String(format: "%.0f", time * 1000))ms)\n"
                    } else {
                        report += "‚ùå \(ip) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    }
                    
                    completedTests += 1
                    if completedTests == testIPs.count {
                        report += "\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                        
                        if !isInternetAvailable() {
                            report += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                        }
                        
                        if !isConnectedToWiFi() {
                            report += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Wi-Fi\n"
                        }
                        
                        report += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Hue Bridge\n"
                        report += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Bridge –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏\n"
                        report += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞ (multicast/UPnP)\n"
                        
                        completion(report)
                    }
                }
            }
        }
    }
}

private extension String {
    static func *(lhs: String, rhs: Int) -> String {
        return String(repeating: lhs, count: rhs)
    }
}
