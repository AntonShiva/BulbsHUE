import Foundation
import Network

#if canImport(Darwin)
import Darwin
#endif

@available(iOS 12.0, *)
class HueBridgeDiscovery {
    
    // MARK: - Properties
    
    internal var udpConnection: NWConnection?
    internal var isDiscovering = false
    internal let discoveryTimeout: TimeInterval = 40.0
    internal let lock = NSLock()
    
    // MARK: - Public Methods
    
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge...")
        
        let networkInfo = NetworkDiagnostics.getCurrentNetworkInfo()
        print(networkInfo)
        
        guard !isDiscovering else {
            print("‚ö†Ô∏è Discovery —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            completion([])
            return
        }
        
        isDiscovering = true
        var hasCompleted = false
        let globalLock = NSLock()
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
        func finishDiscovery(with bridges: [Bridge], reason: String) {
            globalLock.lock()
            defer { globalLock.unlock() }
            
            guard !hasCompleted else { return }
            hasCompleted = true
            self.isDiscovering = false
            
            let normalized = bridges.map { b -> Bridge in
                var nb = b; nb.id = b.normalizedId; return nb
            }
            
            Task { @MainActor in
                print("üéØ \(reason): –Ω–∞–π–¥–µ–Ω–æ \(normalized.count) –º–æ—Å—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫.")
                for bridge in normalized {
                    print("   - \(bridge.name ?? "Unknown") (\(bridge.id)) at \(bridge.internalipaddress)")
                }
                print("üìã Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: \(normalized.count) –º–æ—Å—Ç–æ–≤")
                completion(normalized)
            }
        }

        if #available(iOS 14.0, *) {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–æ–≤
            print("üéØ –®–∞–≥ 1: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mDNS –ø–æ–∏—Å–∫...")
            attemptMDNSDiscovery { bridges in
                if !bridges.isEmpty {
                    print("‚úÖ mDNS —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–µ–ª –º–æ—Å—Ç(—ã)!")
                    finishDiscovery(with: bridges, reason: "mDNS Discovery")
                    return
                }
                
                print("üéØ –®–∞–≥ 2: mDNS –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º Cloud Discovery...")
                self.cloudDiscovery { bridges in
                    if !bridges.isEmpty {
                        print("‚úÖ Cloud Discovery —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–µ–ª –º–æ—Å—Ç(—ã)!")
                        finishDiscovery(with: bridges, reason: "Cloud Discovery")
                        return
                    }
                    
                    print("üéØ –®–∞–≥ 3: Cloud –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
                    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–µ –º–µ—Ç–æ–¥—ã - –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ
                    var allFoundBridges: [Bridge] = []
                    let slowLock = NSLock()
                    var completedSlowTasks = 0
                    let totalSlowTasks = 2

                    func slowTaskCompletion(bridges: [Bridge], taskName: String) {
                        slowLock.lock()
                        defer { slowLock.unlock() }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∏—Å–∫ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                        globalLock.lock()
                        let stillSearching = !hasCompleted
                        globalLock.unlock()
                        
                        guard stillSearching else { return }

                        print("‚úÖ \(taskName) –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: \(bridges.count) –º–æ—Å—Ç–æ–≤")
                        
                        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–æ—Å—Ç—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                        if !bridges.isEmpty {
                            finishDiscovery(with: bridges, reason: taskName)
                            return
                        }

                        let uniqueBridges = bridges.map { b in
                            var normalized = b
                            normalized.id = b.normalizedId
                            return normalized
                        }.filter { newBridge in
                            !allFoundBridges.contains { existing in
                                existing.normalizedId == newBridge.normalizedId ||
                                existing.internalipaddress == newBridge.internalipaddress
                            }
                        }
                        allFoundBridges.append(contentsOf: uniqueBridges)

                        completedSlowTasks += 1

                        if completedSlowTasks >= totalSlowTasks {
                            finishDiscovery(with: allFoundBridges, reason: "–í—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                        }
                    }

                    SmartBridgeDiscovery.discoverBridgeIntelligently { bridges in
                        slowTaskCompletion(bridges: bridges, taskName: "Smart Discovery")
                    }

                    self.ipScanDiscovery { bridges in
                        slowTaskCompletion(bridges: bridges, taskName: "Legacy IP Scan")
                    }

                    // –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                    Task { [weak self] in
                        guard let self = self else { return }
                        try await Task.sleep(nanoseconds: UInt64(self.discoveryTimeout * 1_000_000_000))
                        
                        slowLock.lock()
                        let currentBridges = allFoundBridges
                        slowLock.unlock()
                        
                        finishDiscovery(with: currentBridges, reason: "–¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞")
                    }
                }
            }
        } else {
            // Legacy iOS < 14.0 - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            print("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy discovery –¥–ª—è iOS < 12.0")
            cloudDiscovery { bridges in
                if !bridges.isEmpty {
                    finishDiscovery(with: bridges, reason: "Cloud Discovery (Legacy)")
                    return
                }
                
                SmartBridgeDiscovery.discoverBridgeIntelligently { bridges in
                    if !bridges.isEmpty {
                        finishDiscovery(with: bridges, reason: "Smart Discovery (Legacy)")
                        return
                    }
                    
                    self.ipScanDiscovery { bridges in
                        finishDiscovery(with: bridges, reason: "IP Scan (Legacy)")
                    }
                }
            }
        }
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞
    func stopDiscovery() {
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞...")
        
        lock.lock()
        defer { lock.unlock() }
        
        isDiscovering = false
        udpConnection?.cancel()
        udpConnection = nil
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    }
    
    // MARK: - Cleanup
    
    deinit {
        udpConnection?.cancel()
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueBridgeDiscovery.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ Philips Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.
 –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ (mDNS, Cloud, IP scan, SSDP)
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞
 - –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 - –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 let discovery = HueBridgeDiscovery()
 discovery.discoverBridges { bridges in
     print("–ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(bridges.count)")
 }
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - Foundation, Network frameworks
 - NetworkDiagnostics –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
 - SmartBridgeDiscovery –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueBridgeDiscovery+SSDP.swift - SSDP –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∏—Å–∫–∞
 - HueBridgeDiscovery+Cloud.swift - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ Philips
 - HueBridgeDiscovery+IPScan.swift - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤
 - HueBridgeDiscovery+mDNS.swift - mDNS/Bonjour –ø–æ–∏—Å–∫
 - HueBridgeDiscovery+Validation.swift - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Å—Ç–æ–≤
 */
