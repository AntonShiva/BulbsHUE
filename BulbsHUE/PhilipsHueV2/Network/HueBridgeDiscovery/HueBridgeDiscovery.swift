import Foundation
import Network

#if canImport(Darwin)
import Darwin
#endif

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
private final class CompletionState {
    private let lock = NSLock()
    private var isCompleted = false
    
    func tryComplete() -> Bool {
        lock.lock()
        defer { lock.unlock() }
        
        guard !isCompleted else { return false }
        isCompleted = true
        return true
    }
    
    var completed: Bool {
        lock.lock()
        defer { lock.unlock() }
        return isCompleted
    }
}

@available(iOS 12.0, *)
class HueBridgeDiscovery {
    
    // MARK: - Properties
    
    internal var udpConnection: NWConnection?
    internal var isDiscovering = false
    internal let discoveryTimeout: TimeInterval = 40.0
    internal let lock = NSLock()
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Task –¥–ª—è proper cancellation
    private var timeoutTask: Task<Void, Never>?
    private var smartDiscoveryTask: Task<Void, Never>?
    private var ipScanTask: Task<Void, Never>?
    
    // MARK: - Public Methods
    
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge...")
        
        let networkInfo = NetworkDiagnostics.getCurrentNetworkInfo()
        print(networkInfo)
        
        guard !isDiscovering else {
            print("‚ö†Ô∏è Discovery —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            completion([])
            return
        }
        
        isDiscovering = true
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        let completionState = CompletionState()
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Å –æ—Ç–º–µ–Ω–æ–π Task
        func finishDiscovery(with bridges: [Bridge], reason: String) {
            guard completionState.tryComplete() else { return }
            
            self.lock.lock()
            self.isDiscovering = false
            self.lock.unlock()
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Task'–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            self.timeoutTask?.cancel()
            self.timeoutTask = nil
            self.smartDiscoveryTask?.cancel()
            self.smartDiscoveryTask = nil
            self.ipScanTask?.cancel()
            self.ipScanTask = nil
            
            let normalized = bridges.map { b -> Bridge in
                var nb = b; nb.id = b.normalizedId; return nb
            }
            
            Task { @MainActor in
                print("üéØ \(reason): –Ω–∞–π–¥–µ–Ω–æ \(normalized.count) –º–æ—Å—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫.")
                for bridge in normalized {
                    print("   - \(bridge.name ?? "Unknown") (\(bridge.id)) at \(bridge.internalipaddress)")
                }
                print("üìã Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: \(normalized.count) –º–æ—Å—Ç–æ–≤")
                completion(normalized)
            }
        }

        if #available(iOS 14.0, *) {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–¢–†–û–ì–û –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ mDNS ‚Üí Cloud ‚Üí Smart/IP
            executeSequentialDiscovery(completionState: completionState, finishDiscovery: finishDiscovery)
        } else {
            // Legacy iOS < 14.0 - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
            print("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy discovery –¥–ª—è iOS < 12.0")
            executeSequentialDiscoveryLegacy(completionState: completionState, finishDiscovery: finishDiscovery)
        }
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞
    func stopDiscovery() {
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞...")
        
        lock.lock()
        defer { lock.unlock() }
        
        isDiscovering = false
        udpConnection?.cancel()
        udpConnection = nil
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Task'–∏
        timeoutTask?.cancel()
        timeoutTask = nil
        smartDiscoveryTask?.cancel()
        smartDiscoveryTask = nil
        ipScanTask?.cancel()
        ipScanTask = nil
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    }
    
    // MARK: - Sequential Discovery Implementation
    
    /// –°–¢–†–û–ì–û –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è iOS 14+ 
    /// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: mDNS ‚Üí Cloud ‚Üí Smart ‚Üí IP (–∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ –Ω–∞—à–µ–ª)
    @available(iOS 14.0, *)
    private func executeSequentialDiscovery(
        completionState: CompletionState, 
        finishDiscovery: @escaping ([Bridge], String) -> Void
    ) {
        print("üéØ –®–ê–ì 1/4: –ó–∞–ø—É—Å–∫ mDNS Discovery - –∂–¥–µ–º –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        
        attemptMDNSDiscovery { [weak self] bridges in
            guard let self = self else { return }
            
            if !bridges.isEmpty {
                print("‚úÖ mDNS –£–°–ü–ï–®–ù–û –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç(–æ–≤) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫!")
                finishDiscovery(bridges, "mDNS Discovery")
                return
            }
            
            print("‚ùå mDNS –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤")
            print("üéØ –®–ê–ì 2/4: –ó–∞–ø—É—Å–∫ Cloud Discovery - –∂–¥–µ–º –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            
            self.cloudDiscovery { [weak self] bridges in
                guard let self = self else { return }
                
                if !bridges.isEmpty {
                    print("‚úÖ Cloud Discovery –£–°–ü–ï–®–ù–û –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç(–æ–≤) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫!")
                    finishDiscovery(bridges, "Cloud Discovery")
                    return
                }
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —à–∞–≥–æ–º 3
                guard !completionState.completed else {
                    print("üõë –®–∞–≥ 3: Discovery —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Smart/IP")
                    return
                }
                
                print("‚ùå Cloud Discovery –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤")
                print("üéØ –®–ê–ì 3/4: –ó–∞–ø—É—Å–∫ Smart Discovery - –∂–¥–µ–º –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                
                // –°–¢–†–û–ì–û –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: Smart Discovery ‚Üí IP Scan
                self.executeSequentialSlowDiscovery(completionState: completionState, finishDiscovery: finishDiscovery)
            }
        }
    }
    
    /// Legacy –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è iOS < 14
    private func executeSequentialDiscoveryLegacy(
        completionState: CompletionState,
        finishDiscovery: @escaping ([Bridge], String) -> Void
    ) {
        print("üéØ –®–ê–ì 1/2: –ó–∞–ø—É—Å–∫ Cloud Discovery (Legacy) - –∂–¥–µ–º –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        
        cloudDiscovery { [weak self] bridges in
            guard let self = self else { return }
            
            if !bridges.isEmpty {
                print("‚úÖ Cloud Discovery –£–°–ü–ï–®–ù–û –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç(–æ–≤) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫!")
                finishDiscovery(bridges, "Cloud Discovery (Legacy)")
                return
            }
            
            print("‚ùå Cloud Discovery –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤")
            print("üéØ –®–ê–ì 2/2: –ó–∞–ø—É—Å–∫ Smart Discovery - –∂–¥–µ–º –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            
            SmartBridgeDiscovery.discoverBridgeIntelligently { [weak self] bridges in
                guard let self = self else { return }
                
                if !bridges.isEmpty {
                    print("‚úÖ Smart Discovery –£–°–ü–ï–®–ù–û –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç(–æ–≤)!")
                    finishDiscovery(bridges, "Smart Discovery (Legacy)")
                    return
                }
                
                print("‚ùå Smart Discovery –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤")
                print("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: IP Scan Discovery...")
                
                self.ipScanDiscovery(shouldStop: { completionState.completed }) { [weak self] bridges in
                    guard let self = self else { return }
                    print("üéØ IP Scan –∑–∞–≤–µ—Ä—à–µ–Ω —Å \(bridges.count) –º–æ—Å—Ç–∞–º–∏")
                    finishDiscovery(bridges, "IP Scan (Legacy)")
                }
            }
        }
    }
    
    /// –°—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: Smart Discovery ‚Üí IP Scan
    private func executeSequentialSlowDiscovery(
        completionState: CompletionState,
        finishDiscovery: @escaping ([Bridge], String) -> Void
    ) {
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ Smart Discovery
        guard !completionState.completed else {
            print("üõë executeSequentialSlowDiscovery: Discovery —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return
        }
        
        print("üß† –ó–∞–ø—É—Å–∫ Smart Discovery (–®–∞–≥ 3/4)...")
        
        SmartBridgeDiscovery.discoverBridgeIntelligently(shouldStop: { completionState.completed }) { [weak self] bridges in
            guard let self = self else { return }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ Smart Discovery
            guard !completionState.completed else {
                print("üõë Smart Discovery: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω - Discovery —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return
            }
            
            if !bridges.isEmpty {
                print("‚úÖ Smart Discovery –£–°–ü–ï–®–ù–û –Ω–∞—à–µ–ª \(bridges.count) –º–æ—Å—Ç(–æ–≤) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫!")
                finishDiscovery(bridges, "Smart Discovery")
                return
            }
            
            print("‚ùå Smart Discovery –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤")
            
            // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ IP Scan
            guard !completionState.completed else {
                print("üõë IP Scan: Discovery —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                finishDiscovery([], "Smart Discovery –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return
            }
            
            print("üéØ –®–ê–ì 4/4: –ó–∞–ø—É—Å–∫ IP Scan Discovery - –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞...")
            
            self.ipScanDiscovery(shouldStop: { completionState.completed }) { bridges in
                guard !completionState.completed else {
                    print("üõë IP Scan Discovery: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω - Discovery —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    return
                }
                
                print("üéØ IP Scan Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å \(bridges.count) –º–æ—Å—Ç–∞–º–∏")
                finishDiscovery(bridges, "IP Scan Discovery")
            }
        }
    }
    
    // MARK: - Cleanup
    
    deinit {
        udpConnection?.cancel()
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueBridgeDiscovery.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ Philips Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.
 –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –°–¢–†–û–ì–û –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
 
 –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ü–û–ò–°–ö–ê (—Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è):
 1. mDNS/Bonjour Discovery (iOS 14+) - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å
 2. Cloud Discovery - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API Philips Hue
 3. Smart Discovery - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö IP
 4. IP Scan Discovery - –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ IP
 
 –í–ê–ñ–ù–û: –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ù–ï –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤.
 –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ - –ø–æ–∏—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢–°–Ø.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - executeSequentialDiscovery() - –≥–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 - executeSequentialSlowDiscovery() - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Smart ‚Üí IP Discovery
 - CompletionState - –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
 - finishDiscovery() - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π –≤—Å–µ—Ö Task'–æ–≤
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 let discovery = HueBridgeDiscovery()
 discovery.discoverBridges { bridges in
     print("–ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(bridges.count)")
 }
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - Foundation, Network frameworks
 - NetworkDiagnostics –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
 - SmartBridgeDiscovery –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueBridgeDiscovery+SSDP.swift - SSDP –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∏—Å–∫–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ)
 - HueBridgeDiscovery+Cloud.swift - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ Philips
 - HueBridgeDiscovery+IPScan.swift - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤
 - HueBridgeDiscovery+mDNS.swift - mDNS/Bonjour –ø–æ–∏—Å–∫
 - HueBridgeDiscovery+Validation.swift - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Å—Ç–æ–≤
 */
