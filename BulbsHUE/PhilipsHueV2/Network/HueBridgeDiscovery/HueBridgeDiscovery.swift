import Foundation
import Network

#if canImport(Darwin)
import Darwin
#endif

@available(iOS 12.0, *)
class HueBridgeDiscovery {
    
    // MARK: - Properties
    
    internal var udpConnection: NWConnection?
    internal var isDiscovering = false
    internal let discoveryTimeout: TimeInterval = 40.0
    internal let lock = NSLock()
    
    // MARK: - Public Methods
    
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge...")
        
        let networkInfo = NetworkDiagnostics.getCurrentNetworkInfo()
        print(networkInfo)
        
        guard !isDiscovering else {
            print("‚ö†Ô∏è Discovery —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            completion([])
            return
        }
        
        isDiscovering = true

        func finishEarly(with bridges: [Bridge]) {
            self.isDiscovering = false
            let normalized = bridges.map { b -> Bridge in
                var nb = b; nb.id = b.normalizedId; return nb
            }
            DispatchQueue.main.async {
                print("üéØ mDNS –Ω–∞—à—ë–ª –º–æ—Å—Ç(—ã): \(normalized.count). –†–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
                for bridge in normalized {
                    print("   - \(bridge.name ?? "Unknown") (\(bridge.id)) at \(bridge.internalipaddress)")
                }
                print("üìã Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: \(normalized.count) –º–æ—Å—Ç–æ–≤")
                completion(normalized)
            }
        }

        if #available(iOS 14.0, *) {
            attemptMDNSDiscovery { bridges in
                if !bridges.isEmpty {
                    finishEarly(with: bridges)
                    return
                }

                var allFoundBridges: [Bridge] = []
                let lock = NSLock()
                var completedTasks = 0
                let totalTasks = 3

                func safeTaskCompletion(bridges: [Bridge], taskName: String) {
                    lock.lock()
                    defer { lock.unlock() }

                    print("‚úÖ \(taskName) –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: \(bridges.count) –º–æ—Å—Ç–æ–≤")

                    if taskName == "Cloud Discovery", !bridges.isEmpty {
                        finishEarly(with: bridges)
                        return
                    }

                    let uniqueBridges = bridges.map { b in
                        var normalized = b
                        normalized.id = b.normalizedId
                        return normalized
                    }.filter { newBridge in
                        !allFoundBridges.contains { existing in
                            existing.normalizedId == newBridge.normalizedId ||
                            existing.internalipaddress == newBridge.internalipaddress
                        }
                    }
                    allFoundBridges.append(contentsOf: uniqueBridges)

                    completedTasks += 1

                    if completedTasks >= totalTasks {
                        self.isDiscovering = false
                        DispatchQueue.main.async {
                            print("üéØ –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ—Å—Ç–æ–≤: \(allFoundBridges.count)")
                            for bridge in allFoundBridges {
                                print("   - \(bridge.name ?? "Unknown") (\(bridge.id)) at \(bridge.internalipaddress)")
                            }
                            print("üìã Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: \(allFoundBridges.count) –º–æ—Å—Ç–æ–≤")
                            completion(allFoundBridges)
                        }
                    }
                }

                self.cloudDiscovery { bridges in
                    if !bridges.isEmpty {
                        finishEarly(with: bridges)
                        return
                    }

                    SmartBridgeDiscovery.discoverBridgeIntelligently { bridges in
                        safeTaskCompletion(bridges: bridges, taskName: "Smart Discovery")
                    }

                    self.ipScanDiscovery { bridges in
                        safeTaskCompletion(bridges: bridges, taskName: "Legacy IP Scan")
                    }

                    DispatchQueue.global().asyncAfter(deadline: .now() + self.discoveryTimeout) { [weak self] in
                        guard let self = self, self.isDiscovering else { return }
                        self.isDiscovering = false
                        DispatchQueue.main.async {
                            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞, –Ω–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(allFoundBridges.count)")
                            if allFoundBridges.isEmpty {
                                print("‚ùå –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                                NetworkDiagnostics.generateDiagnosticReport { report in
                                    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢:")
                                    print(report)
                                }
                            }
                            completion(allFoundBridges)
                        }
                    }
                }
            }
        } else {
            var allFoundBridges: [Bridge] = []
            let lock = NSLock()
            var completedTasks = 0
            let totalTasks = 3

            func safeTaskCompletion(bridges: [Bridge], taskName: String) {
                lock.lock(); defer { lock.unlock() }
                print("‚úÖ \(taskName) –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: \(bridges.count) –º–æ—Å—Ç–æ–≤")
                let uniqueBridges = bridges.filter { newBridge in
                    !allFoundBridges.contains { existing in
                        existing.normalizedId == newBridge.normalizedId ||
                        existing.internalipaddress == newBridge.internalipaddress
                    }
                }
                allFoundBridges.append(contentsOf: uniqueBridges)
                completedTasks += 1
                if completedTasks >= totalTasks {
                    isDiscovering = false
                    DispatchQueue.main.async { completion(allFoundBridges) }
                }
            }

            cloudDiscovery { bridges in safeTaskCompletion(bridges: bridges, taskName: "Cloud Discovery") }
            SmartBridgeDiscovery.discoverBridgeIntelligently { bridges in safeTaskCompletion(bridges: bridges, taskName: "Smart Discovery") }
            ipScanDiscovery { bridges in safeTaskCompletion(bridges: bridges, taskName: "Legacy IP Scan") }
        }
    }
    
    // MARK: - Cleanup
    
    deinit {
        udpConnection?.cancel()
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueBridgeDiscovery.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ Philips Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.
 –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ (mDNS, Cloud, IP scan, SSDP)
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞
 - –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 - –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 let discovery = HueBridgeDiscovery()
 discovery.discoverBridges { bridges in
     print("–ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(bridges.count)")
 }
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - Foundation, Network frameworks
 - NetworkDiagnostics –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
 - SmartBridgeDiscovery –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueBridgeDiscovery+SSDP.swift - SSDP –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∏—Å–∫–∞
 - HueBridgeDiscovery+Cloud.swift - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ Philips
 - HueBridgeDiscovery+IPScan.swift - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤
 - HueBridgeDiscovery+mDNS.swift - mDNS/Bonjour –ø–æ–∏—Å–∫
 - HueBridgeDiscovery+Validation.swift - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Å—Ç–æ–≤
 */
