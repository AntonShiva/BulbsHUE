//
//  HueBridgeDiscovery+mDNS.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/15/25.
//

import Foundation
import Network
#if canImport(Darwin)
import Darwin
#endif

@available(iOS 14.0, *)
extension HueBridgeDiscovery {
    
    // MARK: - mDNS/Bonjour Discovery
    
    internal func attemptMDNSDiscovery(completion: @escaping ([Bridge]) -> Void) {
        print("üéØ –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mDNS –ø–æ–∏—Å–∫...")

        let browser = NWBrowser(for: .bonjour(type: "_hue._tcp", domain: nil), using: .tcp)
        var hasCompleted = false
        let completeOnce: ([Bridge]) -> Void = { bridges in
            guard !hasCompleted else { return }
            hasCompleted = true
            completion(bridges)
        }

        final class ServiceResolver: NSObject, NetServiceDelegate {
            private let onResolved: (String, Int) -> Void
            private let onFailed: () -> Void

            init(onResolved: @escaping (String, Int) -> Void, onFailed: @escaping () -> Void) {
                self.onResolved = onResolved
                self.onFailed = onFailed
            }

            func netService(_ sender: NetService, didNotResolve errorDict: [String : NSNumber]) {
                onFailed()
            }

            func netServiceDidResolveAddress(_ sender: NetService) {
                guard let addresses = sender.addresses else { onFailed(); return }
                for addressData in addresses {
                    addressData.withUnsafeBytes { (pointer: UnsafeRawBufferPointer) in
                        guard let sockaddrPointer = pointer.baseAddress?.assumingMemoryBound(to: sockaddr.self) else { return }
                        if sockaddrPointer.pointee.sa_family == sa_family_t(AF_INET) {
                            let addrIn = UnsafeRawPointer(sockaddrPointer).assumingMemoryBound(to: sockaddr_in.self).pointee
                            var ip = [CChar](repeating: 0, count: Int(INET_ADDRSTRLEN))
                            var addr = addrIn.sin_addr
                            inet_ntop(AF_INET, &addr, &ip, socklen_t(INET_ADDRSTRLEN))
                            let ipString = String(cString: ip)
                            self.onResolved(ipString, sender.port)
                        }
                    }
                }
            }
        }

        let resolverQueue = DispatchQueue(label: "mdns.resolver.queue")
        var activeServices: [NetService] = []
        var activeResolvers: [ServiceResolver] = []
        var bridges: [Bridge] = []
        var hasFoundBridge = false

        browser.browseResultsChangedHandler = { [weak self] results, _ in
            guard let self = self, !hasFoundBridge else { return }
            
            for result in results {
                if case .service(let name, var type, var domain, _) = result.endpoint {
                    if !type.hasSuffix(".") { type += "." }
                    if domain.isEmpty { domain = "local." }
                    if !domain.hasSuffix(".") { domain += "." }

                    print("üéØ mDNS –Ω–∞–π–¥–µ–Ω —Å–µ—Ä–≤–∏—Å: \(name).\(type)\(domain)")

                    let service = NetService(domain: domain, type: type, name: name)
                    let resolver = ServiceResolver(onResolved: { ip, port in
                        guard !hasFoundBridge else { return }
                        print("üéØ mDNS —Ä–µ–∑–æ–ª–≤–∏—Ç IP: \(ip):\(port)")
                        
                        self.checkIPViaConfig(ip) { confirmed in
                            guard !hasFoundBridge else { return }
                            if let bridge = confirmed {
                                hasFoundBridge = true
                                bridges = [bridge]
                                print("‚úÖ mDNS —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–µ–ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –º–æ—Å—Ç: \(bridge.id) –Ω–∞ \(ip)")
                                
                                browser.cancel()
                                resolverQueue.async {
                                    activeServices.forEach { $0.stop() }
                                    activeServices.removeAll()
                                    activeResolvers.removeAll()
                                }
                                completeOnce(bridges)
                            }
                        }
                    }, onFailed: {
                        print("‚ùå mDNS –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å: \(name)")
                    })
                    service.delegate = resolver
                    resolverQueue.async {
                        activeServices.append(service)
                        activeResolvers.append(resolver)
                        DispatchQueue.main.async {
                            service.schedule(in: .main, forMode: .common)
                            service.resolve(withTimeout: 5.0) // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞
                        }
                    }
                }
            }
        }

        browser.stateUpdateHandler = { state in
            switch state {
            case .ready:
                print("üéØ mDNS browser –≥–æ—Ç–æ–≤")
            case .failed(let error):
                print("‚ùå mDNS –æ—à–∏–±–∫–∞: \(error)")
                completeOnce([])
            default:
                break
            }
        }

        browser.start(queue: .global())

        DispatchQueue.global().asyncAfter(deadline: .now() + 7.0) {
            browser.cancel()
            if !hasCompleted {
                resolverQueue.async { activeServices.forEach { $0.stop() } }
                completeOnce(bridges)
            }
        }
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueBridgeDiscovery+mDNS.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Hue Bridge —á–µ—Ä–µ–∑ mDNS/Bonjour –ø—Ä–æ—Ç–æ–∫–æ–ª.
 –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Network framework –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ _hue._tcp.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - attemptMDNSDiscovery - –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ mDNS –ø–æ–∏—Å–∫–∞
 - ServiceResolver - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞ NetService
 - –û–±—Ä–∞–±–æ—Ç–∫–∞ Bonjour —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤
 
 –ü—Ä–æ—Ç–æ–∫–æ–ª:
 - –ò—â–µ—Ç —Å–µ—Ä–≤–∏—Å—ã —Ç–∏–ø–∞ "_hue._tcp" –≤ –¥–æ–º–µ–Ω–µ "local"
 - –†–µ–∑–æ–ª–≤–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–æ–≤
 - –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ /api/0/config
 
 –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 - –¢—Ä–µ–±—É–µ—Ç iOS 14.0+ –¥–ª—è NWBrowser
 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º –º–æ—Å—Ç–µ
 - –¢–∞–π–º–∞—É—Ç 7 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - Network framework –¥–ª—è NWBrowser
 - Darwin –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sockaddr —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
 - HueBridgeDiscovery+Validation –¥–ª—è checkIPViaConfig
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueBridgeDiscovery.swift - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
 - HueBridgeDiscovery+Validation.swift - –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
