//
//  HueBridgeDiscovery+IPScan.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/15/25.
//

import Foundation

@available(iOS 12.0, *)
extension HueBridgeDiscovery {
    
    // MARK: - IP Scan Discovery
    
    internal func ipScanDiscovery(shouldStop: @escaping () -> Bool = { false }, completion: @escaping ([Bridge]) -> Void) {
        print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞...")
        
        var hasCompleted = false
        let ipScanLock = NSLock()
        
        func safeCompletion(_ bridges: [Bridge]) {
            ipScanLock.lock()
            defer { ipScanLock.unlock() }
            
            guard !hasCompleted && !shouldStop() else { 
                if shouldStop() {
                    print("üõë IP Scan: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–º shouldStop")
                }
                return 
            }
            hasCompleted = true
            completion(bridges)
        }
        
        var commonIPs = [
            "192.168.1.2", "192.168.1.3", "192.168.1.4", "192.168.1.5", "192.168.1.6", "192.168.1.7", "192.168.1.8", "192.168.1.10",
            "192.168.0.2", "192.168.0.3", "192.168.0.4", "192.168.0.5", "192.168.0.6", "192.168.0.7", "192.168.0.8", "192.168.0.10",
            "192.168.100.2", "192.168.100.3", "192.168.100.4", "192.168.100.5",
            "192.168.86.2", "192.168.86.3", "192.168.86.4", "192.168.86.5",
            "10.0.0.2", "10.0.0.3", "10.0.0.4", "10.0.0.5", "10.0.1.2", "10.0.1.3",
            "172.16.0.2", "172.16.0.3", "172.16.1.2", "172.16.1.3"
        ]
        
        if let deviceIP = SmartBridgeDiscovery.getCurrentDeviceIP() {
            let additionalIPs = generateSubnetIPs(from: deviceIP)
            commonIPs.append(contentsOf: additionalIPs)
            print("üåê –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ–¥—Å–µ—Ç—å: –¥–æ–±–∞–≤–ª–µ–Ω–æ \(additionalIPs.count) IP –∞–¥—Ä–µ—Å–æ–≤")
        }
        
        var foundBridges: [Bridge] = []
        var completedIPs = 0
        let totalIPs = commonIPs.count
        
        for ip in commonIPs {
            if !isDiscovering || shouldStop() {
                print("üõë –û—Å—Ç–∞–Ω–æ–≤ IP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ shouldStop)")
                safeCompletion(foundBridges)
                break
            }
            checkIPWithRetry(ip, maxAttempts: 2, shouldStop: shouldStop) { bridge in
                ipScanLock.lock()
                if let bridge = bridge {
                    let isUnique = !foundBridges.contains { $0.id == bridge.id }
                    if isUnique {
                        foundBridges.append(bridge)
                        print("‚úÖ –ù–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–æ—Å—Ç –Ω–∞ \(ip): \(bridge.id)")
                    } else {
                        print("üîÑ –ú–æ—Å—Ç –Ω–∞ \(ip) —É–∂–µ –Ω–∞–π–¥–µ–Ω: \(bridge.id)")
                    }
                } else {
                    print("‚ùå –ú–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ \(ip)")
                }
                
                completedIPs += 1
                
                if completedIPs >= totalIPs {
                    print("üèÅ IP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ—Å—Ç–æ–≤: \(foundBridges.count)")
                    ipScanLock.unlock()
                    safeCompletion(foundBridges)
                    return
                }
                ipScanLock.unlock()
            }
        }
        
        DispatchQueue.global().asyncAfter(deadline: .now() + 15.0) {
            safeCompletion(foundBridges)
        }
    }
    
    private func generateSubnetIPs(from deviceIP: String) -> [String] {
        let components = deviceIP.components(separatedBy: ".")
        guard components.count == 4,
              let subnet = Int(components[2]) else {
            return []
        }
        
        let baseIP = "\(components[0]).\(components[1]).\(subnet)"
        var ips: [String] = []
        
        for i in 2...20 {
            let ip = "\(baseIP).\(i)"
            if ip != deviceIP {
                ips.append(ip)
            }
        }
        
        return ips
    }
    
    private func checkIPWithRetry(_ ip: String, maxAttempts: Int = 2, shouldStop: @escaping () -> Bool = { false }, completion: @escaping (Bridge?) -> Void) {
        func attemptCheck(attempt: Int) {
            if !isDiscovering || shouldStop() {
                completion(nil)
                return
            }
            checkIP(ip, shouldStop: shouldStop) { bridge in
                if bridge != nil || attempt >= maxAttempts || shouldStop() {
                    completion(bridge)
                } else {
                    DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) {
                        attemptCheck(attempt: attempt + 1)
                    }
                }
            }
        }
        
        attemptCheck(attempt: 1)
    }
    
    internal func checkIP(_ ip: String, shouldStop: @escaping () -> Bool = { false }, completion: @escaping (Bridge?) -> Void) {
        guard !shouldStop() else {
            completion(nil)
            return
        }
        
        checkIPViaConfig(ip, shouldStop: shouldStop) { bridge in
            guard !shouldStop() else {
                completion(nil)
                return
            }
            
            if bridge != nil {
                completion(bridge)
            } else {
                self.checkIPViaXML(ip, shouldStop: shouldStop, completion: completion)
            }
        }
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueBridgeDiscovery+IPScan.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Hue Bridge –ø—É—Ç–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤.
 –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–≥–¥–∞ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - ipScanDiscovery - –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ IP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 - generateSubnetIPs - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–æ–≤ —Ç–µ–∫—É—â–µ–π –ø–æ–¥—Å–µ—Ç–∏
 - checkIPWithRetry - –ø—Ä–æ–≤–µ—Ä–∫–∞ IP —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 - checkIP - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
 
 –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
 - –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã IP (192.168.x.x, 10.0.x.x, 172.16.x.x)
 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥—Å–µ—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ IP –∞–¥—Ä–µ—Å–æ–≤
 - Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - SmartBridgeDiscovery –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 - HueBridgeDiscovery+Validation –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ checkIPViaConfig –∏ checkIPViaXML
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueBridgeDiscovery.swift - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
 - HueBridgeDiscovery+Validation.swift - –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
 */
