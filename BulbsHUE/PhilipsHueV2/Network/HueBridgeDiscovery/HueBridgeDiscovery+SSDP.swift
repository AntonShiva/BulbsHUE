//
//  HueBridgeDiscovery+SSDP.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/15/25.
//

import Foundation
import Network

@available(iOS 12.0, *)
extension HueBridgeDiscovery {
    
    // MARK: - SSDP Discovery
    
    internal func ssdpDiscovery(completion: @escaping ([Bridge]) -> Void) {
        print("üì° –ó–∞–ø—É—Å–∫–∞–µ–º SSDP discovery...")
        
        var foundBridges: [Bridge] = []
        var hasCompleted = false
        let ssdpLock = NSLock()
        
        func safeCompletion(_ bridges: [Bridge]) {
            ssdpLock.lock()
            defer { ssdpLock.unlock() }
            
            guard !hasCompleted else { return }
            hasCompleted = true
            completion(bridges)
        }
        
        let host = NWEndpoint.Host("239.255.255.250")
        let port = NWEndpoint.Port(1900)
        
        let parameters = NWParameters.udp
        
        udpConnection = NWConnection(
            host: host,
            port: port,
            using: parameters
        )
        
        let ssdpRequest = """
        M-SEARCH * HTTP/1.1\r
        HOST: 239.255.255.250:1900\r
        MAN: "ssdp:discover"\r
        MX: 3\r
        ST: urn:schemas-upnp-org:device:basic:1\r
        \r
        
        """.data(using: .utf8)!
        
        udpConnection?.stateUpdateHandler = { [weak self] state in
            switch state {
            case .ready:
                print("üì° SSDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
                
                self?.udpConnection?.send(content: ssdpRequest, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå SSDP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                    } else {
                        print("‚úÖ SSDP –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }
                })
                
                let rootDeviceRequest = """
                M-SEARCH * HTTP/1.1\r
                HOST: 239.255.255.250:1900\r
                MAN: "ssdp:discover"\r
                MX: 3\r
                ST: upnp:rootdevice\r
                \r
                
                """.data(using: .utf8)!
                
                self?.udpConnection?.send(content: rootDeviceRequest, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå SSDP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ rootdevice –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                    } else {
                        print("‚úÖ SSDP rootdevice –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }
                })
                
                let hueRequest = """
                M-SEARCH * HTTP/1.1\r
                HOST: 239.255.255.250:1900\r
                MAN: "ssdp:discover"\r
                MX: 3\r
                ST: urn:schemas-upnp-org:device:IpBridge:1\r
                \r
                
                """.data(using: .utf8)!
                
                self?.udpConnection?.send(content: hueRequest, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå SSDP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Hue –∑–∞–ø—Ä–æ—Å–∞: \(error)")
                    } else {
                        print("‚úÖ SSDP Hue-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    }
                })
                
                self?.receiveSSDP { bridges in
                    ssdpLock.lock()
                    foundBridges.append(contentsOf: bridges)
                    ssdpLock.unlock()
                }
                
            case .failed(let error):
                print("‚ùå SSDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: \(error)")
                if let nwError = error as? NWError {
                    switch nwError {
                    case .posix(let code):
                        print("üîç POSIX –æ—à–∏–±–∫–∞: \(code) (\(code.rawValue))")
                    case .dns(let dnsError):
                        print("üîç DNS –æ—à–∏–±–∫–∞: \(dnsError)")
                    case .tls(let tlsError):
                        print("üîç TLS –æ—à–∏–±–∫–∞: \(tlsError)")
                    default:
                        print("üîç –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: \(nwError)")
                    }
                }
                safeCompletion([])
                
            case .waiting(let error):
                print("‚è≥ SSDP –æ–∂–∏–¥–∞–Ω–∏–µ: \(error)")
                
            case .preparing:
                print("üîÑ SSDP –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                
            case .setup:
                print("‚öôÔ∏è SSDP –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
                
            case .cancelled:
                print("üö´ SSDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                safeCompletion([])
                
            @unknown default:
                print("‚ùì SSDP –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: \(state)")
                break
            }
        }
        
        udpConnection?.start(queue: .global())
        
        DispatchQueue.global().asyncAfter(deadline: .now() + 6.0) { [weak self] in
            print("üì° SSDP –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ: \(foundBridges.count) –º–æ—Å—Ç–æ–≤")
            self?.udpConnection?.cancel()
            safeCompletion(foundBridges)
        }
    }
    
    private func receiveSSDP(completion: @escaping ([Bridge]) -> Void) {
        var allBridges: [Bridge] = []
        
        func receiveNext() {
            udpConnection?.receiveMessage { data, context, isComplete, error in
                defer { receiveNext() }
                
                guard let data = data,
                      let response = String(data: data, encoding: .utf8) else {
                    return
                }
                
                if response.contains("IpBridge") || response.contains("hue") {
                    print("üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π Hue Bridge –≤ SSDP –æ—Ç–≤–µ—Ç–µ")
                    
                    if let locationURL = self.extractLocationURL(from: response) {
                        print("üìç LOCATION URL: \(locationURL)")
                        
                        self.validateHueBridge(locationURL: locationURL) { bridge in
                            if let bridge = bridge {
                                allBridges.append(bridge)
                                print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω Hue Bridge: \(bridge.id)")
                            }
                        }
                    }
                }
            }
        }
        
        receiveNext()
    }
    
    internal func extractLocationURL(from response: String) -> String? {
        let lines = response.components(separatedBy: .newlines)
        for line in lines {
            if line.lowercased().hasPrefix("location:") {
                return line.components(separatedBy: ": ").last?.trimmingCharacters(in: .whitespacesAndNewlines)
            }
        }
        return nil
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueBridgeDiscovery+SSDP.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Hue Bridge —á–µ—Ä–µ–∑ SSDP (Simple Service Discovery Protocol).
 –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UDP multicast –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è UPnP —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - ssdpDiscovery - –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ SSDP –ø–æ–∏—Å–∫–∞
 - receiveSSDP - –ø—Ä–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSDP –æ—Ç–≤–µ—Ç–æ–≤
 - extractLocationURL - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ SSDP –æ—Ç–≤–µ—Ç–∞
 
 –ü—Ä–æ—Ç–æ–∫–æ–ª:
 - Multicast –∞–¥—Ä–µ—Å: 239.255.255.250:1900
 - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç M-SEARCH –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP-–ø–æ–¥–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å LOCATION –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - Network framework –¥–ª—è UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 - HueBridgeDiscovery+Validation –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueBridgeDiscovery.swift - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
 - HueBridgeDiscovery+Validation.swift - –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
