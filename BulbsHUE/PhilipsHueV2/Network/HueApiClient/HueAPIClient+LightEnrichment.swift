//
//  HueAPIClient+LightEnrichment.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - Light Enrichment with Reachable Status
    
    /// –û–±–æ–≥–∞—â–∞–µ—Ç –ª–∞–º–ø—ã v2 –¥–∞–Ω–Ω—ã–º–∏ –æ reachable —Å—Ç–∞—Ç—É—Å–µ –∏–∑ API v1
    internal func enrichLightsWithReachableStatus(_ v2Lights: [Light]) -> AnyPublisher<[Light], Error> {
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ª–∞–º–ø —Å—Ç–∞—Ç—É—Å–æ–º reachable...")
        
        // –ü–æ–ª—É—á–∞–µ–º reachable —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API v1
        return getLightsV1WithReachableStatus()
            .map { v1Lights in
                var enrichedLights = v2Lights
                
                print("üìä API v1: –ø–æ–ª—É—á–µ–Ω–æ \(v1Lights.count) –ª–∞–º–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
                
                for i in 0..<enrichedLights.count {
                    let v2Light = enrichedLights[i]
                    
                    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–∞–º–ø—É –≤ v1 –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                    let matchingV1Light = self.findMatchingV1Light(v2Light: v2Light, v1Lights: v1Lights)
                    
                    if let v1Light = matchingV1Light, let reachable = v1Light.state?.reachable {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ reachable –ø–æ–ª—è
                        let newStatus: CommunicationStatus = reachable ? .online : .offline
                        enrichedLights[i].communicationStatus = newStatus
                        print("üîó –õ–∞–º–ø–∞ '\(v2Light.metadata.name)': reachable=\(reachable) ‚Üí —Å—Ç–∞—Ç—É—Å=\(newStatus)")
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ v1, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        enrichedLights[i].communicationStatus = .unknown
                        print("‚ùì –õ–∞–º–ø–∞ '\(v2Light.metadata.name)': —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API v1)")
                    }
                }
                
                let onlineCount = enrichedLights.filter { $0.communicationStatus == .online }.count
                let offlineCount = enrichedLights.filter { $0.communicationStatus == .offline }.count
                let unknownCount = enrichedLights.filter { $0.communicationStatus == .unknown }.count
                
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: online=\(onlineCount), offline=\(offlineCount), unknown=\(unknownCount)")
                
                return enrichedLights
            }
            .catch { error in
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å reachable —Å—Ç–∞—Ç—É—Å –∏–∑ v1: \(error)")
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∞–º–ø—ã v2 —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                var lightsWithUnknownStatus = v2Lights
                for i in 0..<lightsWithUnknownStatus.count {
                    lightsWithUnknownStatus[i].communicationStatus = .unknown
                    print("‚ùì –õ–∞–º–ø–∞ '\(v2Lights[i].metadata.name)': —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ unknown –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API v1")
                }
                return Just(lightsWithUnknownStatus)
                    .setFailureType(to: Error.self)
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø –∏–∑ API v1 —Å reachable –ø–æ–ª–µ–º
    func getLightsV1WithReachableStatus() -> AnyPublisher<[String: LightV1WithReachable], Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.timeoutInterval = 10.0
        
        print("üì° –ó–∞–ø—Ä–æ—Å reachable —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API v1...")
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .tryMap { data, response in
                if let httpResponse = response as? HTTPURLResponse {
                    if httpResponse.statusCode == 404 {
                        throw HueAPIError.bridgeNotFound
                    } else if httpResponse.statusCode >= 400 {
                        throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                    }
                }
                
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ v1 lights response: \(responseString.prefix(200))...")
                }
                
                return data
            }
            .decode(type: [String: LightV1WithReachable].self, decoder: JSONDecoder())
            .mapError { error in
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è v1 lights: \(error)")
                return HueAPIError.networkError(error)
            }
            .eraseToAnyPublisher()
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–∞–º–ø—É v1 –¥–ª—è –ª–∞–º–ø—ã v2
    func findMatchingV1Light(v2Light: Light, v1Lights: [String: LightV1WithReachable]) -> LightV1WithReachable? {
        // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        for (_, v1Light) in v1Lights {
            if let v1Name = v1Light.name, v1Name == v2Light.metadata.name {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∏–º–µ–Ω–∏: \(v1Name)")
                return v1Light
            }
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–∞–º ID
        let v2IdSuffix = String(v2Light.id.suffix(6)).uppercased()
        for (v1Id, v1Light) in v1Lights {
            if v1Id.uppercased().contains(v2IdSuffix) {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ ID suffix: \(v1Id)")
                return v1Light
            }
        }
        
        // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ uniqueid (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if let uniqueid = findUniqueIdFromV2Light(v2Light) {
            for (_, v1Light) in v1Lights {
                if let v1Uniqueid = v1Light.uniqueid, v1Uniqueid.contains(uniqueid) {
                    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ uniqueid: \(uniqueid)")
                    return v1Light
                }
            }
        }
        
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ª–∞–º–ø—ã: \(v2Light.metadata.name)")
        return nil
    }
    
    /// –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å uniqueid –∏–∑ –¥–∞–Ω–Ω—ã—Ö v2 –ª–∞–º–ø—ã
    internal func findUniqueIdFromV2Light(_ light: Light) -> String? {
        // –í API v2 uniqueid –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø—Ä—è—Ç–∞–Ω –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        // –û–±—ã—á–Ω–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å ID –ª–∞–º–ø—ã
        let lightId = light.id
        
        // –ò—â–µ–º —á–∞—Å—Ç–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ MAC –∞–¥—Ä–µ—Å
        let components = lightId.components(separatedBy: "-")
        for component in components {
            if component.count >= 6 && component.range(of: "^[0-9A-Fa-f]+$", options: .regularExpression) != nil {
                return component.uppercased()
            }
        }
        
        return nil
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø —á–µ—Ä–µ–∑ API v1 (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞)
    /// - Returns: Publisher —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∞–º–ø–∞—Ö v1
    func getLightsV1() -> AnyPublisher<[String: LightV1Data], Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        
        print("üì§ HTTP GET –∑–∞–ø—Ä–æ—Å v1: \(url)")
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .tryMap { data, response in
                if let httpResponse = response as? HTTPURLResponse {
                    print("üì• HTTP \(httpResponse.statusCode) –æ—Ç–≤–µ—Ç –æ—Ç \(url)")
                    
                    if httpResponse.statusCode == 404 {
                        throw HueAPIError.bridgeNotFound
                    } else if httpResponse.statusCode >= 400 {
                        throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                    }
                }
                
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ HTTPS —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ v1: \(responseString.prefix(500))...")
                }
                
                return data
            }
            .decode(type: [String: LightV1Data].self, decoder: JSONDecoder())
            .mapError { error in
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–º–ø v1: \(error)")
                return HueAPIError.networkError(error)
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è API v1 —Å reachable –ø–æ–ª–µ–º

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∞–º–ø—ã –∏–∑ API v1 —Å –ø–æ–ª–µ–º reachable
struct LightV1WithReachable: Codable {
    let name: String?
    let uniqueid: String?
    let state: LightV1StateWithReachable?
    let type: String?
    let modelid: String?
    let manufacturername: String?
    let swversion: String?
}

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –∏–∑ API v1 —Å reachable –ø–æ–ª–µ–º
struct LightV1StateWithReachable: Codable {
    let on: Bool?
    let bri: Int?
    let hue: Int?
    let sat: Int?
    let reachable: Bool?  // –ö–õ–Æ–ß–ï–í–û–ï –ü–û–õ–ï –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    let alert: String?
    let effect: String?
    let colormode: String?
    let ct: Int?
    let xy: [Double]?
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueAPIClient+LightEnrichment.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HueAPIClient –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∞–º–ø —Å—Ç–∞—Ç—É—Å–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.
 –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API v2 –∏ v1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - enrichLightsWithReachableStatus - –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º reachable
 - getLightsV1WithReachableStatus - –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–º–ø v1 —Å reachable
 - findMatchingV1Light - –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É v1 –∏ v2
 - findUniqueIdFromV2Light - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ uniqueid –∏–∑ v2
 - getLightsV1 - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö v1
 
 –ú–æ–¥–µ–ª–∏:
 - LightV1WithReachable - –ª–∞–º–ø–∞ v1 —Å –ø–æ–ª–µ–º reachable
 - LightV1StateWithReachable - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å reachable
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueAPIClient+Lights.swift - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–∞–º–ø
 - HueAPIClient+Models.swift - –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
 */
