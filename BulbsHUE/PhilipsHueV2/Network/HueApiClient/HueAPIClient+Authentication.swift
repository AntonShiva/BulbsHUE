//
//  HueAPIClient+Authentication.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - Authentication
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (application key) –Ω–∞ –º–æ—Å—Ç—É
    /// –¢—Ä–µ–±—É–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Link –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    /// - Parameters:
    ///   - appName: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    ///   - deviceName: –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    /// - Returns: Combine Publisher —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    func createUser(appName: String, deviceName: String) -> AnyPublisher<AuthenticationResponse, Error> {
        guard let url = baseURL?.appendingPathComponent("/api") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let body = [
            "devicetype": "\(appName)#\(deviceName)",
            "generateclientkey": true
        ] as [String : Any]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: error)
                .eraseToAnyPublisher()
        }
        
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response in
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if let httpResponse = response as? HTTPURLResponse {
                    print("HTTP Status: \(httpResponse.statusCode)")
                    
                    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Link Button –º–æ—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 200, –Ω–æ —Å –æ—à–∏–±–∫–æ–π –≤ —Ç–µ–ª–µ
                    if httpResponse.statusCode == 200 {
                        return data
                    } else if httpResponse.statusCode == 403 {
                        throw HueAPIError.linkButtonNotPressed
                    }
                }
                throw HueAPIError.invalidResponse
            }
            .decode(type: [AuthenticationResponse].self, decoder: JSONDecoder())
            .compactMap { responses in
                // Philips Hue –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                responses.first
            }
            .eraseToAnyPublisher()
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    func createUserWithLocalNetworkCheck(appName: String, deviceName: String) -> AnyPublisher<AuthenticationResponse, Error> {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –≤–º–µ—Å—Ç–æ HTTPS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        guard let url = URL(string: "http://\(bridgeIP)/api") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.timeoutInterval = 5.0 // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        
        let body = [
            "devicetype": "\(appName)#\(deviceName)",
            "generateclientkey": true
        ] as [String : Any]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: error)
                .eraseToAnyPublisher()
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º URLSession.shared –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return URLSession.shared.dataTaskPublisher(for: request)
            .tryMap { data, response in
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if let httpResponse = response as? HTTPURLResponse {
                    print("üåê HTTP Status: \(httpResponse.statusCode)")
                    
                    if let responseString = String(data: data, encoding: .utf8) {
                        print("üì¶ Response: \(responseString)")
                    }
                }
                
                return data
            }
            .decode(type: [AuthenticationResponse].self, decoder: JSONDecoder())
            .tryMap { responses in
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if let response = responses.first {
                    if let error = response.error {
                        print("‚ùå Hue API Error: \(error.description ?? "Unknown")")
                        
                        // –ö–æ–¥ 101 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–Ω–æ–ø–∫–∞ Link –Ω–µ –Ω–∞–∂–∞—Ç–∞
                        if error.type == 101 {
                            throw HueAPIError.linkButtonNotPressed
                        } else {
                            throw HueAPIError.httpError(statusCode: error.type ?? 0)
                        }
                    } else if response.success != nil {
                        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
                        return response
                    }
                }
                
                throw HueAPIError.invalidResponse
            }
            .eraseToAnyPublisher()
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (application key) –Ω–∞ –º–æ—Å—Ç—É - –≤–µ—Ä—Å–∏—è API v2
    /// –í API v2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è endpoint /api —Å –º–µ—Ç–æ–¥–æ–º POST
    func createUserV2(appName: String, deviceName: String) -> AnyPublisher<AuthenticationResponse, Error> {
        guard let url = baseURL?.appendingPathComponent("/api") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –í API v2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        let body: [String: Any] = [
            "devicetype": "\(appName)#\(deviceName)",
            "generateclientkey": true  // –î–ª—è Entertainment API
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: error)
                .eraseToAnyPublisher()
        }
        
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response in
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if let httpResponse = response as? HTTPURLResponse {
                    if httpResponse.statusCode == 200 {
                        return data
                    } else if httpResponse.statusCode == 101 {
                        // Link button not pressed
                        throw HueAPIError.linkButtonNotPressed
                    }
                }
                throw HueAPIError.invalidResponse
            }
            .decode(type: [AuthenticationResponse].self, decoder: JSONDecoder())
            .compactMap { $0.first }
            .eraseToAnyPublisher()
    }
    
    // MARK: - Bridge Discovery
    
    /// –ü–æ–∏—Å–∫ Hue Bridge —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å Philips
    /// - Returns: Combine Publisher —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
    func discoverBridgesViaCloud() -> AnyPublisher<[Bridge], Error> {
        guard let url = URL(string: "https://discovery.meethue.com") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º shared session –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return URLSession.shared.dataTaskPublisher(for: url)
            .map(\.data)
            .decode(type: [Bridge].self, decoder: JSONDecoder())
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–∏—Å–∫ Hue Bridge —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SSDP discovery
    /// - Returns: Combine Publisher —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
    func discoverBridges() -> AnyPublisher<[Bridge], Error> {
        return Future<[Bridge], Error> { promise in
            if #available(iOS 12.0, *) {
                let discovery = HueBridgeDiscovery()
                discovery.discoverBridges { bridges in
                    if bridges.isEmpty {
                        promise(.failure(HueAPIError.bridgeNotFound))
                    } else {
                        promise(.success(bridges))
                    }
                }
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π iOS
                promise(.failure(HueAPIError.bridgeNotFound))
            }
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Configuration & Capabilities
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ—Å—Ç–∞
    /// - Returns: Combine Publisher —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    func getBridgeConfig() -> AnyPublisher<BridgeConfig, Error> {
        let endpoint = "/api/0/config"
        return performRequest(endpoint: endpoint, method: "GET", authenticated: false)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ—Å—Ç–∞ (–ª–∏–º–∏—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤)
    /// - Returns: Combine Publisher —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
    func getBridgeCapabilities() -> AnyPublisher<BridgeCapabilities, Error> {
        guard applicationKey != nil else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        let endpoint = "/api/\(applicationKey!)/capabilities"
        return performRequest(endpoint: endpoint, method: "GET", authenticated: false)
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueAPIClient+Authentication.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HueAPIClient —Å –º–µ—Ç–æ–¥–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—Å—Ç–æ–≤.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - createUser - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 - createUserWithLocalNetworkCheck - —Å–æ–∑–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
 - createUserV2 - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API v2
 - discoverBridgesViaCloud - –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –æ–±–ª–∞–∫–æ
 - discoverBridges - –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤
 - getBridgeConfig - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 - getBridgeCapabilities - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ—Å—Ç–∞
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - AuthenticationResponse, Bridge, BridgeConfig, BridgeCapabilities –º–æ–¥–µ–ª–∏
 - HueBridgeDiscovery –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueAPIClient.swift - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - HueAPIClient+Networking.swift - —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
 */
