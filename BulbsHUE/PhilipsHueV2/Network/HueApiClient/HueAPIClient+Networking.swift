//
//  HueAPIClient+Networking.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - Network Request Methods
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API
    /// - Parameters:
    ///   - endpoint: –ü—É—Ç—å –∫ endpoint'—É
    ///   - method: HTTP –º–µ—Ç–æ–¥
    ///   - body: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ///   - authenticated: –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
    /// - Returns: Combine Publisher —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    internal func performRequest<T: Decodable>(
        endpoint: String,
        method: String,
        body: Data? = nil,
        authenticated: Bool = true
    ) -> AnyPublisher<T, Error> {
        if authenticated {
            guard let applicationKey = applicationKey else {
                print("‚ùå –ù–µ—Ç application key –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                return Fail(error: HueAPIError.notAuthenticated)
                    .eraseToAnyPublisher()
            }
        }
        
        guard let url = baseURL?.appendingPathComponent(endpoint) else {
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å URL: baseURL=\(baseURL?.absoluteString ?? "nil"), endpoint=\(endpoint)")
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        print("üì§ HTTP \(method) –∑–∞–ø—Ä–æ—Å: \(url.absoluteString)")
        
        var request = URLRequest(url: url)
        request.httpMethod = method
        
        if authenticated, let applicationKey = applicationKey {
            request.setValue(applicationKey, forHTTPHeaderField: "hue-application-key")
            print("üîë –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ hue-application-key: \(String(applicationKey.prefix(8)))...")
        }
        
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        if let body = body {
            request.httpBody = body
            print("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: \(String(data: body, encoding: .utf8) ?? "–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")")
        }
        
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response in
                guard let httpResponse = response as? HTTPURLResponse else {
                    print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTTP –æ—Ç–≤–µ—Ç–æ–º")
                    throw HueAPIError.invalidResponse
                }
                
                print("üì• HTTP \(httpResponse.statusCode) –æ—Ç–≤–µ—Ç –æ—Ç \(url.absoluteString)")
                
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: \(responseString)")
                } else {
                    print("üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–µ–∫–æ–¥–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ (\(data.count) –±–∞–π—Ç)")
                }
                
                guard 200...299 ~= httpResponse.statusCode else {
                    print("‚ùå HTTP –æ—à–∏–±–∫–∞ \(httpResponse.statusCode)")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                    if httpResponse.statusCode == 403 {
                        print("üö´ 403 Forbidden - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É link –Ω–∞ –º–æ—Å—Ç—É")
                        throw HueAPIError.linkButtonNotPressed
                    } else if httpResponse.statusCode == 503 {
                        print("‚ö†Ô∏è 503 Service Unavailable - –±—É—Ñ–µ—Ä –º–æ—Å—Ça –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")
                        throw HueAPIError.bufferFull
                    } else if httpResponse.statusCode == 429 {
                        print("‚è± 429 Too Many Requests - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        throw HueAPIError.rateLimitExceeded
                    } else if httpResponse.statusCode == 404 {
                        print("üîç 404 Not Found - endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É API v2 –Ω–∞ –º–æ—Å—Ç—É")
                    } else if httpResponse.statusCode == 401 {
                        print("üîê 401 Unauthorized - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
                        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ application key")
                    }
                    
                    throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                }
                
                print("‚úÖ HTTP –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
                return data
            }
            .decode(type: T.self, decoder: JSONDecoder())
            .catch { error in
                if error is DecodingError {
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error)")
                    if let decodingError = error as? DecodingError {
                        switch decodingError {
                        case .dataCorrupted(let context):
                            print("   –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã: \(context.debugDescription)")
                        case .keyNotFound(let key, let context):
                            print("   –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: \(key.stringValue) –≤ \(context.debugDescription)")
                        case .typeMismatch(let type, let context):
                            print("   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: –æ–∂–∏–¥–∞–ª—Å—è \(type), –∫–æ–Ω—Ç–µ–∫—Å—Ç: \(context.debugDescription)")
                        case .valueNotFound(let type, let context):
                            print("   –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: \(type), –∫–æ–Ω—Ç–µ–∫—Å—Ç: \(context.debugDescription)")
                        @unknown default:
                            print("   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
                        }
                    }
                }
                return Fail<T, Error>(error: error).eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è performRequest –¥–ª—è API v2 (HTTPS)
    internal func performRequestHTTPS<T: Decodable>(
        endpoint: String,
        method: String,
        body: Data? = nil,
        authenticated: Bool = true
    ) -> AnyPublisher<T, Error> {
        
        guard authenticated else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let applicationKey = applicationKey else {
            print("‚ùå –ù–µ—Ç application key –¥–ª—è HTTPS –∑–∞–ø—Ä–æ—Å–∞")
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = baseURLHTTPS?.appendingPathComponent(endpoint) else {
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å HTTPS URL: endpoint=\(endpoint)")
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        print("üì§ HTTPS \(method) –∑–∞–ø—Ä–æ—Å: \(url.absoluteString)")
        
        var request = URLRequest(url: url)
        request.httpMethod = method
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: API v2 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç hue-application-key header
        request.setValue(applicationKey, forHTTPHeaderField: "hue-application-key")
        print("üîë –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω hue-application-key: \(String(applicationKey.prefix(8)))...")
        
        if let body = body {
            request.httpBody = body
            if let bodyString = String(data: body, encoding: .utf8) {
                print("üì¶ HTTPS —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: \(bodyString)")
            }
        }
        
        return sessionHTTPS.dataTaskPublisher(for: request)
            .tryMap { data, response in
                guard let httpResponse = response as? HTTPURLResponse else {
                    print("‚ùå HTTPS –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTTP –æ—Ç–≤–µ—Ç–æ–º")
                    throw HueAPIError.invalidResponse
                }
                
                print("üì• HTTPS \(httpResponse.statusCode) –æ—Ç–≤–µ—Ç –æ—Ç \(url.absoluteString)")
                
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ HTTPS —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: \(responseString)")
                }
                
                guard 200...299 ~= httpResponse.statusCode else {
                    print("‚ùå HTTPS –æ—à–∏–±–∫–∞ \(httpResponse.statusCode)")
                    
                    switch httpResponse.statusCode {
                    case 401:
                        print("üîê 401 Unauthorized - –ø—Ä–æ–±–ª–µ–º–∞ —Å application key")
                        throw HueAPIError.notAuthenticated
                    case 403:
                        print("üö´ 403 Forbidden - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                        throw HueAPIError.linkButtonNotPressed
                    case 404:
                        print("üîç 404 Not Found - –Ω–µ–≤–µ—Ä–Ω—ã–π endpoint API v2")
                        throw HueAPIError.invalidURL
                    case 503:
                        print("‚ö†Ô∏è 503 Service Unavailable - –º–æ—Å—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
                        throw HueAPIError.bufferFull
                    case 429:
                        print("‚è± 429 Too Many Requests - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç")
                        throw HueAPIError.rateLimitExceeded
                    default:
                        break
                    }
                    
                    throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                }
                
                print("‚úÖ HTTPS –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
                return data
            }
            .decode(type: T.self, decoder: JSONDecoder())
            .eraseToAnyPublisher()
    }
    
    // MARK: - Communication Status Management
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∏ –≤ –æ—Ç–≤–µ—Ç–µ API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–∞–º–ø—ã
    internal func checkCommunicationErrors(lightId: String, response: GenericResponse) {
        guard let errors = response.errors, !errors.isEmpty else {
            // –ù–µ—Ç –æ—à–∏–±–æ–∫ - –ª–∞–º–ø–∞ –≤ —Å–µ—Ç–∏
            updateLightCommunicationStatus(lightId: lightId, status: .online)
            return
        }
        
        for error in errors {
            if let description = error.description {
                print("[HueAPIClient] –û—à–∏–±–∫–∞ –¥–ª—è –ª–∞–º–ø—ã \(lightId): \(description)")
                
                if description.contains("communication issues") ||
                   description.contains("command may not have effect") ||
                   description.contains("device unreachable") ||
                   description.contains("unreachable") {
                    updateLightCommunicationStatus(lightId: lightId, status: .issues)
                    return
                }
            }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–≤—è–∑—å—é
        updateLightCommunicationStatus(lightId: lightId, status: .online)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –ª–∞–º–ø—ã –≤ LightsViewModel (–≤ –ø–∞–º—è—Ç–∏)
    internal func updateLightCommunicationStatus(lightId: String, status: CommunicationStatus) {
        DispatchQueue.main.async { [weak self] in
            print("[HueAPIClient] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –ª–∞–º–ø—ã \(lightId): \(status)")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ LightsViewModel –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
            if let lightsViewModel = self?.lightsViewModel {
                lightsViewModel.updateLightCommunicationStatus(lightId: lightId, status: status)
                print("[HueAPIClient] ‚úÖ –°—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ LightsViewModel")
            } else {
                print("[HueAPIClient] ‚ö†Ô∏è LightsViewModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            }
        }
    }
    
    // MARK: - Batch Operations
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç batch –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    func batchUpdate(updates: [BatchUpdate]) -> AnyPublisher<BatchResponse, Error> {
        let endpoint = "/clip/v2/resource"
        
        let body = BatchRequest(data: updates)
        
        do {
            let encoder = JSONEncoder()
            let data = try encoder.encode(body)
            
            return performRequestHTTPS<BatchResponse>(endpoint: endpoint, method: "PUT", body: data)
        } catch {
            return Fail(error: error)
                .eraseToAnyPublisher()
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å
    func deleteResource<T: Decodable>(type: String, id: String) -> AnyPublisher<T, Error> {
        let endpoint = "/clip/v2/resource/\(type)/\(id)"
        return performRequestHTTPS<T>(endpoint: endpoint, method: "DELETE")
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueAPIClient+Networking.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HueAPIClient —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è HTTP/HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º —Å–≤—è–∑–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - performRequest - –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
 - performRequestHTTPS - –º–µ—Ç–æ–¥ –¥–ª—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ API v2
 - checkCommunicationErrors - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ —Å–≤—è–∑–∏
 - updateLightCommunicationStatus - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–≤—è–∑–∏
 - batchUpdate - batch –æ–ø–µ—Ä–∞—Ü–∏–∏
 - deleteResource - —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - GenericResponse, BatchUpdate, BatchResponse –º–æ–¥–µ–ª–∏
 - HueAPIError –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueAPIClient.swift - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - HueAPIClient+Models.swift - –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
 */
