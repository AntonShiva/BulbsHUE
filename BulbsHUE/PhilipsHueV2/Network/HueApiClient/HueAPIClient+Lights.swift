//
//  HueAPIClient+Lights.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - Lights Endpoints
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø –≤ —Å–∏—Å—Ç–µ–º–µ
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô getAllLights - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ API v2 —á–µ—Ä–µ–∑ HTTPS
    /// - Returns: Combine Publisher —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–∞–º–ø
    func getAllLights() -> AnyPublisher<[Light], Error> {
        print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º API v2 —á–µ—Ä–µ–∑ HTTPS...")
        return getAllLightsV2HTTPS()
    }
    
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è getAllLights –¥–ª—è API v2 —á–µ—Ä–µ–∑ HTTPS
    func getAllLightsV2HTTPS() -> AnyPublisher<[Light], Error> {
        print("üöÄ –ó–∞–ø—Ä–æ—Å –ª–∞–º–ø —á–µ—Ä–µ–∑ API v2 HTTPS...")
        
        let endpoint = "/clip/v2/resource/light"
        
        return performRequestHTTPS<LightsResponse>(endpoint: endpoint, method: "GET")
            .flatMap { (response: LightsResponse) -> AnyPublisher<[Light], Error> in
                print("‚úÖ API v2 HTTPS: –ø–æ–ª—É—á–µ–Ω–æ \(response.data.count) –ª–∞–º–ø")
                
                // –ü–æ–ª—É—á–∞–µ–º reachable —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API v1 –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ v2
                return self.enrichLightsWithReachableStatus(response.data)
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø–µ
    /// - Parameter id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∞–º–ø—ã
    /// - Returns: Combine Publisher —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∞–º–ø–µ
    func getLight(id: String) -> AnyPublisher<Light, Error> {
        let endpoint = "/clip/v2/resource/light/\(id)"
        return performRequestHTTPS<LightResponse>(endpoint: endpoint, method: "GET")
            .map { (response: LightResponse) in
                response.data.first ?? Light()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô updateLight - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ API v2 —á–µ—Ä–µ–∑ HTTPS
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∞–º–ø—ã
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã
    /// - Returns: Combine Publisher —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    func updateLight(id: String, state: LightState) -> AnyPublisher<Bool, Error> {
        print("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø–æ–π —á–µ—Ä–µ–∑ API v2 HTTPS...")
        return updateLightV2HTTPS(id: id, state: state)
    }
    
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è updateLight –¥–ª—è API v2 —á–µ—Ä–µ–∑ HTTPS
    func updateLightV2HTTPS(id: String, state: LightState) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error> { [weak self] promise in
            self?.throttleQueue.async {
                guard let self = self else {
                    promise(.failure(HueAPIError.invalidResponse))
                    return
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
                let now = Date()
                let timeSinceLastRequest = now.timeIntervalSince(self.lastLightRequestTime)
                
                if timeSinceLastRequest < self.lightRequestInterval {
                    let delay = self.lightRequestInterval - timeSinceLastRequest
                    Thread.sleep(forTimeInterval: delay)
                }
                
                self.lastLightRequestTime = Date()
                
                let endpoint = "/clip/v2/resource/light/\(id)"
                
                do {
                    let encoder = JSONEncoder()
                    let data = try encoder.encode(state)
                    
                    print("üîß API v2 HTTPS –∫–æ–º–∞–Ω–¥–∞: PUT \(endpoint)")
                    
                    self.performRequestHTTPS<GenericResponse>(endpoint: endpoint, method: "PUT", body: data)
                        .sink(
                            receiveCompletion: { (completion: Subscribers.Completion<Error>) in
                                if case .failure(let error) = completion {
                                    print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞–º–ø—ã API v2: \(error)")
                                    // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ —Å—á–∏—Ç–∞–µ–º –ª–∞–º–ø—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π
                                    self.updateLightCommunicationStatus(lightId: id, status: .issues)
                                    promise(.success(false))
                                } else {
                                    print("‚úÖ –õ–∞–º–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API v2 HTTPS")
                                    promise(.success(true))
                                }
                            },
                            receiveValue: { (response: GenericResponse) in
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∏ –≤ –æ—Ç–≤–µ—Ç–µ
                                self.checkCommunicationErrors(lightId: id, response: response)
                                promise(.success(true))
                            }
                        )
                        .store(in: &self.cancellables)
                } catch {
                    promise(.failure(error))
                }
            }
        }
        .eraseToAnyPublisher()
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã (–∏–º—è, –∞—Ä—Ö–µ—Ç–∏–ø –∏ —Ç.–¥.) —á–µ—Ä–µ–∑ Hue API v2
    /// - Parameters:
    ///   - id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∞–º–ø—ã
    ///   - metadata: –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã
    /// - Returns: Combine Publisher —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    func updateLightMetadata(id: String, metadata: LightMetadata) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error> { [weak self] promise in
            self?.throttleQueue.async {
                guard let self = self else {
                    promise(.failure(HueAPIError.invalidResponse))
                    return
                }
                
                let endpoint = "/clip/v2/resource/light/\(id)"
                
                // –°–æ–∑–¥–∞–µ–º JSON —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç API
                let metadataUpdate: [String: Any] = [
                    "metadata": [
                        "name": metadata.name
                        // –ê—Ä—Ö–µ—Ç–∏–ø –æ–±—ã—á–Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ API
                    ]
                ]
                
                do {
                    let jsonData = try JSONSerialization.data(withJSONObject: metadataUpdate)
                    
                    print("üîß API v2 HTTPS –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: PUT \(endpoint)")
                    print("üìù –ù–æ–≤–æ–µ –∏–º—è –ª–∞–º–ø—ã: \(metadata.name)")
                    
                    self.performRequestHTTPS<GenericResponse>(endpoint: endpoint, method: "PUT", body: jsonData)
                        .sink(
                            receiveCompletion: { (completion: Subscribers.Completion<Error>) in
                                if case .failure(let error) = completion {
                                    print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ª–∞–º–ø—ã: \(error)")
                                    promise(.success(false))
                                } else {
                                    print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API v2")
                                    promise(.success(true))
                                }
                            },
                            receiveValue: { (response: GenericResponse) in
                                promise(.success(true))
                            }
                        )
                        .store(in: &self.cancellables)
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: \(error)")
                    promise(.failure(error))
                }
            }
        }
        .eraseToAnyPublisher()
    }
    
    /// –ú–∏–≥–∞–µ—Ç –ª–∞–º–ø–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –ª–∞–º–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Å–µ—Ç—å)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ 1-2 –≤—Å–ø—ã—à–µ–∫
    /// - Parameter id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∞–º–ø—ã
    /// - Returns: Combine Publisher —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    func blinkLight(id: String) -> AnyPublisher<Bool, Error> {
        print("üí° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –º–∏–≥–∞–Ω–∏—è –¥–ª—è –ª–∞–º–ø—ã \(id)...")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã
        return getLight(id: id)
            .flatMap { [weak self] currentLight -> AnyPublisher<Bool, Error> in
                guard let self = self else {
                    return Just(false).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
                
                let originalBrightness = currentLight.dimming?.brightness ?? 100.0
                let isOn = currentLight.on.on
                
                print("üí° –ò—Å—Ö–æ–¥–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å: \(originalBrightness), –≤–∫–ª—é—á–µ–Ω–∞: \(isOn)")
                
                // –ï—Å–ª–∏ –ª–∞–º–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –≤–∫–ª—é—á–∞–µ–º –µ—ë –∏ –≤—ã–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                if !isOn {
                    return self.performOffLightBlink(id: id)
                } else {
                    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞, –º–µ–Ω—è–µ–º —è—Ä–∫–æ—Å—Ç—å
                    return self.performBrightnessBlink(id: id, originalBrightness: originalBrightness)
                }
            }
            .eraseToAnyPublisher()
    }
    
    /// –ú–∏–≥–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∞–º–ø—ã (–≤–∫–ª—é—á–∏—Ç—å-–≤—ã–∫–ª—é—á–∏—Ç—å)
    internal func performOffLightBlink(id: String) -> AnyPublisher<Bool, Error> {
        // –ë—ã—Å—Ç—Ä–æ –≤–∫–ª—é—á–∞–µ–º
        let turnOnState = LightState(on: OnState(on: true))
        
        return updateLightV2HTTPS(id: id, state: turnOnState)
            .delay(for: .milliseconds(400), scheduler: DispatchQueue.main)
            .flatMap { [weak self] _ -> AnyPublisher<Bool, Error> in
                guard let self = self else {
                    return Just(false).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
                // –ë—ã—Å—Ç—Ä–æ –≤—ã–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                let turnOffState = LightState(on: OnState(on: false))
                return self.updateLightV2HTTPS(id: id, state: turnOffState)
            }
            .handleEvents(
                receiveOutput: { success in
                    if success {
                        print("‚úÖ –ú–∏–≥–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∞–º–ø—ã \(id) –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    }
                }
            )
            .eraseToAnyPublisher()
    }
    
    /// –ú–∏–≥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∞–º–ø—ã (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏)
    internal func performBrightnessBlink(id: String, originalBrightness: Double) -> AnyPublisher<Bool, Error> {
        // –ë—ã—Å—Ç—Ä–æ —É–º–µ–Ω—å—à–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –¥–æ –º–∏–Ω–∏–º—É–º–∞
        let dimState = LightState(
            dimming: Dimming(brightness: 1.0),
            dynamics: Dynamics(duration: 100) // –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        )
        
        return updateLightV2HTTPS(id: id, state: dimState)
            .delay(for: .milliseconds(300), scheduler: DispatchQueue.main)
            .flatMap { [weak self] _ -> AnyPublisher<Bool, Error> in
                guard let self = self else {
                    return Just(false).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —è—Ä–∫–æ—Å—Ç—å
                let restoreState = LightState(
                    dimming: Dimming(brightness: originalBrightness),
                    dynamics: Dynamics(duration: 100) // –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                )
                return self.updateLightV2HTTPS(id: id, state: restoreState)
            }
            .handleEvents(
                receiveOutput: { success in
                    if success {
                        print("‚úÖ –ú–∏–≥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∞–º–ø—ã \(id) –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    }
                }
            )
            .eraseToAnyPublisher()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–∏–≥–Ω—É–ª–∞ –ª–∏ –ª–∞–º–ø–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞)
    internal func checkLightBlink(lightId: String) -> AnyPublisher<Bool, Error> {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var originalState: Bool = false
        
        return getLight(id: lightId)
            .handleEvents(receiveOutput: { light in
                originalState = light.on.on
            })
            .flatMap { [weak self] light -> AnyPublisher<Bool, Error> in
                guard let self = self else {
                    return Just(false).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
                
                // –ú–∏–≥–∞–µ–º –ª–∞–º–ø–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                let blinkState = LightState(
                    on: OnState(on: !light.on.on)
                )
                
                return self.updateLightV2HTTPS(id: lightId, state: blinkState)
                    .delay(for: .seconds(0.5), scheduler: RunLoop.main)
                    .flatMap { _ in
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        let restoreState = LightState(
                            on: OnState(on: originalState)
                        )
                        return self.updateLightV2HTTPS(id: lightId, state: restoreState)
                    }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueAPIClient+Lights.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HueAPIClient —Å –º–µ—Ç–æ–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - getAllLights - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–∞–º–ø
 - getAllLightsV2HTTPS - –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API v2 HTTPS
 - getLight - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∞–º–ø–µ
 - updateLight - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø—ã
 - updateLightV2HTTPS - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API v2 HTTPS
 - blinkLight - –º–∏–≥–∞–Ω–∏–µ –ª–∞–º–ø–æ–π
 - performOffLightBlink - –º–∏–≥–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∞–º–ø—ã
 - performBrightnessBlink - –º–∏–≥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –ª–∞–º–ø—ã
 - checkLightBlink - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥–∞–Ω–∏—è
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - Light, LightState, OnState, Dimming, Dynamics –º–æ–¥–µ–ª–∏
 - performRequestHTTPS –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueAPIClient.swift - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - HueAPIClient+Networking.swift - —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
 - HueAPIClient+LightEnrichment.swift - –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∞–º–ø
 */
