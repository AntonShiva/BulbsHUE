//
//  HueAPIClient+LightDiscovery.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - Serial Number Search (Simplified)
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–º–ø—É –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –ª–∞–º–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    func addLightBySerialNumber(_ serialNumber: String) -> AnyPublisher<[Light], Error> {
        let cleanSerial = serialNumber.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        print("üîç –ü–æ–∏—Å–∫ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(cleanSerial)")
        print("üìã –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ª–∞–º–ø—ã")
        
        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API v1 —á—Ç–æ–±—ã –ª–∞–º–ø–∞ –º–∏–≥–Ω—É–ª–∞
        return initiateSearchV1(serial: cleanSerial)
            .handleEvents(receiveOutput: { success in
                print("üì° API v1 –ø–æ–∏—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: \(success ? "‚úÖ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –æ—à–∏–±–∫–∞")")
                if success {
                    print("üí° –õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(cleanSerial) –¥–æ–ª–∂–Ω–∞ –º–∏–≥–∞—Ç—å –°–ï–ô–ß–ê–°!")
                    print("üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –º–∏–≥–∞—é—â—É—é –ª–∞–º–ø—É –≤ —Å–ø–∏—Å–∫–µ")
                }
            })
            .flatMap { [weak self] _ -> AnyPublisher<[Light], Error> in
                guard let self = self else {
                    return Fail(error: HueAPIError.unknown("Self is nil"))
                        .eraseToAnyPublisher()
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –ª–∞–º–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                print("üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                return self.getAllLightsV2HTTPS()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –ª–∞–º–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥
    func confirmLightSelection(_ light: Light, forSerialNumber serialNumber: String) {
        let cleanSerial = serialNumber.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ª–∞–º–ø—É: \(light.metadata.name)")
        print("üîó –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä \(cleanSerial) –∫ –ª–∞–º–ø–µ \(light.id)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        saveSerialMapping(serial: cleanSerial, lightId: light.id)
        
        // –ú–∏–≥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∞–º–ø–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        _ = identifyLight(id: light.id)
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: \(error)")
                    }
                },
                receiveValue: { success in
                    if success {
                        print("üí° –õ–∞–º–ø–∞ –º–∏–≥–Ω—É–ª–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    // MARK: - Helper Methods
    
    /// –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API v1 –¥–ª—è –º–∏–≥–∞–Ω–∏—è –ª–∞–º–ø—ã
    private func initiateSearchV1(serial: String) -> AnyPublisher<Bool, Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        let body: [String: Any] = ["deviceid": [serial]]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: HueAPIError.unknown("Failed to serialize request"))
                .eraseToAnyPublisher()
        }
        
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response -> Bool in
                guard let httpResponse = response as? HTTPURLResponse else {
                    throw HueAPIError.unknown("Invalid response")
                }
                
                print("üì° v1 Search initiation response: \(httpResponse.statusCode)")
                
                if httpResponse.statusCode == 200 {
                    return true
                } else {
                    print("‚ö†Ô∏è API v1 –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
                    return false
                }
            }
            .mapError { HueAPIError.networkError($0) }
            .eraseToAnyPublisher()
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫ ID –ª–∞–º–ø—ã
    private func saveSerialMapping(serial: String, lightId: String) {
        let key = "SerialMapping_\(serial)"
        UserDefaults.standard.set(lightId, forKey: key)
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –º–∞–ø–ø–∏–Ω–≥: \(serial) ‚Üí \(lightId)")
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç ID –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    private func getLightIdBySerial(_ serial: String) -> String? {
        let key = "SerialMapping_\(serial)"
        return UserDefaults.standard.string(forKey: key)
    }
    
    /// –ú–∏–≥–∞–µ—Ç –ª–∞–º–ø–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (API v2)
    func identifyLight(id: String) -> AnyPublisher<Bool, Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "https://\(bridgeIP)/clip/v2/resource/light/\(id)") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PUT"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue(applicationKey, forHTTPHeaderField: "hue-application-key")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API v2 –¥–ª—è identify
        let body: [String: Any] = [
            "identify": ["action": "identify"]
        ]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: HueAPIError.unknown("Failed to serialize request"))
                .eraseToAnyPublisher()
        }
        
        return session.dataTaskPublisher(for: request)
            .tryMap { data, response -> Bool in
                guard let httpResponse = response as? HTTPURLResponse else {
                    throw HueAPIError.unknown("Invalid response")
                }
                
                if httpResponse.statusCode == 200 {
                    print("üí° –õ–∞–º–ø–∞ \(id) –ø–æ–ª—É—á–∏–ª–∞ –∫–æ–º–∞–Ω–¥—É –º–∏–≥–∞–Ω–∏—è")
                    return true
                } else {
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥–∞–Ω–∏—è –ª–∞–º–ø—ã \(id): —Å—Ç–∞—Ç—É—Å \(httpResponse.statusCode)")
                    return false
                }
            }
            .mapError { HueAPIError.networkError($0) }
            .eraseToAnyPublisher()
    }
}
