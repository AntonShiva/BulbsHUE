//
//  HueAPIClient+LightDiscovery.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - Modern Light Discovery
    
    /// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø (–≥–∏–±—Ä–∏–¥ v1/v2)
    func addLightModern(serialNumber: String? = nil) -> AnyPublisher<[Light], Error> {
        // –î–ª—è –û–ë–©–ï–ì–û –ø–æ–∏—Å–∫–∞ (–±–µ–∑ —Å–µ—Ä–∏–π–Ω–∏–∫–∞) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º v1 scan –∏ —Å–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if serialNumber == nil {
            return startGeneralSearchV1()
                .flatMap { _ in
                    // –†–æ–±–∞—Å—Ç–Ω—ã–π –æ–ø—Ä–æ—Å /lights/new —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.checkForNewLights()
                }
                .flatMap { [weak self] newLights -> AnyPublisher<[Light], Error> in
                    guard let self = self else {
                        return Just([]).setFailureType(to: Error.self).eraseToAnyPublisher()
                    }
                    // –ï—Å–ª–∏ v1 —Å–æ–æ–±—â–∏–ª –Ω–æ–≤—ã–µ ID, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ v2.
                    // –î–µ–ª–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–æ 60—Å.
                    return self.awaitV2Enumeration(for: newLights)
                }
                .flatMap { [weak self] lights -> AnyPublisher<[Light], Error> in
                    guard let self = self else {
                        return Just([]).setFailureType(to: Error.self).eraseToAnyPublisher()
                    }
                    // Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º Touchlink scan –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª
                    if lights.isEmpty {
                        return self.triggerTouchlinkScan()
                            .delay(for: .seconds(8), scheduler: RunLoop.main)
                            .flatMap { _ in self.checkForNewLights() }
                            .flatMap { newV2Lights in self.awaitV2Enumeration(for: newV2Lights) }
                            .catch { _ in Just<[Light]>([]).setFailureType(to: Error.self).eraseToAnyPublisher() }
                            .eraseToAnyPublisher()
                    }
                    return Just(lights).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
                .eraseToAnyPublisher()
        }
        
        // –î–ª—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ v1
        guard let serial = serialNumber, isValidSerialNumber(serial) else {
            return Fail(error: HueAPIError.unknown("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"))
                .eraseToAnyPublisher()
        }
        
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(serial)")
        
        // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ v1 (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π v1 –≤—ã–∑–æ–≤)
        return initiateSearchV1(serial: serial)
            .flatMap { _ in
                // –®–∞–≥ 2: –ñ–¥–µ–º 40 —Å–µ–∫—É–Ω–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                print("‚è± –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (40 —Å–µ–∫)...")
                return Just(())
                    .delay(for: .seconds(40), scheduler: RunLoop.main)
                    .eraseToAnyPublisher()
            }
            .flatMap { _ in
                // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ API v2
                print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ API v2...")
                return self.getAllLightsV2HTTPS()
            }
            .map { lights in lights }
            .eraseToAnyPublisher()
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–º–ø—É –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API flow
    func addLightBySerialNumber(_ serialNumber: String) -> AnyPublisher<[Light], Error> {
        let cleanSerial = serialNumber.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        print("üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(cleanSerial)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ ID –ª–∞–º–ø –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        var existingLightIds = Set<String>()
        
        return getAllLightsV2HTTPS()
            .handleEvents(receiveOutput: { lights in
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∞–º–ø
                existingLightIds = Set(lights.map { $0.id })
                print("üìù –¢–µ–∫—É—â–∏–µ –ª–∞–º–ø—ã: \(existingLightIds.count)")
            })
            .flatMap { [weak self] _ -> AnyPublisher<[Light], Error> in
                guard let self = self else {
                    return Fail(error: HueAPIError.unknown("Client deallocated"))
                        .eraseToAnyPublisher()
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º targeted search
                return self.performTargetedSearch(serialNumber: cleanSerial)
            }
            .flatMap { [weak self] _ -> AnyPublisher<[Light], Error> in
                guard let self = self else {
                    return Fail(error: HueAPIError.unknown("Client deallocated"))
                        .eraseToAnyPublisher()
                }
                
                // –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                return self.getAllLightsV2HTTPS()
            }
            .map { allLights -> [Light] in
                // –í–ê–ñ–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –ª–∞–º–ø—ã –∏–ª–∏ —Ç–µ, —á—Ç–æ –º–∏–≥–Ω—É–ª–∏
                let newLights = allLights.filter { light in
                    // –ù–æ–≤–∞—è –ª–∞–º–ø–∞ (–Ω–µ –±—ã–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ –ø–æ–∏—Å–∫–∞)
                    let isNew = !existingLightIds.contains(light.id)
                    
                    // –ò–ª–∏ –ª–∞–º–ø–∞, –∫–æ—Ç–æ—Ä–∞—è –º–∏–≥–Ω—É–ª–∞ (–±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞)
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—é
                    let isReset = light.metadata.name.contains("Hue") &&
                                 light.metadata.name.contains("lamp") &&
                                 !light.metadata.name.contains("configured")
                    
                    return isNew || isReset
                }
                
                print("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                print("   –í—Å–µ–≥–æ –ª–∞–º–ø: \(allLights.count)")
                print("   –ù–æ–≤—ã—Ö/—Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö: \(newLights.count)")
                
                // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–µ—Ç, –Ω–æ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω,
                // –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–∞–º ID
                if newLights.isEmpty {
                    let matchingLight = allLights.first { light in
                        let lightIdSuffix = String(light.id.suffix(6))
                            .uppercased()
                            .replacingOccurrences(of: "-", with: "")
                        return lightIdSuffix == cleanSerial
                    }
                    
                    if let found = matchingLight {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–∞–º–ø–∞ –ø–æ ID suffix: \(found.metadata.name)")
                        return [found]
                    }
                }
                
                return newLights
            }
            .eraseToAnyPublisher()
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—â–∏–π –ø–æ–∏—Å–∫ –ª–∞–º–ø –Ω–∞ –º–æ—Å—Ç–µ —á–µ—Ä–µ–∑ CLIP v1 (POST /lights)
    /// –°–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Philips Hue API v1
    internal func startGeneralSearchV1() -> AnyPublisher<Bool, Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated).eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL).eraseToAnyPublisher()
        }
        
        print("üîç –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫ –ª–∞–º–ø —á–µ—Ä–µ–∑ v1 API...")
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        // ‚úÖ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–µ–ª–∞
        // request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.timeoutInterval = 60.0  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
        // ‚úÖ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º httpBody - –æ—Å—Ç–∞–≤–ª—è–µ–º nil
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .tryMap { data, response in
                guard let http = response as? HTTPURLResponse else {
                    throw HueAPIError.networkError(NSError(domain: "No HTTP response", code: -1))
                }
                
                print("üì° Response status: \(http.statusCode)")
                
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üì¶ Response body: \(responseString)")
                }
                
                // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å success
                if http.statusCode == 200 {
                    print("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º 40 —Å–µ–∫—É–Ω–¥...")
                    return true
                } else {
                    throw HueAPIError.httpError(statusCode: http.statusCode)
                }
            }
            .delay(for: .seconds(40), scheduler: RunLoop.main)
            .eraseToAnyPublisher()
    }
    
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ v1 —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
    internal func initiateSearchV1(serial: String) -> AnyPublisher<Bool, Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        // –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô v1 endpoint –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–º –Ω—É–∂–µ–Ω
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.timeoutInterval = 10.0
        
        let body = ["deviceid": [serial.uppercased()]]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: HueAPIError.encodingError)
                .eraseToAnyPublisher()
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        return URLSession.shared.dataTaskPublisher(for: request)
            .tryMap { data, response in
                if let httpResponse = response as? HTTPURLResponse {
                    print("üì° v1 Search initiation response: \(httpResponse.statusCode)")
                    
                    if httpResponse.statusCode == 200 {
                        return true
                    } else if httpResponse.statusCode == 404 {
                        throw HueAPIError.bridgeNotFound
                    } else {
                        throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                    }
                }
                return true
            }
            .mapError { error in
                print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: \(error)")
                return HueAPIError.networkError(error)
            }
            .eraseToAnyPublisher()
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç targeted search –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ª–∞–º–ø—ã
    internal func performTargetedSearch(serialNumber: String) -> AnyPublisher<[Light], Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º targeted search –¥–ª—è: \(serialNumber)")
        
        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API v1
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.timeoutInterval = 10.0
        
        // –§–æ—Ä–º–∞—Ç –¥–ª—è targeted search
        let body = ["deviceid": [serialNumber]]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: HueAPIError.encodingError)
                .eraseToAnyPublisher()
        }
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .tryMap { data, response in
                if let httpResponse = response as? HTTPURLResponse {
                    print("üì° Targeted search response: \(httpResponse.statusCode)")
                    
                    if httpResponse.statusCode == 200 {
                        print("‚úÖ –ü–æ–∏—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        return true
                    } else {
                        throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                    }
                }
                return true
            }
            .delay(for: .seconds(40), scheduler: RunLoop.main) // –ñ–¥–µ–º 40 —Å–µ–∫—É–Ω–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            .flatMap { _ in
                // –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã
                self.checkForNewLights()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–∞–º–ø –ø–æ—Å–ª–µ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        /// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ Philips Hue API v1 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        internal func checkForNewLights() -> AnyPublisher<[Light], Error> {
            guard let applicationKey = applicationKey else {
                return Fail(error: HueAPIError.notAuthenticated)
                    .eraseToAnyPublisher()
            }
            
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã —á–µ—Ä–µ–∑ /lights/new...")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ v1 API
            return fetchNewLightsStatus()
                .flatMap { [weak self] newLightIds -> AnyPublisher<[Light], Error> in
                    guard let self = self else {
                        return Just([]).setFailureType(to: Error.self).eraseToAnyPublisher()
                    }
                    
                    print("üÜï API v1 —Å–æ–æ–±—â–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö ID: \(newLightIds)")
                    
                    // –ï—Å–ª–∏ v1 –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –Ω–æ–≤—ã—Ö –Ω–µ—Ç, –Ω–æ –º—ã –∑–Ω–∞–µ–º —á—Ç–æ –ª–∞–º–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã,
                    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –ª–∞–º–ø—ã —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                    if newLightIds.isEmpty {
                        print("‚ö†Ô∏è v1 API –Ω–µ –≤–∏–¥–∏—Ç –Ω–æ–≤—ã—Ö –ª–∞–º–ø, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ...")
                        
                        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        return self.getAllLightsV2HTTPS()
                            .map { allLights -> [Light] in
                                print("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: \(allLights.count)")
                                
                                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                                let unconfiguredLights = allLights.filter { light in
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ª–∞–º–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                                    let hasUserConfig = light.metadata.userSubtypeName != nil &&
                                                      !light.metadata.userSubtypeName!.isEmpty
                                    
                                    if !hasUserConfig {
                                        print("üìç –õ–∞–º–ø–∞ '\(light.metadata.name)' –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                                    }
                                    
                                    return !hasUserConfig
                                }
                                
                                // –ï—Å–ª–∏ –≤—Å–µ –ª–∞–º–ø—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                if unconfiguredLights.isEmpty && !allLights.isEmpty {
                                    print("‚ÑπÔ∏è –í—Å–µ –ª–∞–º–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                                    return allLights
                                }
                                
                                return unconfiguredLights
                            }
                            .eraseToAnyPublisher()
                    }
                    
                    // –ï—Å–ª–∏ v1 –Ω–∞—à–µ–ª –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                    return self.getAllLightsV2HTTPS()
                        .map { allLights -> [Light] in
                            // –ù–∞—Ö–æ–¥–∏–º –ª–∞–º–ø—ã –ø–æ v1 ID
                            let newLights = allLights.filter { light in
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ v1 ID
                                for v1Id in newLightIds {
                                    if light.id.contains(v1Id) || light.metadata.name.contains("lamp \(v1Id)") {
                                        print("‚ú® –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ª–∞–º–ø–∞: \(light.metadata.name) (ID: \(light.id))")
                                        return true
                                    }
                                }
                                return false
                            }
                            
                            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
                            if newLights.isEmpty {
                                return allLights.filter { $0.metadata.userSubtypeName == nil }
                            }
                            
                            return newLights
                        }
                        .eraseToAnyPublisher()
                }
                .eraseToAnyPublisher()
        }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ª–∞–º–ø –∏–∑ API v1
    func fetchNewLightsStatus() -> AnyPublisher<[String], Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated).eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights/new") else {
            return Fail(error: HueAPIError.invalidURL).eraseToAnyPublisher()
        }
        
        return URLSession.shared.dataTaskPublisher(for: url)
            .map(\.data)
            .tryMap { data in
                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
                if let jsonString = String(data: data, encoding: .utf8) {
                    print("üì° Raw response from /lights/new: \(jsonString)")
                }
                
                guard let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] else {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
                    return []
                }
                
                let lastscan = json["lastscan"] as? String ?? "none"
                print("üìÖ –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: \(lastscan)")
                
                var newLightIds: [String] = []
                for (key, value) in json where key != "lastscan" {
                    if let lightInfo = value as? [String: Any] {
                        print("üí° –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ª–∞–º–ø–∞ v1 ID: \(key), info: \(lightInfo)")
                        newLightIds.append(key)
                    }
                }
                
                return newLightIds
            }
            .mapError { HueAPIError.networkError($0) }
            .eraseToAnyPublisher()
    }
    
    private func fetchNewOnce() -> AnyPublisher<(ids: [String], lastscan: String), Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated).eraseToAnyPublisher()
        }
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights/new") else {
            return Fail(error: HueAPIError.invalidURL).eraseToAnyPublisher()
        }
        return URLSession.shared.dataTaskPublisher(for: url)
            .map(\.data)
            .tryMap { data in
                guard let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                      let lastscan = json["lastscan"] as? String else {
                    return ([], "none")
                }
                var newLightIds: [String] = []
                for (key, value) in json where key != "lastscan" {
                    if let _ = value as? [String: Any] { newLightIds.append(key) }
                }
                return (newLightIds, lastscan)
            }
            .mapError { HueAPIError.networkError($0) }
            .eraseToAnyPublisher()
    }
    
    private func pollNewIds(elapsed: TimeInterval, timeout: TimeInterval, interval: TimeInterval) -> AnyPublisher<[String], Error> {
        return fetchNewOnce()
            .flatMap { result -> AnyPublisher<[String], Error> in
                let (ids, lastscan) = result
                print("üìÖ lastscan=\(lastscan), –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö: \(ids.count), elapsed=\(Int(elapsed))s")
                if (lastscan == "active" || lastscan == "none") && elapsed < timeout {
                    return Just(())
                        .delay(for: .seconds(interval), scheduler: RunLoop.main)
                        .flatMap { _ in self.pollNewIds(elapsed: elapsed + interval, timeout: timeout, interval: interval) }
                        .eraseToAnyPublisher()
                } else {
                    return Just(ids).setFailureType(to: Error.self).eraseToAnyPublisher()
                }
            }
            .eraseToAnyPublisher()
    }
    
    /// –¢—Ä–∏–≥–≥–µ—Ä–∏—Ç Touchlink scan (v1 PUT /config {"touchlink": true}) –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    private func triggerTouchlinkScan() -> AnyPublisher<Bool, Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated).eraseToAnyPublisher()
        }
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/config") else {
            return Fail(error: HueAPIError.invalidURL).eraseToAnyPublisher()
        }
        var request = URLRequest(url: url)
        request.httpMethod = "PUT"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: ["touchlink": true])
        return URLSession.shared.dataTaskPublisher(for: request)
            .map { _ in true }
            .mapError { HueAPIError.networkError($0) }
            .eraseToAnyPublisher()
    }

    /// –î–æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–∞–º–ø –≤ API v2 (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ 60—Å)
    private func awaitV2Enumeration(for v2CandidateLights: [Light], timeout: TimeInterval = 60, interval: TimeInterval = 2) -> AnyPublisher<[Light], Error> {
        if v2CandidateLights.isEmpty {
            return getAllLightsV2HTTPS()
                .eraseToAnyPublisher()
        }
        func attempt(elapsed: TimeInterval) -> AnyPublisher<[Light], Error> {
            return getAllLightsV2HTTPS()
                .map { all in
                    let ids = Set(v2CandidateLights.map { $0.id })
                    let present = all.filter { ids.contains($0.id) }
                    return present
                }
                .flatMap { present -> AnyPublisher<[Light], Error> in
                    if !present.isEmpty || elapsed >= timeout {
                        return Just(present).setFailureType(to: Error.self).eraseToAnyPublisher()
                    }
                    return Just(())
                        .delay(for: .seconds(interval), scheduler: RunLoop.main)
                        .flatMap { _ in attempt(elapsed: elapsed + interval) }
                        .eraseToAnyPublisher()
                }
                .eraseToAnyPublisher()
        }
        return attempt(elapsed: 0)
    }

    /// –ñ–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö v2-–ª–∞–º–ø –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö v1 ID (–¥–æ 60—Å)
    private func awaitV2EnumerationForV1Ids(_ v1Ids: [String], timeout: TimeInterval = 60, interval: TimeInterval = 2) -> AnyPublisher<[Light], Error> {
        if v1Ids.isEmpty {
            return Just([]).setFailureType(to: Error.self).eraseToAnyPublisher()
        }
        func attempt(elapsed: TimeInterval) -> AnyPublisher<[Light], Error> {
            return getDeviceMappings()
                .flatMap { mappings -> AnyPublisher<[Light], Error> in
                    self.getAllLightsV2HTTPS()
                        .map { allV2 in
                            let v1IdSet = Set(v1Ids)
                            let matchedV2Ids = mappings.compactMap { m -> String? in
                                if let v1 = m.v1LightId, v1IdSet.contains(v1) { return m.lightId }
                                return nil
                            }
                            if matchedV2Ids.isEmpty {
                                return allV2.filter { v2 in v1IdSet.contains(where: { v2.id.contains($0) }) }
                            }
                            return allV2.filter { matchedV2Ids.contains($0.id) }
                        }
                        .eraseToAnyPublisher()
                }
                .flatMap { matched -> AnyPublisher<[Light], Error> in
                    if !matched.isEmpty || elapsed >= timeout {
                        return Just(matched).setFailureType(to: Error.self).eraseToAnyPublisher()
                    }
                    return Just(())
                        .delay(for: .seconds(interval), scheduler: RunLoop.main)
                        .flatMap { _ in attempt(elapsed: elapsed + interval) }
                        .eraseToAnyPublisher()
                }
                .eraseToAnyPublisher()
        }
        return attempt(elapsed: 0)
    }
    
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    internal func isValidSerialNumber(_ serial: String) -> Bool {
        let cleaned = serial
            .uppercased()
            .trimmingCharacters(in: .whitespacesAndNewlines)
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
            .replacingOccurrences(of: ":", with: "")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –±—É–∫–≤—ã A-Z –∏ —Ü–∏—Ñ—Ä—ã 0-9
        let validCharacterSet = CharacterSet(charactersIn: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–∏–º–≤–æ–ª—ã
        let isValid = cleaned.count == 6 &&
                      cleaned.rangeOfCharacter(from: validCharacterSet.inverted) == nil
        
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ '\(serial)': \(isValid ? "‚úÖ" : "‚ùå")")
        return isValid
    }
    
    // MARK: - Touchlink Implementation
    
    /// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Touchlink —á–µ—Ä–µ–∑ Entertainment API
    func performModernTouchlink(serialNumber: String) -> AnyPublisher<Bool, Error> {
        print("üîó –ó–∞–ø—É—Å–∫ Touchlink —á–µ—Ä–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Entertainment API
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Entertainment Configuration –¥–ª—è Touchlink
        let endpoint = "/clip/v2/resource/entertainment_configuration"
        
        let touchlinkRequest = [
            "type": "entertainment_configuration",
            "metadata": [
                "name": "Touchlink Session"
            ],
            "action": [
                "action": "touchlink",
                "target": serialNumber.uppercased()
            ]
        ] as [String: Any]
        
        do {
            let data = try JSONSerialization.data(withJSONObject: touchlinkRequest)
            
            return performRequestHTTPS<GenericResponse>(
                endpoint: endpoint,
                method: "POST",
                body: data
            )
            .map { (_: GenericResponse) in true }
            .catch { error -> AnyPublisher<Bool, Error> in
                print("‚ö†Ô∏è Entertainment Touchlink –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self.performClassicTouchlink(serialNumber: serialNumber)
            }
            .eraseToAnyPublisher()
        } catch {
            return Fail(error: HueAPIError.encodingError)
                .eraseToAnyPublisher()
        }
    }
    
    /// –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Touchlink (fallback)
    internal func performClassicTouchlink(serialNumber: String) -> AnyPublisher<Bool, Error> {
        print("üîó Fallback –∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º—É Touchlink")
        
        // –≠—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω v1 touchlink
        guard let applicationKey = applicationKey,
              let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/config") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PUT"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let body = ["touchlink": true]
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            return Fail(error: HueAPIError.encodingError)
                .eraseToAnyPublisher()
        }
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .map { _ in true }
            .mapError { HueAPIError.networkError($0) }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ ID –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    /// - Parameter deviceId: ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    /// - Returns: Publisher —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    func getDeviceDetails(_ deviceId: String) -> AnyPublisher<DeviceDetails, Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "https://\(bridgeIP)/clip/v2/resource/device/\(deviceId)") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue(applicationKey, forHTTPHeaderField: "hue-application-key")
        
        return sessionHTTPS.dataTaskPublisher(for: request)
            .tryMap { data, response in
                if let httpResponse = response as? HTTPURLResponse {
                    if httpResponse.statusCode == 404 {
                        throw HueAPIError.bridgeNotFound
                    } else if httpResponse.statusCode >= 400 {
                        throw HueAPIError.httpError(statusCode: httpResponse.statusCode)
                    }
                }
                return data
            }
            .decode(type: DeviceDetailsResponse.self, decoder: JSONDecoder())
            .map { $0.data.first }
            .compactMap { $0 }
            .mapError { error in
                HueAPIError.networkError(error)
            }
            .eraseToAnyPublisher()
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueAPIClient+LightDiscovery.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HueAPIClient –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–∞–º–ø.
 –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API v1.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - addLightModern - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø
 - addLightBySerialNumber - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
 - discoverLightsV2 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ v2
 - initiateSearchV1 - –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ v1
 - performTargetedSearch - —Ü–µ–ª–µ–≤–æ–π –ø–æ–∏—Å–∫ –ª–∞–º–ø—ã
 - checkForNewLights - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª–∞–º–ø
 - isValidSerialNumber - –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
 - performModernTouchlink - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Touchlink
 - performClassicTouchlink - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Touchlink
 - getDeviceDetails - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - getAllLightsV2HTTPS –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∞–º–ø
 - performRequestHTTPS –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueAPIClient.swift - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - HueAPIClient+Lights.swift - –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏
 - HueAPIClient+DeviceMapping.swift - –º–∞–ø–ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
