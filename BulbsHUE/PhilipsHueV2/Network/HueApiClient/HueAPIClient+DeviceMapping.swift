//
//  HueAPIClient+DeviceMapping.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import Combine

extension HueAPIClient {
    
    // MARK: - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    struct DeviceMapping {
        let deviceId: String        // RID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ API v2
        let serialNumber: String?   // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Å –∫–æ—Ä–ø—É—Å–∞
        let uniqueId: String?       // Unique ID –∏–∑ API v1 (—Å–æ–¥–µ—Ä–∂–∏—Ç MAC)
        let macAddress: String?     // –ü–æ–ª–Ω—ã–π MAC/EUI-64 –∞–¥—Ä–µ—Å
        let shortMac: String?       // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±–∞–π—Ç–∞ MAC (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        let lightId: String?        // ID –ª–∞–º–ø—ã –≤ —Å–∏—Å—Ç–µ–º–µ
        let name: String            // –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–º–ø—ã
        let v1LightId: String?      // ID –ª–∞–º–ø—ã –≤ v1 ("/lights/<id>" -> <id>)
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Å–µ—Ä–∏–π–Ω–∏–∫–∏ ‚Üî MAC ‚Üî lights)
    internal func getDeviceMappings() -> AnyPublisher<[DeviceMapping], Error> {
        print("üìä –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        let devicesPublisher = getV2Devices()
        let zigbeePublisher = getV2ZigbeeConnectivity()
        let v1LightsPublisher = getV1Lights()
        
        return Publishers.Zip3(devicesPublisher, zigbeePublisher, v1LightsPublisher)
            .map { devices, zigbeeConns, v1Lights in
                self.buildDeviceMappings(
                    devices: devices,
                    zigbeeConns: zigbeeConns,
                    v1Lights: v1Lights
                )
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ API v2
    internal func getV2Devices() -> AnyPublisher<[V2Device], Error> {
        let endpoint = "/clip/v2/resource/device"
        
        return performRequestHTTPS<V2DevicesResponse>(endpoint: endpoint, method: "GET")
            .map { (response: V2DevicesResponse) in
                response.data
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç Zigbee connectivity –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API v2
    internal func getV2ZigbeeConnectivity() -> AnyPublisher<[V2ZigbeeConn], Error> {
        let endpoint = "/clip/v2/resource/zigbee_connectivity"
        
        return performRequestHTTPS<V2ZigbeeResponse>(endpoint: endpoint, method: "GET")
            .map { (response: V2ZigbeeResponse) in
                response.data
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∞–º–ø —á–µ—Ä–µ–∑ API v1 (–¥–ª—è uniqueid)
    internal func getV1Lights() -> AnyPublisher<[String: V1Light], Error> {
        guard let applicationKey = applicationKey else {
            return Fail(error: HueAPIError.notAuthenticated)
                .eraseToAnyPublisher()
        }
        
        guard let url = URL(string: "http://\(bridgeIP)/api/\(applicationKey)/lights") else {
            return Fail(error: HueAPIError.invalidURL)
                .eraseToAnyPublisher()
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.timeoutInterval = 10.0
        
        return URLSession.shared.dataTaskPublisher(for: request)
            .map(\.data)
            .decode(type: [String: V1Light].self, decoder: JSONDecoder())
            .mapError { error in
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è v1 lights: \(error)")
                return HueAPIError.networkError(error)
            }
            .eraseToAnyPublisher()
    }
    
    /// –°—Ç—Ä–æ–∏—Ç –º–∞–ø–ø–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    internal func buildDeviceMappings(
        devices: [V2Device],
        zigbeeConns: [V2ZigbeeConn],
        v1Lights: [String: V1Light]
    ) -> [DeviceMapping] {
        
        var mappings: [DeviceMapping] = []
        
        for device in devices {
            // –ù–∞—Ö–æ–¥–∏–º Zigbee connectivity –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            let zigbee = zigbeeConns.first { $0.owner.rid == device.id }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ª–∞–º–ø—ã –∏–∑ id_v1
            let v1LightId = extractV1LightId(from: device.id_v1)
            
            // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API v1
            let v1Light = v1LightId.flatMap { v1Lights[$0] }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π MAC –∏–∑ uniqueid
            let shortMac = extractShortMac(from: v1Light?.uniqueid)
            
            let mapping = DeviceMapping(
                deviceId: device.id,
                serialNumber: device.serial_number,
                uniqueId: v1Light?.uniqueid,
                macAddress: zigbee?.mac_address ?? zigbee?.mac,
                shortMac: shortMac,
                lightId: extractLightServiceId(from: device.services),
                name: device.metadata?.name ?? "Unknown",
                v1LightId: v1LightId
            )
            
            mappings.append(mapping)
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if let serial = mapping.serialNumber {
                print("üìç –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: \(mapping.name)")
                print("   –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: \(serial)")
                print("   MAC: \(mapping.macAddress ?? "–Ω/–¥")")
                print("   Short MAC: \(mapping.shortMac ?? "–Ω/–¥")")
            }
        }
        
        return mappings
    }
    
    // MARK: - Helper –º–µ—Ç–æ–¥—ã
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ª–∞–º–ø—ã v1 –∏–∑ id_v1
    internal func extractV1LightId(from idV1: String?) -> String? {
        guard let idV1 = idV1 else { return nil }
        // "/lights/3" -> "3"
        return idV1.split(separator: "/").last.map(String.init)
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π MAC –∏–∑ uniqueid
    internal func extractShortMac(from uniqueid: String?) -> String? {
        guard let uniqueid = uniqueid else { return nil }
        // "00:17:88:01:10:3e:5f:86-0b" -> "3e5f86"
        let macPart = uniqueid.split(separator: "-").first ?? ""
        let bytes = macPart.split(separator: ":")
        guard bytes.count >= 3 else { return nil }
        return bytes.suffix(3).joined().lowercased()
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID light —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    internal func extractLightServiceId(from services: [V2Service]?) -> String? {
        return services?.first { $0.rtype == "light" }?.rid
    }
}

// MARK: - Entertainment Configuration

extension HueAPIClient {
    
    /// –°–æ–∑–¥–∞–µ—Ç Entertainment Configuration
    func createEntertainmentConfiguration(
        name: String,
        lights: [String],
        positions: [Position3D]
    ) -> AnyPublisher<EntertainmentConfiguration, Error> {
        let endpoint = "/clip/v2/resource/entertainment_configuration"
        
        var config = EntertainmentConfiguration()
        config.metadata.name = name
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∞–º–ø—ã
        config.channels = lights.enumerated().map { index, lightId in
            var channel = EntertainmentChannel()
            channel.channel_id = index
            channel.position = positions[safe: index] ?? Position3D(x: 0, y: 0, z: 0)
            channel.members = [
                ChannelMember(
                    service: ResourceIdentifier(rid: lightId, rtype: "light"),
                    index: 0
                )
            ]
            return channel
        }
        
        do {
            let encoder = JSONEncoder()
            let data = try encoder.encode(config)
            
            return performRequestHTTPS<EntertainmentConfiguration>(endpoint: endpoint, method: "POST", body: data)
        } catch {
            return Fail(error: error)
                .eraseToAnyPublisher()
        }
    }
}

// MARK: - Safe Array Extension

extension Array {
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ HueAPIClient+DeviceMapping.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HueAPIClient –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Ä–∞–±–æ—Ç—ã —Å Entertainment Configuration.
 –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏, MAC –∞–¥—Ä–µ—Å–∞–º–∏ –∏ ID –ª–∞–º–ø.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - DeviceMapping - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
 - getDeviceMappings - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
 - getV2Devices - –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ v2
 - getV2ZigbeeConnectivity - –ø–æ–ª—É—á–µ–Ω–∏–µ Zigbee –¥–∞–Ω–Ω—ã—Ö
 - getV1Lights - –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∞–º–ø v1
 - buildDeviceMappings - –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
 - createEntertainmentConfiguration - —Å–æ–∑–¥–∞–Ω–∏–µ Entertainment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 
 Helper –º–µ—Ç–æ–¥—ã:
 - extractV1LightId - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID v1
 - extractShortMac - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ MAC
 - extractLightServiceId - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Å–µ—Ä–≤–∏—Å–∞
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - V2Device, V2ZigbeeConn, V1Light –º–æ–¥–µ–ª–∏
 - performRequestHTTPS –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - HueAPIClient.swift - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
 - HueAPIClient+Models.swift - –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
 - HueAPIClient+LightDiscovery.swift - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∞–º–ø
 */
