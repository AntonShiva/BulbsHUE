//
//  LocalNetworkPermissionChecker.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 31.07.2025.
//

import Network
import Foundation

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
@available(iOS 14.0, *)
class LocalNetworkPermissionChecker {
    
    private var completion: ((Bool) -> Void)?
    private var connection: NWConnection?
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è iOS 17+ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    func checkLocalNetworkPermission(completion: @escaping (Bool) -> Void) {
        self.completion = completion
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–¥—Ä–µ—Å—É (—Ä–æ—É—Ç–µ—Ä)
        let host = NWEndpoint.Host("192.168.1.1")
        let port = NWEndpoint.Port(80)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é UDP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let parameters = NWParameters.udp
        
        connection = NWConnection(host: host, port: port, using: parameters)
        
        connection?.stateUpdateHandler = { [weak self] state in
            switch state {
            case .ready:
                print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω")
                self?.cleanup()
                completion(true)
                
            case .failed(let error):
                if let nwError = error as? NWError {
                    switch nwError {
                    case .posix(let code) where code == .ENETUNREACH:
                        print("üö´ –î–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω")
                        self?.cleanup()
                        completion(false)
                    default:
                        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞—á–∞—é—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                        print("‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: \(error)")
                        self?.cleanup()
                        completion(true) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å
                    }
                } else {
                    self?.cleanup()
                    completion(true)
                }
                
            case .waiting(let error):
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–∏: \(error)")
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
                if error.localizedDescription.contains("Local network") {
                    print("üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                    self?.cleanup()
                    completion(false)
                }
                
            default:
                break
            }
        }
        
        connection?.start(queue: .main)
        
        // –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) { [weak self] in
            self?.cleanup()
            completion(true) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å
        }
    }
    
    private func cleanup() {
        connection?.cancel()
        connection = nil
        completion = nil
    }
}
