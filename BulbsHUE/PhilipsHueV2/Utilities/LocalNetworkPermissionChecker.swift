//
//  LocalNetworkPermissionChecker.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.
//

import Foundation
import Network

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –≤ iOS 14+ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@available(iOS 14.0, *)
class LocalNetworkPermissionChecker: NSObject {
    private var browser: NWBrowser?
    private var netService: NetService?
    private var completion: ((Bool) -> Void)?
    private var timeoutTimer: Timer?
    
    /// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å async/await
    static func checkLocalNetworkPermission() async -> Bool {
        let checker = LocalNetworkPermissionChecker()
        return await checker.requestAuthorization()
    }
    
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    func requestAuthorization() async -> Bool {
        return await withCheckedContinuation { continuation in
            requestAuthorization { granted in
                continuation.resume(returning: granted)
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å —á–µ—Ä–µ–∑ Bonjour —Å–µ—Ä–≤–∏—Å—ã
    /// –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func requestAuthorization(completion: @escaping (Bool) -> Void) {
        self.completion = completion
        
        #if targetEnvironment(simulator)
        // –í —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞)
        print("üì± –°–∏–º—É–ª—è—Ç–æ—Ä: —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º")
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            completion(true)
        }
        return
        #endif
        
        print("üì± –†–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)
        timeoutTimer = Timer.scheduledTimer(withTimeInterval: 30.0, repeats: false) { [weak self] _ in
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
            self?.cleanup()
            self?.completion?(false)
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è peer-to-peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        let parameters = NWParameters()
        parameters.includePeerToPeer = true
        
        // –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ Bonjour —Å–µ—Ä–≤–∏—Å–æ–≤
        let browser = NWBrowser(for: .bonjour(type: "_bonjour._tcp", domain: nil), using: parameters)
        self.browser = browser
        
        browser.stateUpdateHandler = { [weak self] newState in
            print("üîç Browser state: \(newState)")
            switch newState {
            case .failed(let error):
                print("‚ùå Browser failed: \(error.localizedDescription)")
                self?.cleanup()
                self?.completion?(false)
            case .ready:
                print("‚úÖ Browser ready - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
                self?.cleanup()
                self?.completion?(true)
            case .cancelled:
                break
            case .waiting(let error):
                print("‚è≥ Browser waiting: \(error)")
                // –ù–µ —Å—Ä–∞–∑—É –æ—Ç–º–µ–Ω–∞ - –º–æ–∂–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            default:
                break
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º NetService –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.netService = NetService(domain: "local.", type: "_lnp._tcp.", name: "LocalNetworkPrivacy", port: 1100)
        self.netService?.delegate = self
        
        // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö –Ω—É–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ main runloop
        self.netService?.schedule(in: .main, forMode: .common)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏ –ø—É–±–ª–∏–∫—É–µ–º —Å–µ—Ä–≤–∏—Å
        self.browser?.start(queue: .main)
        self.netService?.publish()
    }
    
    /// –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
    private func cleanup() {
        timeoutTimer?.invalidate()
        timeoutTimer = nil
        self.browser?.cancel()
        self.browser = nil
        self.netService?.stop()
        self.netService = nil
    }
}

@available(iOS 14.0, *)
extension LocalNetworkPermissionChecker: NetServiceDelegate {
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω - –∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
    func netServiceDidPublish(_ sender: NetService) {
        print("‚úÖ Local network permission granted")
        cleanup()
        completion?(true)
    }
    
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
    func netService(_ sender: NetService, didNotPublish errorDict: [String : NSNumber]) {
        print("‚ùå NetService publication failed: \(errorDict)")
        cleanup()
        completion?(false)
    }
}

/// –í–µ—Ä—Å–∏—è –¥–ª—è iOS < 14 (–∑–∞–≥–ª—É—à–∫–∞)
class LocalNetworkPermissionCheckerLegacy {
    func checkLocalNetworkPermission(completion: @escaping (Bool) -> Void) {
        // –í iOS < 14 —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        completion(true)
    }
}
