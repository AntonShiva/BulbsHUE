//
//  BridgeSetupView.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import SwiftUI
import AVFoundation
import CodeScanner

/// View –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hue Bridge
struct BridgeSetupView: View {
    @ObservedObject var viewModel: AppViewModel
    @State private var showingScanner = false
    @State private var showingManualEntry = false
    @State private var manualSerialNumber = ""
    @State private var isSearching = false
    @State private var showingLinkButtonAlert = false
    @State private var linkButtonTimer: Timer?
    @State private var linkButtonCountdown = 30
    @State private var selectedBridge: Bridge?
    @State private var hasReturnedFromSettings = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 30) {
                // –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                VStack(spacing: 20) {
                    Image(systemName: "lightbulb.circle.fill")
                        .font(.system(size: 80))
                        .foregroundColor(.blue)
                        .symbolRenderingMode(.hierarchical)
                    
                    Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Philips Hue")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    Text("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à Hue Bridge –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                .padding(.top, 50)
                
                Spacer()
                
                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                VStack(spacing: 16) {
                    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
                    Button(action: {
                        checkCameraPermission()
                    }) {
                        HStack {
                            Image(systemName: "qrcode.viewfinder")
                                .font(.title2)
                            Text("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
                                .font(.headline)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                    }
                    
                    // –†—É—á–Ω–æ–π –≤–≤–æ–¥
                    Button(action: {
                        showingManualEntry = true
                    }) {
                        HStack {
                            Image(systemName: "keyboard")
                                .font(.title2)
                            Text("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
                                .font(.headline)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue.opacity(0.1))
                        .foregroundColor(.blue)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(Color.blue, lineWidth: 2)
                        )
                    }
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
                    Button(action: {
                        searchForBridges()
                    }) {
                        HStack {
                            if isSearching {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .scaleEffect(0.8)
                            } else {
                                Image(systemName: "wifi")
                                    .font(.title2)
                            }
                            Text(isSearching ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏ –≤ —Å–µ—Ç–∏")
                                .font(.headline)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.green.opacity(0.1))
                        .foregroundColor(.green)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(Color.green, lineWidth: 2)
                        )
                    }
                    .disabled(isSearching)
                }
                .padding(.horizontal)
                
                Spacer()
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
                VStack(spacing: 8) {
                    Text("QR-–∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ Hue Bridge")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Button(action: {
                        // –û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É
                    }) {
                        Text("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
                            .font(.caption)
                            .foregroundColor(.blue)
                    }
                }
                .padding(.bottom, 30)
            }
            .navigationBarHidden(true)
        }
//        .sheet(isPresented: $showingScanner) {
//            QRCodeScannerView(completion: handleScannedCode)
//        }
        .sheet(isPresented: $showingManualEntry) {
            ManualEntryView(serialNumber: $manualSerialNumber) { serial in
                handleManualEntry(serial)
            }
        }
        .alert("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Link", isPresented: $showingLinkButtonAlert) {
            Button("–û—Ç–º–µ–Ω–∞") {
                cancelLinkButton()
            }
        } message: {
            Text("–ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É Link –Ω–∞ –≤–∞—à–µ–º Hue Bridge.\n\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: \(linkButtonCountdown) —Å–µ–∫.")
        }
        .onReceive(NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)) { _ in
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ —Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
            if hasReturnedFromSettings {
                print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ...")
                hasReturnedFromSettings = false
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                    checkLocalNetworkPermissionAndRetrySearch()
                }
            }
        }
    }
    
    // MARK: - Methods
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    private func checkCameraPermission() {
        switch AVCaptureDevice.authorizationStatus(for: .video) {
        case .authorized:
            showingScanner = true
        case .notDetermined:
            AVCaptureDevice.requestAccess(for: .video) { granted in
                if granted {
                    DispatchQueue.main.async {
                        showingScanner = true
                    }
                }
            }
        case .denied, .restricted:
            // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            showCameraPermissionAlert()
        @unknown default:
            break
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã
    private func showCameraPermissionAlert() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ HomeKit QR-–∫–æ–¥–∞
    private func handleHomeKitQRCode(_ code: String) {
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ Bridge –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HomeKit QR-–∫–æ–¥–∞")
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º setup code –∏–∑ HomeKit URI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // –§–æ—Ä–º–∞—Ç: X-HM://0024SIN3EQ0EB –≥–¥–µ SIN3EQ0EB - setup code
        let setupCode = extractHomeKitSetupCode(from: code)
        print("üîë Setup –∫–æ–¥ HomeKit: \(setupCode)")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤
        searchForBridges()
    }
    
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ setup –∫–æ–¥–∞ –∏–∑ HomeKit URI
    private func extractHomeKitSetupCode(from uri: String) -> String {
        // X-HM://0024SIN3EQ0EB -> –∏–∑–≤–ª–µ–∫–∞–µ–º SIN3EQ0EB
        if let range = uri.range(of: "X-HM://") {
            let afterPrefix = String(uri[range.upperBound...])
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ (0024) –∏ –±–µ—Ä–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
            if afterPrefix.count > 4 {
                return String(afterPrefix.dropFirst(4))
            }
        }
        return ""
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º QR-–∫–æ–¥–µ
    private func showUnsupportedQRAlert() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç SwiftUI Alert
        print("‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π QR-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫.")
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            self.searchForBridges()
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞
    private func handleScannedCode(_ code: String) {
        print("üì± handleScannedCode –≤—ã–∑–≤–∞–Ω —Å –∫–æ–¥–æ–º: '\(code)'")
        showingScanner = false
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø QR-–∫–æ–¥–∞
        if code.hasPrefix("X-HM://") {
            print("üè† –û–±–Ω–∞—Ä—É–∂–µ–Ω HomeKit Setup URI: \(code)")
            // HomeKit QR-–∫–æ–¥ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ Bridge
            handleHomeKitQRCode(code)
        } else if let bridgeId = parseBridgeId(from: code) {
            print("‚úÖ Bridge ID —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: \(bridgeId)")
            connectToBridge(withId: bridgeId)
        } else {
            print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞: '\(code)'")
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            showUnsupportedQRAlert()
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    private func handleManualEntry(_ serial: String) {
        showingManualEntry = false
        
        if let bridgeId = parseBridgeId(from: serial) {
            connectToBridge(withId: bridgeId)
        }
    }
    
    /// –ü–∞—Ä—Å–∏–Ω–≥ ID –º–æ—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    private func parseBridgeId(from input: String) -> String? {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        let cleaned = input.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if cleaned.hasPrefix("S#") {
            // –§–æ—Ä–º–∞—Ç S#12345678
            return String(cleaned.dropFirst(2))
        } else if cleaned.hasPrefix("HTTP") {
            // URL —Ñ–æ—Ä–º–∞—Ç
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
            if let url = URL(string: cleaned),
               let components = URLComponents(url: url, resolvingAgainstBaseURL: false),
               let idParam = components.queryItems?.first(where: { $0.name == "id" })?.value {
                return idParam
            }
        } else if cleaned.count == 8 || cleaned.count == 16 {
            // –ü—Ä–æ—Å—Ç–æ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
            return cleaned
        }
        
        return nil
    }
    
    /// –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ Philips Hue Discovery Guide
    private func searchForBridges() {
        print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ Hue Bridge...")
        isSearching = true
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        viewModel.discoveredBridges.removeAll()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ (mDNS + N-UPnP –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
        viewModel.searchForBridges()
        
        // –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º:
        // - UPnP/mDNS: –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
        // - N-UPnP: –º–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥
        // - –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç: 10 —Å–µ–∫—É–Ω–¥
        DispatchQueue.main.asyncAfter(deadline: .now() + 10) {
            self.isSearching = false
            self.handleDiscoveryResults()
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤
    private func handleDiscoveryResults() {
        let foundBridges = viewModel.discoveredBridges
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: –Ω–∞–π–¥–µ–Ω–æ \(foundBridges.count) –º–æ—Å—Ç–æ–≤")
        
        if foundBridges.isEmpty {
            print("‚ùå –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ IP.")
            showNoBridgesFoundAlert()
        } else if foundBridges.count == 1 {
            print("‚úÖ –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –º–æ—Å—Ç: \(foundBridges[0].internalipaddress)")
            selectedBridge = foundBridges.first
            if let bridge = selectedBridge {
                validateAndConnectToBridge(bridge)
            }
        } else {
            print("üîÄ –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ—Å—Ç–æ–≤: \(foundBridges.count)")
            showMultipleBridgesSelection(foundBridges)
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –∫–æ–≥–¥–∞ –º–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    private func showNoBridgesFoundAlert() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç–∫–∞–∑–æ–º –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
        if let error = viewModel.error as? HueAPIError,
           case .localNetworkPermissionDenied = error {
            print("üö´ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –æ–± –æ—Ç–∫–∞–∑–µ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
            showLocalNetworkPermissionDeniedAlert()
        } else {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç SwiftUI Alert —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º:
            // 1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
            // 2. –í–≤–µ—Å—Ç–∏ IP –≤—Ä—É—á–Ω—É—é
            // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bridge –∫ —Å–µ—Ç–∏
            print("‚ö†Ô∏è –ê–ª–µ—Ä—Ç: –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ IP –≤—Ä—É—á–Ω—É—é.")
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                self.showingManualEntry = true
            }
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –æ–± –æ—Ç–∫–∞–∑–µ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    private func showLocalNetworkPermissionDeniedAlert() {
        print("üö´ –ê–ª–µ—Ä—Ç: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        print("üì± –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        openAppSettingsForLocalNetwork()
    }
    
    /// –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    private func openAppSettingsForLocalNetwork() {
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–¥–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        hasReturnedFromSettings = true
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ iOS
        if let url = URL(string: UIApplication.openSettingsURLString) {
            if UIApplication.shared.canOpenURL(url) {
                print("üîß –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS...")
                UIApplication.shared.open(url, options: [:]) { success in
                    if success {
                        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ iOS —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã")
                        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω:")
                        print("   1. –ù–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª '–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å'")
                        print("   2. –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å")
                        print("   3. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                        self.hasReturnedFromSettings = false
                        // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
                        DispatchQueue.main.async {
                            self.showingManualEntry = true
                        }
                    }
                }
            } else {
                print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                hasReturnedFromSettings = false
                // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
                showingManualEntry = true
            }
        } else {
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            hasReturnedFromSettings = false
            // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            showingManualEntry = true
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫
    private func checkLocalNetworkPermissionAndRetrySearch() {
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤...")
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        viewModel.error = nil
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤
        searchForBridges()
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ—Å—Ç–æ–≤
    private func showMultipleBridgesSelection(_ bridges: [Bridge]) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç ActionSheet –∏–ª–∏ NavigationLink
        print("üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞:")
        for (index, bridge) in bridges.enumerated() {
            print("  \(index + 1). \(bridge.name ?? "Hue Bridge") - \(bridge.internalipaddress)")
        }
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –º–æ—Å—Ç
        selectedBridge = bridges.first
        if let bridge = selectedBridge {
            validateAndConnectToBridge(bridge)
        }
    }
    
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É
    private func validateAndConnectToBridge(_ bridge: Bridge) {
        print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ—Å—Ç: \(bridge.internalipaddress)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Hue Bridge
        // —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ /description.xml –∏–ª–∏ /api/config
        viewModel.validateBridge(bridge) {  isValid in
            DispatchQueue.main.async {
                if isValid {
                    print("‚úÖ –ú–æ—Å—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    self.startLinkButtonProcess(for: bridge)
                } else {
                    print("‚ùå –ú–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                    self.showInvalidBridgeAlert()
                }
            }
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –º–æ—Å—Ç–µ
    private func showInvalidBridgeAlert() {
        print("‚ö†Ô∏è –ê–ª–µ—Ä—Ç: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Hue Bridge")
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            self.searchForBridges()
        }
    }
    
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É –ø–æ ID
    private func connectToBridge(withId bridgeId: String) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–æ—Å—Ç –≤ —Å–µ—Ç–∏
        isSearching = true
        viewModel.searchForBridges()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            isSearching = false
            
            // –ò—â–µ–º –º–æ—Å—Ç —Å –Ω—É–∂–Ω—ã–º ID
            if let bridge = viewModel.discoveredBridges.first(where: { $0.id == bridgeId }) {
                selectedBridge = bridge
                startLinkButtonProcess(for: bridge)
            } else {
                // –ú–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
            }
        }
    }
    
    /// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Link
    private func startLinkButtonProcess(for bridge: Bridge) {
        selectedBridge = bridge
        showingLinkButtonAlert = true
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É
        viewModel.connectToBridge(bridge)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { _ in
            // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            attemptCreateUser()
        }
    }
    
    /// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func attemptCreateUser() {
        viewModel.createUser(appName: "BulbsHUE") {  success in
            if success {
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ BridgeSetupView!")
                self.cancelLinkButton()
                // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            }
        }
    }
    
    /// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Link Button
    private func cancelLinkButton() {
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        showingLinkButtonAlert = false
    }
}

// MARK: - QR Code Scanner View (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º)
/*
struct QRCodeScannerView: View {
    let completion: (String) -> Void
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            CodeScannerView(
                codeTypes: [.qr],
                scanMode: .continuous,
                showViewfinder: true,
                simulatedData: "S#12345678", // –î–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
                completion: handleScan
            )
            .navigationTitle("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
            .navigationBarItems(
                leading: Button("–û—Ç–º–µ–Ω–∞") {
                    presentationMode.wrappedValue.dismiss()
                }
            )
        }
    }
    
    private func handleScan(response: Result<ScanResult, ScanError>) {
        switch response {
        case .success(let result):
            completion(result.string)
        case .failure(let error):
            print("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
        }
    }
}
*/

// MARK: - Manual Entry View

struct ManualEntryView: View {
    @Binding var serialNumber: String
    let completion: (String) -> Void
    @Environment(\.presentationMode) var presentationMode
    @FocusState private var isFocused: Bool
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Text("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
                    .font(.headline)
                    .padding(.top, 40)
                
                Text("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ Hue Bridge –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å S#")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                // –ü–æ–ª–µ –≤–≤–æ–¥–∞
                VStack(alignment: .leading, spacing: 8) {
                    Text("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    TextField("S#12345678", text: $serialNumber)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .autocapitalization(.allCharacters)
                        .disableAutocorrection(true)
                        .focused($isFocused)
                }
                .padding(.horizontal)
                .padding(.top, 20)
                
                // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–ø–æ–¥—Å–∫–∞–∑–∫–∞
                Image(systemName: "qrcode")
                    .font(.system(size: 100))
                    .foregroundColor(.gray.opacity(0.3))
                    .padding(.top, 40)
                
                Spacer()
                
                // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                Button(action: {
                    if !serialNumber.isEmpty {
                        completion(serialNumber)
                    }
                }) {
                    Text("–ü–æ–¥–∫–ª—é—á–∏—Ç—å")
                        .font(.headline)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(serialNumber.isEmpty ? Color.gray : Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
                .disabled(serialNumber.isEmpty)
                .padding(.horizontal)
                .padding(.bottom, 30)
            }
            .navigationBarItems(
                leading: Button("–û—Ç–º–µ–Ω–∞") {
                    presentationMode.wrappedValue.dismiss()
                }
            )
            .onAppear {
                isFocused = true
            }
        }
    }
}

// MARK: - Preview

struct BridgeSetupView_Previews: PreviewProvider {
    static var previews: some View {
        BridgeSetupView(viewModel: AppViewModel(dataPersistenceService: nil))
    }
}


