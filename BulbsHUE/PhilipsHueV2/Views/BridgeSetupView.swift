//
//  BridgeSetupView.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.
//



import SwiftUI
import AVFoundation
import CodeScanner

/// View –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hue Bridge
struct BridgeSetupView: View {
    @EnvironmentObject var viewModel: AppViewModel
    @State private var showingScanner = false
    @State private var showingManualEntry = false
    @State private var manualSerialNumber = ""
    @State private var isSearching = false
    @State private var showingLinkButtonAlert = false
    @State private var linkButtonTimer: Timer?
    @State private var linkButtonCountdown = 30
    @State private var selectedBridge: Bridge?
    
    var body: some View {
        NavigationView {
            VStack(spacing: 30) {
                // –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                VStack(spacing: 20) {
                    Image(systemName: "lightbulb.circle.fill")
                        .font(.system(size: 80))
                        .foregroundColor(.blue)
                        .symbolRenderingMode(.hierarchical)
                    
                    Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Philips Hue")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    Text("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à Hue Bridge –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                }
                .padding(.top, 50)
                
                Spacer()
                
                // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                VStack(spacing: 16) {
                    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
                    Button(action: {
                        checkCameraPermission()
                    }) {
                        HStack {
                            Image(systemName: "qrcode.viewfinder")
                                .font(.title2)
                            Text("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
                                .font(.headline)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                    }
                    
                    // –†—É—á–Ω–æ–π –≤–≤–æ–¥
                    Button(action: {
                        showingManualEntry = true
                    }) {
                        HStack {
                            Image(systemName: "keyboard")
                                .font(.title2)
                            Text("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
                                .font(.headline)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue.opacity(0.1))
                        .foregroundColor(.blue)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(Color.blue, lineWidth: 2)
                        )
                    }
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
                    Button(action: {
                        searchForBridges()
                    }) {
                        HStack {
                            if isSearching {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle())
                                    .scaleEffect(0.8)
                            } else {
                                Image(systemName: "wifi")
                                    .font(.title2)
                            }
                            Text(isSearching ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏ –≤ —Å–µ—Ç–∏")
                                .font(.headline)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.green.opacity(0.1))
                        .foregroundColor(.green)
                        .cornerRadius(12)
                        .overlay(
                            RoundedRectangle(cornerRadius: 12)
                                .stroke(Color.green, lineWidth: 2)
                        )
                    }
                    .disabled(isSearching)
                }
                .padding(.horizontal)
                
                Spacer()
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
                VStack(spacing: 8) {
                    Text("QR-–∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ Hue Bridge")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Button(action: {
                        // –û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–∫—É
                    }) {
                        Text("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
                            .font(.caption)
                            .foregroundColor(.blue)
                    }
                }
                .padding(.bottom, 30)
            }
            .navigationBarHidden(true)
        }
        .sheet(isPresented: $showingScanner) {
            QRCodeScannerView(completion: handleScannedCode)
        }
        .sheet(isPresented: $showingManualEntry) {
            ManualEntryView(serialNumber: $manualSerialNumber) { serial in
                handleManualEntry(serial)
            }
        }
        .alert("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Link", isPresented: $showingLinkButtonAlert) {
            Button("–û—Ç–º–µ–Ω–∞") {
                cancelLinkButton()
            }
        } message: {
            Text("–ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É Link –Ω–∞ –≤–∞—à–µ–º Hue Bridge.\n\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: \(linkButtonCountdown) —Å–µ–∫.")
        }
    }
    
    // MARK: - Methods
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    private func checkCameraPermission() {
        switch AVCaptureDevice.authorizationStatus(for: .video) {
        case .authorized:
            showingScanner = true
        case .notDetermined:
            AVCaptureDevice.requestAccess(for: .video) { granted in
                if granted {
                    DispatchQueue.main.async {
                        showingScanner = true
                    }
                }
            }
        case .denied, .restricted:
            // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            showCameraPermissionAlert()
        @unknown default:
            break
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã
    private func showCameraPermissionAlert() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ QR-–∫–æ–¥–∞
    private func handleScannedCode(_ code: String) {
        showingScanner = false
        
        // –ü–∞—Ä—Å–∏–º QR-–∫–æ–¥
        // –§–æ—Ä–º–∞—Ç: S#12345678 –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL
        if let bridgeId = parseBridgeId(from: code) {
            connectToBridge(withId: bridgeId)
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    private func handleManualEntry(_ serial: String) {
        showingManualEntry = false
        
        if let bridgeId = parseBridgeId(from: serial) {
            connectToBridge(withId: bridgeId)
        }
    }
    
    /// –ü–∞—Ä—Å–∏–Ω–≥ ID –º–æ—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    private func parseBridgeId(from input: String) -> String? {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        let cleaned = input.trimmingCharacters(in: .whitespacesAndNewlines)
        
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞: '\(cleaned)'")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if cleaned.hasPrefix("S#") || cleaned.hasPrefix("s#") {
            // –§–æ—Ä–º–∞—Ç S#12345678
            let bridgeId = String(cleaned.dropFirst(2))
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ S#: \(bridgeId)")
            return bridgeId
        } else if cleaned.hasPrefix("X-HM://") {
            // –§–æ—Ä–º–∞—Ç Philips Hue X-HM://ID  
            // –ü—Ä–∏–º–µ—Ä: X-HM://0024SIN3EQ0EB
            let rawId = String(cleaned.dropFirst(7))
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Bridge ID
            // –ü–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ (0024) - MAC –Ω–∞—á–∞–ª–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
            if rawId.count >= 4 {
                let macStart = String(rawId.prefix(4))
                let serial = String(rawId.dropFirst(4))
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π Bridge ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ MAC:serial
                let bridgeId = "\(macStart.lowercased())\(serial.lowercased())"
                print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ X-HM: \(rawId) -> \(bridgeId)")
                return bridgeId
            } else {
                print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ X-HM (–ø—Ä—è–º–æ): \(rawId)")
                return rawId.lowercased()
            }
        } else if cleaned.lowercased().hasPrefix("http") {
            // URL —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ID –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            if let url = URL(string: cleaned) {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if let components = URLComponents(url: url, resolvingAgainstBaseURL: false) {
                    if let idParam = components.queryItems?.first(where: { $0.name.lowercased() == "id" })?.value {
                        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ URL query: \(idParam)")
                        return idParam
                    }
                    
                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
                    if let fragment = components.fragment, !fragment.isEmpty {
                        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ URL fragment: \(fragment)")
                        return fragment
                    }
                }
                
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ID –≤ –∫–æ–Ω—Ü–µ –ø—É—Ç–∏
                let pathComponents = url.pathComponents
                if let lastComponent = pathComponents.last, lastComponent.count >= 8 {
                    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ URL path: \(lastComponent)")
                    return lastComponent
                }
            }
        } else if cleaned.range(of: #"^[A-Fa-f0-9]{12,16}$"#, options: .regularExpression) != nil {
            // –•–µ–∫—Å–∞–¥–µ—Ü–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (12-16 —Å–∏–º–≤–æ–ª–æ–≤)
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID (hex): \(cleaned)")
            return cleaned.lowercased()
        } else if cleaned.range(of: #"^[A-Za-z0-9]{8,16}$"#, options: .regularExpression) != nil {
            // –ê–ª—å—Ñ–∞–Ω—É–º–µ—Ä–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (8-16 —Å–∏–º–≤–æ–ª–æ–≤)
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID (alphanum): \(cleaned)")
            return cleaned.lowercased()
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID –∏–∑: '\(cleaned)'")
        return nil
    }
    
    /// –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏
    private func searchForBridges() {
        isSearching = true
        viewModel.discoverBridges()
        
        // –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 10) {
            isSearching = false
            
            if !viewModel.discoveredBridges.isEmpty {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
                if viewModel.discoveredBridges.count == 1 {
                    selectedBridge = viewModel.discoveredBridges.first
                    if let bridge = selectedBridge {
                        startLinkButtonProcess(for: bridge)
                    }
                } else {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ—Å—Ç–æ–≤
                }
            } else {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –º–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            }
        }
    }
    
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É –ø–æ ID
    private func connectToBridge(withId bridgeId: String) {
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–∞ —Å ID: \(bridgeId)")
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–æ—Å—Ç –≤ —Å–µ—Ç–∏
        isSearching = true
        viewModel.discoverBridges()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            isSearching = false
            
            print("üì° –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(viewModel.discoveredBridges.count)")
            for bridge in viewModel.discoveredBridges {
                print("   - –ú–æ—Å—Ç ID: \(bridge.id), IP: \(bridge.internalipaddress)")
            }
            
            // –ò—â–µ–º –º–æ—Å—Ç —Å –Ω—É–∂–Ω—ã–º ID
            if let bridge = viewModel.discoveredBridges.first(where: { $0.id == bridgeId }) {
                print("‚úÖ –ù–∞–π–¥–µ–Ω –º–æ—Å—Ç: \(bridge.id) –ø–æ –∞–¥—Ä–µ—Å—É \(bridge.internalipaddress)")
                selectedBridge = bridge
                startLinkButtonProcess(for: bridge)
            } else {
                // –ú–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                print("‚ùå –ú–æ—Å—Ç —Å ID \(bridgeId) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                self.tryDirectConnection(bridgeId: bridgeId)
            }
        }
    }
    
    /// –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func tryDirectConnection(bridgeId: String) {
        print("üîó –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridgeId)")
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º IP-–∞–¥—Ä–µ—Å–∞–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        var commonIPs: [String] = []
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤
        for subnet in ["192.168.1", "192.168.0", "10.0.0"] {
            for i in 1...10 {  // –£–º–µ–Ω—å—à–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                commonIPs.append("\(subnet).\(i)")
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
        commonIPs.append(contentsOf: [
            "192.168.1.1", "192.168.0.1", "10.0.0.1", 
            "192.168.1.254", "192.168.0.254",
            "192.168.2.1", "192.168.100.1"
        ])
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        commonIPs = Array(Set(commonIPs))
        
        // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π IP –∞–¥—Ä–µ—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ç—å
        var foundBridge = false
        for (index, ip) in commonIPs.enumerated() {
            DispatchQueue.main.asyncAfter(deadline: .now() + Double(index) * 0.1) {
                if !foundBridge {
                    self.checkBridgeAtIP(ip: ip, expectedId: bridgeId)
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        DispatchQueue.main.asyncAfter(deadline: .now() + 15) {
            if self.selectedBridge == nil {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ—Å—Ç \(bridgeId)")
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                self.showManualIPEntry()
            }
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –≤–≤–æ–¥ IP –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é
    private func showManualIPEntry() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å alert –¥–ª—è –≤–≤–æ–¥–∞ IP –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é
        print("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ ID –º–æ—Å—Ç–æ–≤ (–≥–∏–±–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
    private func bridgeIdMatches(config: String, expected: String) -> Bool {
        let configLower = config.lowercased().replacingOccurrences(of: ":", with: "")
        let expectedLower = expected.lowercased().replacingOccurrences(of: ":", with: "")
        
        // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if configLower == expectedLower {
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –æ–¥–Ω–æ –≤ –¥—Ä—É–≥–æ–º
        if configLower.contains(expectedLower) || expectedLower.contains(configLower) {
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6-8 —Å–∏–º–≤–æ–ª–æ–≤ (—á–∞—Å—Ç–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
        if configLower.count >= 6 && expectedLower.count >= 6 {
            let configSuffix = String(configLower.suffix(6))
            let expectedSuffix = String(expectedLower.suffix(6))
            if configSuffix == expectedSuffix {
                return true
            }
        }
        
        return false
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ—Å—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP –∞–¥—Ä–µ—Å—É
    private func checkBridgeAtIP(ip: String, expectedId: String) {
        // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ HTTPS
        checkBridgeAtIPWithProtocol(ip: ip, expectedId: expectedId, useHTTPS: true) { success in
            if !success {
                // –ï—Å–ª–∏ HTTPS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º HTTP
                self.checkBridgeAtIPWithProtocol(ip: ip, expectedId: expectedId, useHTTPS: false) { _ in }
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ—Å—Ç –ø–æ IP —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    private func checkBridgeAtIPWithProtocol(ip: String, expectedId: String, useHTTPS: Bool, completion: @escaping (Bool) -> Void) {
        let protocolIP = useHTTPS ? "https" : "http"
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
        let endpoints = [
            "\(protocolIP)://\(ip)/api/config",           // API v1
            "\(protocolIP)://\(ip)/clip/v2/resource/config", // API v2
            "\(protocolIP)://\(ip)/description.xml"       // UPnP
        ]
        
        var foundBridge = false
        
        for endpoint in endpoints {
            guard let url = URL(string: endpoint) else { continue }
            
            var request = URLRequest(url: url)
            request.timeoutInterval = 3.0
            
            let task = URLSession.shared.dataTask(with: request) {  data, response, error in
                guard !foundBridge,
                      let data = data,
                      error == nil else {
                    return
                }
                
                var bridgeConfig: String?
                
                if endpoint.contains("description.xml") {
                    // UPnP XML response
                    if let xmlString = String(data: data, encoding: .utf8),
                       xmlString.contains("Philips hue") || xmlString.contains("hue bridge") {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ XML
                        let pattern = #"<serialNumber>([^<]+)</serialNumber>"#
                        if let range = xmlString.range(of: pattern, options: .regularExpression) {
                            let match = String(xmlString[range])
                            bridgeConfig = match.replacingOccurrences(of: "<serialNumber>", with: "")
                                              .replacingOccurrences(of: "</serialNumber>", with: "")
                        }
                    }
                } else {
                    // JSON response
                    if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        bridgeConfig = json["bridgeid"] as? String ??
                                     json["mac"] as? String ??
                                     json["serialnumber"] as? String
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ ID
                if let bridgeConfig = bridgeConfig,
                   self.bridgeIdMatches(config: bridgeConfig, expected: expectedId) == true {
                    
                    foundBridge = true
                    print("‚úÖ –ù–∞–π–¥–µ–Ω –º–æ—Å—Ç –ø–æ –ø—Ä—è–º–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é: \(ip) (\(protocolIP.uppercased()))")
                    
                    DispatchQueue.main.async {
                        let bridge = Bridge(
                            id: expectedId,
                            internalipaddress: ip,
                            port: useHTTPS ? 443 : 80
                        )
                        self.selectedBridge = bridge
                        self.startLinkButtonProcess(for: bridge)
                        completion(true)
                    }
                    return
                }
            }
            
            task.resume()
        }
        
        // –ï—Å–ª–∏ –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            if !foundBridge {
                completion(false)
            }
        }
    }
    
    /// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Link
    private func startLinkButtonProcess(for bridge: Bridge) {
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –º–æ—Å—Ç–æ–º: \(bridge.id)")
        
        selectedBridge = bridge
        showingLinkButtonAlert = true
        linkButtonCountdown = 30
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É
        print("üìû –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É –ø–æ –∞–¥—Ä–µ—Å—É: \(bridge.internalipaddress)")
        viewModel.connectToBridge(bridge)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            linkButtonCountdown -= 1
            
            if linkButtonCountdown % 3 == 0 {
                // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                print("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ—Å—Ç–∞–ª–æ—Å—å: \(linkButtonCountdown) —Å–µ–∫)")
                attemptCreateUser()
            }
            
            if linkButtonCountdown <= 0 {
                print("‚è∞ –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ")
                cancelLinkButton()
            }
        }
    }
    
    /// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func attemptCreateUser() {
        viewModel.createUserEnhanced(appName: "BulbsHUE") { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let success):
                    if success {
                        self.cancelLinkButton()
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
                        self.viewModel.saveCredentials()
                        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É!")
                    }
                case .failure(let error):
                    if case LinkButtonError.notPressed = error {
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ - –∫–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞
                        print("–ö–Ω–æ–ø–∫–∞ Link –Ω–µ –Ω–∞–∂–∞—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    } else {
                        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error.localizedDescription)")
                        self.cancelLinkButton()
                    }
                }
            }
        }
    }
    
    /// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Link Button
    private func cancelLinkButton() {
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        showingLinkButtonAlert = false
        linkButtonCountdown = 30
    }
}

// MARK: - QR Code Scanner View

struct QRCodeScannerView: View {
    let completion: (String) -> Void
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            CodeScannerView(
                codeTypes: [.qr],
                scanMode: .continuous,
                showViewfinder: true,
                simulatedData: "S#12345678", // –î–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
                completion: handleScan
            )
            .navigationTitle("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
            .navigationBarItems(
                leading: Button("–û—Ç–º–µ–Ω–∞") {
                    presentationMode.wrappedValue.dismiss()
                }
            )
        }
    }
    
    private func handleScan(response: Result<ScanResult, ScanError>) {
        switch response {
        case .success(let result):
            completion(result.string)
        case .failure(let error):
            print("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
        }
    }
}

// MARK: - Manual Entry View

struct ManualEntryView: View {
    @Binding var serialNumber: String
    let completion: (String) -> Void
    @Environment(\.presentationMode) var presentationMode
    @FocusState private var isFocused: Bool
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Text("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
                    .font(.headline)
                    .padding(.top, 40)
                
                Text("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ Hue Bridge –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å S#")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                // –ü–æ–ª–µ –≤–≤–æ–¥–∞
                VStack(alignment: .leading, spacing: 8) {
                    Text("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    TextField("S#12345678", text: $serialNumber)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .autocapitalization(.allCharacters)
                        .disableAutocorrection(true)
                        .focused($isFocused)
                }
                .padding(.horizontal)
                .padding(.top, 20)
                
                // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–ø–æ–¥—Å–∫–∞–∑–∫–∞
                Image(systemName: "qrcode")
                    .font(.system(size: 100))
                    .foregroundColor(.gray.opacity(0.3))
                    .padding(.top, 40)
                
                Spacer()
                
                // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                Button(action: {
                    if !serialNumber.isEmpty {
                        completion(serialNumber)
                    }
                }) {
                    Text("–ü–æ–¥–∫–ª—é—á–∏—Ç—å")
                        .font(.headline)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(serialNumber.isEmpty ? Color.gray : Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
                .disabled(serialNumber.isEmpty)
                .padding(.horizontal)
                .padding(.bottom, 30)
            }
            .navigationBarItems(
                leading: Button("–û—Ç–º–µ–Ω–∞") {
                    presentationMode.wrappedValue.dismiss()
                }
            )
            .onAppear {
                isFocused = true
            }
        }
    }
}

// MARK: - Preview


#Preview {
    @Previewable @EnvironmentObject var viewModel: AppViewModel
    BridgeSetupView(viewModel: _viewModel)
        .environmentObject(AppViewModel())
}
