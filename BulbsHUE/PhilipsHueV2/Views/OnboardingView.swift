//
//  OnboardingView.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.
//

import SwiftUI
// import CodeScanner // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è QR-–∫–æ–¥–∞

/// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hue Bridge
struct OnboardingView: View {
    @Environment(AppViewModel.self) private var appViewModel
    @State private var viewModel: OnboardingViewModel
    
    init() {
        // Initialize with temporary AppViewModel, will be configured in onAppear
        self._viewModel = State(initialValue: OnboardingViewModel(appViewModel: AppViewModel()))
    }
    
    var body: some View {
        NavigationView {
            ZStack {
                // –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
                LinearGradient(
                    gradient: Gradient(colors: [
                        Color(red: 0.1, green: 0.15, blue: 0.35), // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
                        Color(red: 0.05, green: 0.1, blue: 0.25)  // –ï—â–µ —Ç–µ–º–Ω–µ–µ
                    ]),
                    startPoint: .top,
                    endPoint: .bottom
                )
                .ignoresSafeArea()
                
                VStack(spacing: 0) {
                    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
                    HStack {
                        Button(action: {
                            if viewModel.currentStep != .welcome {
                                viewModel.previousStep()
                            }
                        }) {
                            Image(systemName: "chevron.left")
                                .font(.title2)
                                .foregroundColor(.white)
                                .padding()
                        }
                        
                        Spacer()
                    }
                    .opacity(viewModel.currentStep == .welcome ? 0 : 1)
                    
                    Spacer()
                    
                    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
                    contentForCurrentStep
                    
                    Spacer()
                }
            }
            .navigationBarHidden(true)
            .onAppear {
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OnboardingViewModel —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º AppViewModel –∏–∑ Environment
                viewModel.configureAppViewModel(appViewModel)
            }
            // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –∞–ª–µ—Ä—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º body OnboardingView:

//            .alert("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Hue Bridge", isPresented: $viewModel.showLinkButtonAlert) {
//                if viewModel.linkButtonPressed {
//                    Button("OK") {
//                        viewModel.showLinkButtonAlert = false
//                    }
//                } else {
//                    Button("–û—Ç–º–µ–Ω–∞") {
//                        viewModel.cancelLinkButton()
//                    }
//                }
//            } message: {
//                if viewModel.linkButtonPressed {
//                    Text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
//                } else {
//                    VStack {
//                        Text("üëÜ –ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É Link –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ Hue Bridge")
//                        Text("")
//                        if viewModel.linkButtonCountdown > 0 {
//                            Text("‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: \(viewModel.linkButtonCountdown) —Å–µ–∫")
//                        }
//                    }
//                }
//            }
        }
        // MARK: - QR Code Sheets (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        /*
         .sheet(isPresented: $viewModel.showQRScanner) {
         QRCodeScannerView { code in
         viewModel.handleScannedQR(code)
         }
         }
         .alert("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã", isPresented: $viewModel.showCameraPermissionAlert) {
         Button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
         viewModel.openAppSettings()
         }
         Button("–û—Ç–º–µ–Ω–∞", role: .cancel) { }
         } message: {
         Text("–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.")
         }
         */
        // –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–π –∞–ª–µ—Ä—Ç - iOS —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        // .alert("–î–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏", isPresented: $viewModel.showLocalNetworkAlert) {
        //        .alert("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Hue Bridge", isPresented: $viewModel.showLinkButtonAlert) {
        //            Button("–ì–æ—Ç–æ–≤–æ") {
        //                viewModel.showLinkButtonAlert = false
        //                viewModel.nextStep() // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ linkButtonStepView
        //            }
        //            Button("–û—Ç–º–µ–Ω–∞", role: .cancel) {
        //                viewModel.cancelLinkButton()
        //            }
        //        } message: {
        //            Text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –º–æ—Å—Ç—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
        //        }
    }
    
    // MARK: - Content Views
    
    @ViewBuilder
    private var contentForCurrentStep: some View {
        switch viewModel.currentStep {
        case .welcome:
            welcomeStepView
        case .localNetworkPermission:
            localNetworkPermissionStepView
        case .searchBridges:
            searchBridgesStepView
        case .linkButton:
            linkButtonStepView
        case .connected:
            connectedStepView
        }
        
        // MARK: - QR Code Steps (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        /*
         case .cameraPermission:
         cameraPermissionStepView
         case .qrScanner:
         // –≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
         EmptyView()
         */
    }
    
    // MARK: - Step Views
    
    /// –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
    private var welcomeStepView: some View {
        VStack(spacing: 40) {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Hue Bridge
            bridgeImageView
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            VStack(spacing: 16) {
                Text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å Hue Bridge?")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                
                Text("Hue Bridge ‚Äî —ç—Ç–æ —É–º–Ω—ã–π —à–ª—é–∑, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π Hue. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–µ–≥–æ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–¥–Ω–µ–µ.")
                    .font(.body)
                    .foregroundColor(.white.opacity(0.8))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 20)
                
                // –ù–æ–≤–æ–µ: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
                HStack(alignment: .top, spacing: 12) {
                    Image(systemName: "network")
                        .foregroundColor(.cyan)
                        .font(.title3)
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("–ù–∞–º –Ω—É–∂–Ω–æ –í–∞—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∏—Å–∫ —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
                            .fontWeight(.semibold)
                            .foregroundColor(.white)
                        
                        Text("–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è \"–ü–æ–∏—Å–∫\" iOS –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å \"–†–∞–∑—Ä–µ—à–∏—Ç—å\".")
                            .foregroundColor(.white.opacity(0.8))
                            .font(.caption)
                    }
                }
                .padding()
                .background(Color.white.opacity(0.1))
                .cornerRadius(12)
            }
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            VStack(spacing: 16) {
                Button("–î–∞") {
                    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–∫—Ä–∞–Ω–µ
                    viewModel.requestLocalNetworkPermissionOnWelcome()
                }
                .buttonStyle(PrimaryButtonStyle())
                
                Button("–ù–µ—Ç") {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
                    appViewModel.showSetup = false
                }
                .buttonStyle(SecondaryButtonStyle())
            }
            .padding(.horizontal, 40)
        }
//        .alert("–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", isPresented: $viewModel.showPermissionAlert) {
//            Button("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
//                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//                if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
//                    UIApplication.shared.open(settingsUrl)
//                }
//            }
//            Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å") {
//                viewModel.requestLocalNetworkPermissionOnWelcome()
//            }
//            Button("–û—Ç–º–µ–Ω–∞", role: .cancel) { }
//        } message: {
//            Text("–î–ª—è –ø–æ–∏—Å–∫–∞ Hue Bridge –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ \"–†–∞–∑—Ä–µ—à–∏—Ç—å\" –≤ –¥–∏–∞–ª–æ–≥–µ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å > –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å.")
//        }
    }
    

    
    /// –≠–∫—Ä–∞–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    private var localNetworkPermissionStepView: some View {
        VStack(spacing: 40) {
            bridgeWithRouterImageView
            
            VStack(spacing: 16) {
                Text("–ü–æ–¥–∫–ª—é—á–∏—Ç—å Hue Bridge")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                
                VStack(alignment: .leading, spacing: 12) {
                    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                    (Text("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Hue Bridge –∫ –ø–∏—Ç–∞–Ω–∏—é, –∑–∞—Ç–µ–º —Å –ø–æ–º–æ—â—å—é –ø–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ –∫–∞–±–µ–ª—è —Å–æ–µ–¥–∏–Ω–∏—Ç–µ –µ–≥–æ —Å–æ —Å–≤–æ–∏–º ")
                        .foregroundColor(.white.opacity(0.8))
                     +
                     Text("–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º Wi-Fi")
                        .fontWeight(.semibold)
                        .foregroundColor(.white)
                     +
                     Text(". –í–∞—à –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Hue Bridge –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω ")
                        .foregroundColor(.white.opacity(0.8))
                     +
                     Text("–∫ —Ç–æ–π –∂–µ —Å–µ—Ç–∏ Wi-Fi")
                        .fontWeight(.semibold)
                        .foregroundColor(.white)
                     +
                     Text(", —á—Ç–æ –∏ –≤–∞—à–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
                        .foregroundColor(.white.opacity(0.8)))
                    
                  
                }
                .font(.body)
                .multilineTextAlignment(.leading)
                .padding(.horizontal, 20)
            }
            
            VStack(spacing: 16) {
                Button("–ü–æ–∏—Å–∫") {
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–∫—Ä–∞–Ω–µ)
                    viewModel.nextStep()
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞, –∑–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
                    Task { @MainActor in
                        try await Task.sleep(for: .milliseconds(300))
                        viewModel.startBridgeSearch()
                    }
                }
                .buttonStyle(PrimaryButtonStyle())
                
                Button("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å") {
                    viewModel.showLocalNetworkInfo()
                }
            }
            .buttonStyle(SecondaryButtonStyle())
        }
        .padding(.horizontal, 40)
    }
    
    
    /// –≠–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤
    private var searchBridgesStepView: some View {
        VStack(spacing: 40) {
            bridgeWithRouterImageView
            
            VStack(spacing: 16) {
                Text("–ü–æ–∏—Å–∫ Hue Bridge")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                
                if viewModel.isSearchingBridges {
                    VStack(spacing: 12) {
                        HStack(spacing: 12) {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: .cyan))
                                .scaleEffect(1.2)
                            
                            Text("–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
                                .font(.body)
                                .fontWeight(.medium)
                                .foregroundColor(.white)
                        }
                        
                        Text("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.6))
                    }
                } else if !viewModel.discoveredBridges.isEmpty {
                    VStack(spacing: 8) {
                        HStack(spacing: 8) {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                                .font(.title3)
                            Text("–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: \(viewModel.discoveredBridges.count)")
                                .font(.body)
                                .fontWeight(.medium)
                                .foregroundColor(.white)
                        }
                        
                        Text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à Hue Bridge –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.8))
                    }
                } else {
                    VStack(spacing: 8) {
                        Text("–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–∏—Å–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                            .font(.body)
                            .fontWeight(.medium)
                            .foregroundColor(.white)
                        
                        Text("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Hue Bridge –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–π –∂–µ —Å–µ—Ç–∏ Wi-Fi")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.8))
                            .multilineTextAlignment(.center)
                    }
                }
            }
            
            if !viewModel.isSearchingBridges {
                if viewModel.discoveredBridges.isEmpty {
                    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–≥–¥–∞ –º–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    VStack(spacing: 16) {
                        Button("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫") {
                            viewModel.startBridgeSearch()
                        }
                        .buttonStyle(PrimaryButtonStyle())
                        .padding(.horizontal, 40)
                        
                        Button("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å") {
                            viewModel.showLocalNetworkInfo()
                        }
                        .foregroundColor(.white.opacity(0.8))
                    }
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—Å—Ç—ã –∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
                    VStack(spacing: 20) {
                        // –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
                        VStack(spacing: 12) {
                            ForEach(viewModel.discoveredBridges, id: \.id) { bridge in
                                HStack(spacing: 16) {
                                    Image(systemName: "wifi.router.fill")
                                        .foregroundColor(.cyan)
                                        .font(.title2)
                                    
                                    VStack(alignment: .leading, spacing: 4) {
                                        Text("Philips Hue Bridge")
                                            .fontWeight(.semibold)
                                            .foregroundColor(.white)
                                        Text("IP: \(bridge.internalipaddress)")
                                            .font(.caption)
                                            .foregroundColor(.white.opacity(0.8))
                                        if !bridge.id.isEmpty {
                                            Text("ID: \(bridge.id.prefix(8))...")
                                                .font(.caption2)
                                                .foregroundColor(.white.opacity(0.6))
                                        }
                                    }
                                    
                                    Spacer()
                                    
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.green)
                                        .font(.title2)
                                }
                                .padding()
                                .background(Color.white.opacity(0.1))
                                .cornerRadius(12)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.cyan.opacity(0.3), lineWidth: 1)
                                )
                                .onTapGesture {
                                    viewModel.selectBridge(bridge)
                                }
                            }
                        }
                        .padding(.horizontal, 20)
                        
                        VStack(spacing: 12) {
                            Button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è") {
                                if let bridge = viewModel.discoveredBridges.first {
                                    viewModel.selectBridge(bridge)
                                }
                                viewModel.nextStep()
                            }
                            .buttonStyle(PrimaryButtonStyle())
                            .padding(.horizontal, 40)
                            
                            Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫") {
                                viewModel.startBridgeSearch()
                            }
                            .foregroundColor(.white.opacity(0.8))
                        }
                    }
                }
            }
        }
        .onAppear {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞ searchBridges
            if !viewModel.isSearchingBridges && viewModel.discoveredBridges.isEmpty {
                print("üì± SearchBridges —ç–∫—Ä–∞–Ω –ø–æ—è–≤–∏–ª—Å—è - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫")
                Task { @MainActor in
                    try await Task.sleep(for: .milliseconds(500))
                    viewModel.startBridgeSearch()
                }
            }
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–æ: —ç–∫—Ä–∞–Ω –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    
    /// –≠–∫—Ä–∞–Ω –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Link —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
    private var linkButtonStepView: some View {
        VStack(spacing: 40) {
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ—Å—Ç–∞
            ZStack {
                bridgeImageView
                
                // –ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ –∫–æ–ª—å—Ü–æ –≤–æ–∫—Ä—É–≥ –∫–Ω–æ–ø–∫–∏ Link
                if viewModel.isConnecting && !viewModel.linkButtonPressed {
                    Circle()
                        .stroke(Color.cyan, lineWidth: 2)
                        .frame(width: 50, height: 50)
                        .scaleEffect(viewModel.isConnecting ? 1.3 : 1.0)
                        .opacity(viewModel.isConnecting ? 0.3 : 1.0)
                        .animation(
                            Animation.easeInOut(duration: 1.5)
                                .repeatForever(autoreverses: true),
                            value: viewModel.isConnecting
                        )
                        .offset(y: 30) // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–µ Link
                }
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞
                if viewModel.linkButtonPressed {
                    VStack {
                        HStack {
                            Spacer()
                            Image(systemName: "checkmark.circle.fill")
                                .font(.title)
                                .foregroundColor(.green)
                                .background(Color.white.clipShape(Circle()))
                        }
                        Spacer()
                    }
                    .frame(width: 120, height: 120)
                    .offset(x: 30, y: -30)
                    .transition(.scale.combined(with: .opacity))
                    .animation(.spring(), value: viewModel.linkButtonPressed)
                }
            }
            
            VStack(spacing: 16) {
                if viewModel.linkButtonPressed {
                    // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    Text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                        .font(.title2)
                        .fontWeight(.semibold)
                        .foregroundColor(.green)
                        .transition(.opacity)
                    
                    Text("Hue Bridge —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
                        .font(.body)
                        .foregroundColor(.white.opacity(0.8))
                        .multilineTextAlignment(.center)
                        .padding(.horizontal, 20)
                    
                } else if viewModel.isConnecting {
                    // –ü—Ä–æ—Ü–µ—Å—Å –æ–∂–∏–¥–∞–Ω–∏—è
                    Text("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        .font(.title2)
                        .fontWeight(.semibold)
                        .foregroundColor(.white)
                    
                    VStack(spacing: 12) {
                        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                        HStack(spacing: 8) {
                            Image(systemName: "hand.point.up.fill")
                                .foregroundColor(.cyan)
                                .font(.title3)
                                .symbolEffect(.pulse, value: viewModel.isConnecting)
                            
                            Text("–ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É Link")
                                .font(.body)
                                .fontWeight(.medium)
                                .foregroundColor(.white)
                        }
                        
                        Text("–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≤–∞—à–µ–≥–æ Hue Bridge")
                            .font(.caption)
                            .foregroundColor(.white.opacity(0.8))
                        
                        // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
                        if viewModel.linkButtonCountdown > 0 {
                            HStack(spacing: 4) {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                    .scaleEffect(0.8)
                                
                                Text("–û—Å—Ç–∞–ª–æ—Å—å: \(viewModel.linkButtonCountdown) —Å–µ–∫")
                                    .font(.caption)
                                    .foregroundColor(.white.opacity(0.6))
                            }
                            .padding(.top, 8)
                        }
                    }
                    .padding(.horizontal, 20)
                    
                } else if let error = viewModel.connectionError {
                    // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    Text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        .font(.title2)
                        .fontWeight(.semibold)
                        .foregroundColor(.red)
                    
                    Text(error)
                        .font(.body)
                        .foregroundColor(.white.opacity(0.8))
                        .multilineTextAlignment(.center)
                        .padding(.horizontal, 20)
                    
                } else {
                    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    Text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É")
                        .font(.title2)
                        .fontWeight(.semibold)
                        .foregroundColor(.white)
                    
                    Text("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                        .font(.body)
                        .foregroundColor(.white.opacity(0.8))
                        .multilineTextAlignment(.center)
                        .padding(.horizontal, 20)
                }
            }
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            VStack(spacing: 16) {
                if viewModel.linkButtonPressed {
                    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    Button("–î–∞–ª–µ–µ") {
                        viewModel.nextStep()
                    }
                    .buttonStyle(PrimaryButtonStyle())
                    .transition(.opacity)
                    
                } else if viewModel.isConnecting {
                    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Button("–û—Ç–º–µ–Ω–∞") {
                        viewModel.cancelLinkButton()
                        viewModel.previousStep()
                    }
                    .buttonStyle(SecondaryButtonStyle())
                    
                } else if viewModel.connectionError != nil {
                    // –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                    Button("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É") {
                        viewModel.connectionError = nil
                        viewModel.startBridgeConnection()
                    }
                    .buttonStyle(PrimaryButtonStyle())
                    
                    Button("–ù–∞–∑–∞–¥") {
                        viewModel.connectionError = nil
                        viewModel.previousStep()
                    }
                    .buttonStyle(SecondaryButtonStyle())
                    
                } else {
                    // –ù–∞—á–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    Button("–ù–∞—á–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ") {
                        viewModel.startBridgeConnection()
                    }
                    .buttonStyle(PrimaryButtonStyle())
                    
                    Button("–ù–∞–∑–∞–¥") {
                        viewModel.previousStep()
                    }
                    .buttonStyle(SecondaryButtonStyle())
                }
            }
            .padding(.horizontal, 40)
            .animation(.easeInOut, value: viewModel.linkButtonPressed)
            .animation(.easeInOut, value: viewModel.isConnecting)
        }
        .onAppear {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
            if viewModel.selectedBridge != nil && !viewModel.isConnecting {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
                Task { @MainActor in
                    try await Task.sleep(for: .milliseconds(500))
                    viewModel.startBridgeConnection()
                }
            }
        }
        .onDisappear {
            // –ï—Å–ª–∏ —É—Ö–æ–¥–∏–º —Å —ç–∫—Ä–∞–Ω–∞ - –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if viewModel.isConnecting && !viewModel.linkButtonPressed {
                viewModel.cancelLinkButton()
            }
        }
    }
    
    /// –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫–∞–∫ –Ω–∞ —Å–µ–¥—å–º–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
    private var connectedStepView: some View {
        VStack(spacing: 40) {
            // –ò–∫–æ–Ω–∫–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –º–æ—Å—Ç–æ–º
            ZStack {
                Circle()
                    .stroke(Color.white.opacity(0.2), lineWidth: 2)
                    .frame(width: 200, height: 200)
                
                bridgeImageView
                    .scaleEffect(0.8)
                
                // –ó–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
                VStack {
                    HStack {
                        Spacer()
                        Image(systemName: "checkmark.circle.fill")
                            .font(.title)
                            .foregroundColor(.green)
                            .background(Color.white.clipShape(Circle()))
                    }
                    Spacer()
                }
                .frame(width: 200, height: 200)
                .offset(x: 30, y: -30)
            }
            
            VStack(spacing: 16) {
                Text("–ü–æ–¥–∫–ª—é—á–µ–Ω –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Hue")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.white)
                
                Text("–í–∞—à Hue Bridge —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º!")
                    .font(.body)
                    .foregroundColor(.white.opacity(0.8))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 20)
            }
            
            Button("–î–∞–ª–µ–µ") {
                viewModel.nextStep() // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            }
            .buttonStyle(PrimaryButtonStyle())
            .padding(.horizontal, 40)
        }
    }
    
    // MARK: - Helper Views
    
    /// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Hue Bridge (–±–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Å —Ç—Ä–µ–º—è —Ç–æ—á–∫–∞–º–∏ –∏ –∫–æ–ª—å—Ü–æ–º)
    private var bridgeImageView: some View {
        ZStack {
            // –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ –º–æ—Å—Ç–∞
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.white)
                .frame(width: 120, height: 120)
                .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
            
            VStack(spacing: 20) {
                // –¢—Ä–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏
                HStack(spacing: 16) {
                    Circle()
                        .fill(Color.cyan.opacity(0.6))
                        .frame(width: 8, height: 8)
                    Circle()
                        .fill(Color.cyan.opacity(0.4))
                        .frame(width: 8, height: 8)
                    Circle()
                        .fill(Color.cyan.opacity(0.2))
                        .frame(width: 8, height: 8)
                }
                
                // –ö–Ω–æ–ø–∫–∞ Link (–∫–æ–ª—å—Ü–æ)
                Circle()
                    .stroke(Color.cyan, lineWidth: 3)
                    .frame(width: 40, height: 40)
            }
        }
    }
    
    /// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Hue Bridge —Å —Ä–æ—É—Ç–µ—Ä–æ–º (–¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    private var bridgeWithRouterImageView: some View {
        HStack(spacing: 30) {
            // Hue Bridge
            bridgeImageView
            
            // –†–æ—É—Ç–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            ZStack {
                RoundedRectangle(cornerRadius: 8)
                    .fill(Color.blue.opacity(0.8))
                    .frame(width: 60, height: 40)
                
                VStack(spacing: 4) {
                    Rectangle()
                        .fill(Color.white)
                        .frame(width: 30, height: 2)
                    Rectangle()
                        .fill(Color.white)
                        .frame(width: 20, height: 8)
                    Rectangle()
                        .fill(Color.white)
                        .frame(width: 30, height: 2)
                }
            }
            
            // –ö–∞–±–µ–ª—å (–≤–æ–ª–Ω–∏—Å—Ç–∞—è –ª–∏–Ω–∏—è)
            Path { path in
                path.move(to: CGPoint(x: 0, y: 20))
                path.addQuadCurve(to: CGPoint(x: 30, y: 20), control: CGPoint(x: 15, y: 10))
            }
            .stroke(Color.white.opacity(0.6), lineWidth: 2)
            .frame(width: 30, height: 40)
        }
    }
    
}
// MARK: - Button Styles

/// –°—Ç–∏–ª—å –≤—Ç–æ—Ä–∏—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å –æ–±–≤–æ–¥–∫–æ–π)
struct SecondaryButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .font(.headline)
            .foregroundColor(.white.opacity(0.8))
            .frame(maxWidth: .infinity)
            .frame(height: 50)
            .background(Color.clear)
            .cornerRadius(25)
            .overlay(
                RoundedRectangle(cornerRadius: 25)
                    .stroke(Color.white.opacity(0.3), lineWidth: 1)
            )
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
            .animation(.easeInOut(duration: 0.1), value: configuration.isPressed)
    }
}



// MARK: - Preview

//#Preview {
//    let appViewModel = AppViewModel(dataPersistenceService: nil)
//    appViewModel.showSetup = true
//    
//    OnboardingView(appViewModel: appViewModel)
//        .environment(appViewModel)
//}
// –°—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ OnboardingView –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
struct PrimaryButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .font(.headline)
            .foregroundColor(.white)
            .frame(maxWidth: .infinity)
            .frame(height: 50)
            .background(Color.blue)
            .cornerRadius(25)
            .scaleEffect(configuration.isPressed ? 0.95 : 1.0)
    }
}


// MARK: - QR Camera Permission Step (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
/*
 /// –≠–∫—Ä–∞–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (–∫–∞–∫ –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
 private var cameraPermissionStepView: some View {
 VStack(spacing: 40) {
 bridgeImageView
 
 VStack(spacing: 16) {
 Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´Hue¬ª –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.")
 .font(.title3)
 .fontWeight(.semibold)
 .foregroundColor(.white)
 .multilineTextAlignment(.center)
 
 Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É –∫–∞–º–µ—Ä—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç. –¥.")
 .font(.body)
 .foregroundColor(.white.opacity(0.8))
 .multilineTextAlignment(.center)
 .padding(.horizontal, 20)
 }
 
 VStack(spacing: 16) {
 Button("–†–∞–∑—Ä–µ—à–∏—Ç—å") {
 viewModel.requestCameraPermission()
 }
 .buttonStyle(PrimaryButtonStyle())
 
 Button("–ù–µ —Ä–∞–∑—Ä–µ—à–∞—Ç—å") {
 viewModel.showCameraPermissionAlert = true
 }
 .buttonStyle(SecondaryButtonStyle())
 }
 .padding(.horizontal, 40)
 }
 }
 */

// –§–∞–π–ª: BulbsHUE/PhilipsHueV2/Views/OnboardingView.swift
// –û–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ linkButtonStepView (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 600)




