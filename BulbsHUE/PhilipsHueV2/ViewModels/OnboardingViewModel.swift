//
//  OnboardingViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.
//

import SwiftUI
import AVFoundation
import Combine

/// ViewModel –¥–ª—è OnboardingView
class OnboardingViewModel: ObservableObject {
    // MARK: - Published Properties
    
    @Published var currentStep: OnboardingStep = .welcome
    @Published var showQRScanner = false
    @Published var showCameraPermissionAlert = false
    @Published var showLocalNetworkAlert = false
    @Published var showLinkButtonAlert = false
    @Published var isSearchingBridges = false
    @Published var linkButtonCountdown = 30
    @Published var discoveredBridges: [Bridge] = []
    @Published var selectedBridge: Bridge?
    
    // MARK: - Private Properties
    
    private var appViewModel: AppViewModel
    private var linkButtonTimer: Timer?
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    
    init(appViewModel: AppViewModel) {
        self.appViewModel = appViewModel
        setupBindings()
    }
    
    // MARK: - Setup
    
    private func setupBindings() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        appViewModel.$connectionStatus
            .receive(on: DispatchQueue.main)
            .sink { [weak self] status in
                switch status {
                case .connected:
                    self?.currentStep = .connected
                case .discovered:
                    if !(self?.discoveredBridges.isEmpty ?? true) {
                        self?.currentStep = .bridgeFound
                    }
                default:
                    break
                }
            }
            .store(in: &cancellables)
        
        // –°–ª—É—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—Å—Ç—ã
        appViewModel.$discoveredBridges
            .receive(on: DispatchQueue.main)
            .sink { [weak self] bridges in
                self?.discoveredBridges = bridges
                if !bridges.isEmpty && self?.currentStep == .searchBridges {
                    self?.currentStep = .bridgeFound
                }
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Navigation
    
    func nextStep() {
        switch currentStep {
        case .welcome:
            currentStep = .cameraPermission
        case .cameraPermission:
            // –ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
            requestCameraPermission()
        case .qrScanner:
            currentStep = .localNetworkPermission
        case .localNetworkPermission:
            currentStep = .searchBridges
        case .searchBridges:
            if !discoveredBridges.isEmpty {
                currentStep = .bridgeFound
            }
        case .bridgeFound:
            currentStep = .linkButton
        case .linkButton:
            currentStep = .connected
        case .connected:
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            appViewModel.showSetup = false
        }
    }
    
    func previousStep() {
        switch currentStep {
        case .welcome:
            break
        case .cameraPermission:
            currentStep = .welcome
        case .qrScanner:
            currentStep = .cameraPermission
        case .localNetworkPermission:
            currentStep = .qrScanner
        case .searchBridges:
            currentStep = .localNetworkPermission
        case .bridgeFound:
            currentStep = .searchBridges
        case .linkButton:
            currentStep = .bridgeFound
        case .connected:
            currentStep = .linkButton
        }
    }
    
    // MARK: - Camera Permission
    
    func requestCameraPermission() {
        switch AVCaptureDevice.authorizationStatus(for: .video) {
        case .authorized:
            print("üì∑ –ö–∞–º–µ—Ä–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä")
            showQRScanner = true
        case .notDetermined:
            print("üì∑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
            AVCaptureDevice.requestAccess(for: .video) { [weak self] granted in
                DispatchQueue.main.async {
                    if granted {
                        print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ")
                        self?.showQRScanner = true
                    } else {
                        print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                        self?.showCameraPermissionAlert = true
                    }
                }
            }
        case .denied, .restricted:
            print("‚ùå –ö–∞–º–µ—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
            showCameraPermissionAlert = true
        @unknown default:
            break
        }
    }
    
    // MARK: - QR Code Handling
    
    func handleScannedQR(_ code: String) {
        print("üì± OnboardingViewModel: –ü–æ–ª—É—á–µ–Ω QR-–∫–æ–¥: '\(code)'")
        showQRScanner = false
        
        let cleanedCode = code.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // ‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ HomeKit QR
        if cleanedCode.hasPrefix("X-HM://") {
            print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω HomeKit QR-–∫–æ–¥")
            
            // –ü—Ä–æ–±—É–µ–º, –≤–¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å bridgeId (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–¥)
            if let bridgeId = parseBridgeId(from: code) {
                print("‚úÖ Bridge ID —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: \(bridgeId)")
                searchForSpecificBridge(bridgeId: bridgeId)
            } else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –º–æ—Å—Ç–æ–≤
                startBridgeSearch()
            }

            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            currentStep = .searchBridges

        } else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞")
            // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å
        }
    } 
    /// –ü–∞—Ä—Å–∏–Ω–≥ ID –º–æ—Å—Ç–∞ –∏–∑ QR-–∫–æ–¥–∞
    private func parseBridgeId(from input: String) -> String? {
        let cleaned = input.trimmingCharacters(in: .whitespacesAndNewlines)
        
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞: '\(cleaned)'")
        
        // –ì–õ–ê–í–ù–´–ô –§–û–†–ú–ê–¢ —Å —Ñ–æ—Ç–æ: bridge-id:ECB5FAFFFE896811
        if cleaned.hasPrefix("bridge-id:") {
            let bridgeId = String(cleaned.dropFirst(10)).trimmingCharacters(in: .whitespacesAndNewlines)
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ 'bridge-id:' —Ñ–æ—Ä–º–∞—Ç–∞: \(bridgeId)")
            return bridgeId.uppercased()
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å bridge-id
        if cleaned.contains("bridge-id") {
            let patterns = [
                #"bridge-id:\s*([A-Fa-f0-9]{12,16})"#,
                #"bridge-id\s+([A-Fa-f0-9]{12,16})"#,
                #"bridge-id\s*:\s*([A-Fa-f0-9]{12,16})"#
            ]
            
            for pattern in patterns {
                if let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive),
                   let match = regex.firstMatch(in: cleaned, options: [], range: NSRange(location: 0, length: cleaned.count)),
                   let range = Range(match.range(at: 1), in: cleaned) {
                    let bridgeId = String(cleaned[range])
                    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID —á–µ—Ä–µ–∑ regex: \(bridgeId)")
                    return bridgeId.uppercased()
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –∏—â–µ–º hex –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let hexPattern = #"[A-Fa-f0-9]{12,16}"#
        if let regex = try? NSRegularExpression(pattern: hexPattern, options: []),
           let match = regex.firstMatch(in: cleaned, options: [], range: NSRange(location: 0, length: cleaned.count)),
           let range = Range(match.range, in: cleaned) {
            let bridgeId = String(cleaned[range])
            print("‚úÖ –ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π Bridge ID (hex): \(bridgeId)")
            return bridgeId.uppercased()
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID –∏–∑: '\(cleaned)'")
        return nil
    }
    
    // MARK: - Bridge Search
    
    func startBridgeSearch() {
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏")
        isSearchingBridges = true
        appViewModel.searchForBridges()
        
        // –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 10) { [weak self] in
            self?.isSearchingBridges = false
            if self?.discoveredBridges.isEmpty ?? true {
                print("‚ùå –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç
            }
        }
    }
    
    private func searchForSpecificBridge(bridgeId: String) {
        print("üîç –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ—Å—Ç —Å ID: \(bridgeId)")
        isSearchingBridges = true
        
        appViewModel.discoverBridge(bySerial: bridgeId) { [weak self] bridge in
            DispatchQueue.main.async {
                self?.isSearchingBridges = false
                
                if let bridge = bridge {
                    print("‚úÖ –ú–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: \(bridge.id) –ø–æ –∞–¥—Ä–µ—Å—É \(bridge.internalipaddress)")
                    self?.discoveredBridges = [bridge]
                    self?.selectedBridge = bridge
                    self?.currentStep = .bridgeFound
                } else {
                    print("‚ùå –ú–æ—Å—Ç —Å ID \(bridgeId) –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    // –ü—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
                    self?.startBridgeSearch()
                }
            }
        }
    }
    
    // MARK: - Bridge Connection
    
    func selectBridge(_ bridge: Bridge) {
        print("üì° –í—ã–±—Ä–∞–Ω –º–æ—Å—Ç: \(bridge.id)")
        selectedBridge = bridge
        appViewModel.currentBridge = bridge
    }
    
    func startBridgeConnection() {
        guard let bridge = selectedBridge else { return }
        
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id)")
        currentStep = .linkButton
        showLinkButtonAlert = true
        linkButtonCountdown = 30
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É
        appViewModel.connectToBridge(bridge)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { [weak self] _ in
            self?.linkButtonCountdown -= 1
            
            if self?.linkButtonCountdown ?? 0 % 3 == 0 {
                print("üîê –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–ª–æ—Å—å: \(self?.linkButtonCountdown ?? 0) —Å–µ–∫)")
                self?.attemptCreateUser()
            }
            
            if self?.linkButtonCountdown ?? 0 <= 0 {
                print("‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
                self?.cancelLinkButton()
            }
        }
    }
    
    private func attemptCreateUser() {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        appViewModel.createUser(appName: "BulbsHUE", completion: { [weak self] success in
            if success {
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                self?.cancelLinkButton()
                self?.currentStep = .connected
                
                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                    self?.appViewModel.showSetup = false
                }
            } else {
                print("‚è≥ –ö–Ω–æ–ø–∫–∞ Link –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏...")
            }
        })
    }
    
    func cancelLinkButton() {
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        showLinkButtonAlert = false
        linkButtonCountdown = 30
    }
    
    // MARK: - Helpers
    
    func openAppSettings() {
        if let url = URL(string: UIApplication.openSettingsURLString) {
            UIApplication.shared.open(url)
        }
    }
    
    func showLocalNetworkInfo() {
        showLocalNetworkAlert = true
    }
}

// MARK: - OnboardingStep

enum OnboardingStep {
    case welcome
    case cameraPermission
    case qrScanner
    case localNetworkPermission
    case searchBridges
    case bridgeFound
    case linkButton
    case connected
}
