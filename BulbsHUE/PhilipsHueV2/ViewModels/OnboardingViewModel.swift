//
//  OnboardingViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.

import SwiftUI
import AVFoundation
import Combine

/// ViewModel –¥–ª—è OnboardingView —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Link Button
class OnboardingViewModel: ObservableObject {
    // MARK: - Published Properties
    
    @Published var currentStep: OnboardingStep = .welcome
    @Published var showLocalNetworkAlert = false
    @Published var showPermissionAlert = false
    @Published var showLinkButtonAlert = false
    @Published var isSearchingBridges = false
    @Published var linkButtonCountdown = 30
    @Published var discoveredBridges: [Bridge] = []
    @Published var selectedBridge: Bridge?
    @Published var isConnecting = false
    @Published var isRequestingPermission = false
    @Published var linkButtonPressed = false // –§–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    @Published var connectionError: String? = nil // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    // MARK: - Private Properties
    
    private var appViewModel: AppViewModel
    private var linkButtonTimer: Timer?
    private var cancellables = Set<AnyCancellable>()
    private var connectionAttempts = 0
    private let maxConnectionAttempts = 30 // 30 –ø–æ–ø—ã—Ç–æ–∫ * 2 —Å–µ–∫ = 60 —Å–µ–∫ –º–∞–∫—Å–∏–º—É–º
    
    // MARK: - Initialization
    
    init(appViewModel: AppViewModel) {
        self.appViewModel = appViewModel
        setupBindings()
    }
    
    // MARK: - Setup
    
    private func setupBindings() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        appViewModel.$connectionStatus
            .receive(on: DispatchQueue.main)
            .sink { [weak self] status in
                guard let self = self else { return }
                
                switch status {
                case .connected:
                    print("‚úÖ OnboardingViewModel: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    self.handleSuccessfulConnection()
                    
                case .discovered:
                    if !self.discoveredBridges.isEmpty {
                        print("üì° OnboardingViewModel: –ú–æ—Å—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                        // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    }
                    
                case .needsAuthentication:
                    print("üîê OnboardingViewModel: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–Ω–∞–∂–∞—Ç–∏–µ Link Button)")
                    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ Link Button
                    
                case .disconnected:
                    print("‚ùå OnboardingViewModel: –û—Ç–∫–ª—é—á–µ–Ω–æ")
                    
                case .searching:
                    print("üîç OnboardingViewModel: –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤...")
                    
                @unknown default:
                    break
                }
            }
            .store(in: &cancellables)
        
        // –°–ª—É—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—Å—Ç—ã
        appViewModel.$discoveredBridges
            .receive(on: DispatchQueue.main)
            .sink { [weak self] bridges in
                self?.discoveredBridges = bridges
                if !bridges.isEmpty && self?.currentStep == .searchBridges {
                    print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–æ—Å—Ç—ã –æ—Ç AppViewModel: \(bridges.count)")
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –º–æ—Å—Ç –µ—Å–ª–∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π
                    if bridges.count == 1 {
                        print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–æ—Å—Ç")
                        self?.selectBridge(bridges[0])
                    }
                }
            }
            .store(in: &cancellables)
        
        // –°–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        appViewModel.$error
            .receive(on: DispatchQueue.main)
            .sink { [weak self] error in
                if let hueError = error as? HueAPIError {
                    self?.handleConnectionError(hueError)
                }
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Navigation
    
    func nextStep() {
        switch currentStep {
        case .welcome:
            currentStep = .localNetworkPermission
        case .localNetworkPermission:
            currentStep = .searchBridges
        case .searchBridges:
            if !discoveredBridges.isEmpty {
                currentStep = .bridgeFound
            }
        case .bridgeFound:
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É Link Button –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            currentStep = .linkButton
        case .linkButton:
            // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –∂–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            break
        case .connected:
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            appViewModel.showSetup = false
        }
    }
    
    func previousStep() {
        switch currentStep {
        case .welcome:
            break
        case .localNetworkPermission:
            currentStep = .welcome
        case .searchBridges:
            currentStep = .localNetworkPermission
        case .bridgeFound:
            currentStep = .searchBridges
        case .linkButton:
            // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            cancelLinkButton()
            currentStep = .bridgeFound
        case .connected:
            currentStep = .linkButton
        }
    }
    
    // MARK: - Connection Management
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ—Å—Ç—É
    func startBridgeConnection() {
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        guard !isConnecting else {
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            return
        }
        
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id) at \(bridge.internalipaddress)")
        isConnecting = true
        connectionAttempts = 0
        linkButtonPressed = false
        connectionError = nil
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
        appViewModel.connectToBridge(bridge)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Link
        showLinkButtonAlert = true
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        startLinkButtonPolling()
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–∂–∞—Ç–∏—è Link Button
    private func startLinkButtonPolling() {
        print("‚è± –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å Link Button –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã")
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        linkButtonTimer?.invalidate()
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { [weak self] _ in
            self?.attemptCreateUser()
        }
        
        // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—Ä–∞–∑—É
        attemptCreateUser()
    }
    
    /// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Link Button)
    private func attemptCreateUser() {
        connectionAttempts += 1
        
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ #\(connectionAttempts) —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if connectionAttempts >= maxConnectionAttempts {
            print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            handleConnectionTimeout()
            return
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        linkButtonCountdown = max(0, 60 - (connectionAttempts * 2))
        
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        appViewModel.createUserWithRetry(appName: "BulbsHUE") { [weak self] success in
            guard let self = self else { return }
            
            if success {
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! Link Button –±—ã–ª –Ω–∞–∂–∞—Ç!")
                self.linkButtonPressed = true
                self.handleSuccessfulConnection()
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                if let error = self.appViewModel.error as? HueAPIError {
                    switch error {
                    case .linkButtonNotPressed:
                        // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∫–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
                        print("‚è≥ Link Button –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...")
                        
                    case .localNetworkPermissionDenied:
                        print("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!")
                        self.handleNetworkPermissionError()
                        
                    default:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error)")
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                    }
                }
            }
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private func handleSuccessfulConnection() {
        print("üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        isConnecting = false
        showLinkButtonAlert = false
        linkButtonPressed = true
        connectionError = nil
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        currentStep = .connected
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.appViewModel.showSetup = false
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private func handleConnectionTimeout() {
        print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
        
        cancelLinkButton()
        
        connectionError = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞–∂–∞–ª–∏ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É Link –Ω–∞ Hue Bridge –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showLinkButtonAlert = false
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    private func handleNetworkPermissionError() {
        cancelLinkButton()
        showLocalNetworkAlert = true
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private func handleConnectionError(_ error: HueAPIError) {
        switch error {
        case .linkButtonNotPressed:
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            break
            
        case .localNetworkPermissionDenied:
            connectionError = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            
        case .bridgeNotFound:
            connectionError = "Hue Bridge –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏."
            
        case .notAuthenticated:
            connectionError = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            
        default:
            connectionError = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error.localizedDescription)"
        }
    }
    
    /// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    func cancelLinkButton() {
        print("üö´ –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        showLinkButtonAlert = false
        isConnecting = false
        linkButtonPressed = false
        connectionAttempts = 0
        linkButtonCountdown = 30
        connectionError = nil
    }
    
    // MARK: - Bridge Selection
    
    func selectBridge(_ bridge: Bridge) {
        print("üì° –í—ã–±—Ä–∞–Ω –º–æ—Å—Ç: \(bridge.id)")
        selectedBridge = bridge
        appViewModel.currentBridge = bridge
    }
    
    // MARK: - Bridge Search
    
    func startBridgeSearch() {
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏")
        isSearchingBridges = true
        discoveredBridges.removeAll()
        connectionError = nil
        
        appViewModel.searchForBridges()
        
        // –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 15) { [weak self] in
            guard let self = self else { return }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –ª–∏ –º—ã —É–∂–µ –∫ –º–æ—Å—Ç—É
            if self.appViewModel.connectionStatus == .connected ||
               self.appViewModel.connectionStatus == .needsAuthentication {
                print("‚úÖ –ú–æ—Å—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return
            }
            
            self.isSearchingBridges = false
            
            if let error = self.appViewModel.error as? HueAPIError,
               case .localNetworkPermissionDenied = error {
                print("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                self.showLocalNetworkAlert = true
            } else if self.discoveredBridges.isEmpty {
                print("‚ùå –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.connectionError = "–ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
            } else {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(self.discoveredBridges.count)")
            }
        }
    }
    
    // MARK: - Local Network Permission
    
    func requestLocalNetworkPermissionOnWelcome() {
        guard !isRequestingPermission else {
            print("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        }
        
        print("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å...")
        isRequestingPermission = true
        
        Task {
            do {
                let checker = LocalNetworkPermissionChecker()
                let granted = try await checker.requestAuthorization()
                
                await MainActor.run {
                    isRequestingPermission = false
                    
                    if granted {
                        print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å –ø–æ–ª—É—á–µ–Ω–æ")
                        nextStep()
                    } else {
                        print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                        showPermissionAlert = true
                    }
                }
            } catch {
                await MainActor.run {
                    isRequestingPermission = false
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: \(error)")
                    showPermissionAlert = true
                }
            }
        }
    }
    
    // MARK: - Helpers
    
    func openAppSettings() {
        if let url = URL(string: UIApplication.openSettingsURLString) {
            UIApplication.shared.open(url)
        }
    }
    
    func showLocalNetworkInfo() {
        showLocalNetworkAlert = true
    }

    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏)
    func showGenericErrorAlert(_ message: String? = nil) {
        connectionError = message ?? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        showLinkButtonAlert = false
    }
}


extension OnboardingViewModel {
    
    /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func attemptCreateUserImproved() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º - –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω
        if appViewModel.connectionStatus == .connected {
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏")
            cancelLinkButton()
            return
        }
        
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        }
        
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–æ—Å—Ç—É \(bridge.internalipaddress)...")
        
        appViewModel.createUserWithRetry(appName: "BulbsHUE") { [weak self] success in
            if success {
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                self?.cancelLinkButton()
                self?.currentStep = .connected
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    self?.appViewModel.showSetup = false
                }
            } else {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ - –∫–Ω–æ–ø–∫–∞ Link –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞
                // –¢–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
            }
        }
    }
}
extension OnboardingViewModel {
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    func startBridgeConnectionWithPermissionCheck() {
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        }
        
        print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
        
        if #available(iOS 14.0, *) {
            let checker = LocalNetworkPermissionChecker()
            Task {
                do {
                    let hasPermission = try await checker.requestAuthorization()
                    await MainActor.run {
                        if hasPermission {
                            print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω–æ")
                            self.proceedWithConnection(bridge: bridge)
                        } else {
                            print("üö´ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                            self.showLocalNetworkAlert = true
                        }
                    }
                } catch {
                    await MainActor.run {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: \(error)")
                        self.showLocalNetworkAlert = true
                    }
                }
            }
        } else {
            // –î–ª—è iOS < 14 —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            proceedWithConnection(bridge: bridge)
        }
    }
    
    private func proceedWithConnection(bridge: Bridge) {
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id) at \(bridge.internalipaddress)")
        currentStep = .linkButton
        showLinkButtonAlert = true
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É
        appViewModel.connectToBridge(bridge)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { [weak self] _ in
            self?.attemptCreateUserImproved()
        }
    }
}
// MARK: - OnboardingStep

enum OnboardingStep {
    case welcome
    // MARK: - QR Code Steps (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º)
    // case cameraPermission
    // case qrScanner
    case localNetworkPermission
    case searchBridges
    case bridgeFound
    case linkButton
    case connected
}

// –§–∞–π–ª: BulbsHUE/PhilipsHueV2/ViewModels/OnboardingViewModel+Fixed.swift
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Link Button –≤ OnboardingViewModel


extension OnboardingViewModel {
    
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    func startBridgeConnectionFixed() {
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            connectionError = "–ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            return
        }
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        guard !isConnecting else {
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            return
        }
        
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id)")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isConnecting = true
        connectionAttempts = 0
        linkButtonPressed = false
        connectionError = nil
        linkButtonCountdown = 60
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
        appViewModel.connectToBridge(bridge)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        appViewModel.createUserWithLinkButtonHandling(
            appName: "BulbsHUE",
            onProgress: { [weak self] state in
                self?.handleLinkButtonState(state)
            },
            completion: { [weak self] result in
                self?.handleConnectionResult(result)
            }
        )
    }
    
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π Link Button
    private func handleLinkButtonState(_ state: LinkButtonState) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            switch state {
            case .idle:
                print("üîÑ Link Button: –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
                self.isConnecting = false
                self.connectionAttempts = 0
                
            case .waiting(let attempt, let maxAttempts):
                print("‚è≥ Link Button: –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è (–ø–æ–ø—ã—Ç–∫–∞ \(attempt)/\(maxAttempts))")
                self.isConnecting = true
                self.connectionAttempts = attempt
                self.linkButtonCountdown = Swift.max(0, (maxAttempts - attempt) * 2) // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–ø—ã—Ç–∫—É
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if !self.showLinkButtonAlert {
                    self.showLinkButtonAlert = true
                }
                
            case .success:
                print("‚úÖ Link Button: –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!")
                self.isConnecting = false
                self.linkButtonPressed = true
                self.showLinkButtonAlert = false
                self.connectionError = nil
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —É—Å–ø–µ—Ö–∞
                self.currentStep = .connected
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    self.appViewModel.showSetup = false
                }
                
            case .error(let message):
                print("‚ùå Link Button: –û—à–∏–±–∫–∞ - \(message)")
                self.isConnecting = false
                self.connectionError = message
                self.showLinkButtonAlert = false
                
            case .timeout:
                print("‚è∞ Link Button: –¢–∞–π–º–∞—É—Ç")
                self.isConnecting = false
                self.connectionError = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É Link –Ω–∞ –º–æ—Å—Ç—É."
                self.showLinkButtonAlert = false
            }
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private func handleConnectionResult(_ result: Result<String, Error>) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            switch result {
            case .success(let username):
                print("üéâ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! Username: \(username)")
                self.linkButtonPressed = true
                self.isConnecting = false
                self.connectionError = nil
                
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error)")
                self.isConnecting = false
                
                if let linkError = error as? LinkButtonError {
                    switch linkError {
                    case .timeout:
                        self.connectionError = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (60 —Å–µ–∫—É–Ω–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É Link."
                    case .localNetworkDenied:
                        self.connectionError = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö iOS."
                        self.showLocalNetworkAlert = true
                    case .bridgeUnavailable:
                        self.connectionError = "–ú–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏."
                    default:
                        self.connectionError = linkError.localizedDescription
                    }
                } else {
                    self.connectionError = error.localizedDescription
                }
            }
        }
    }
    
    /// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    func cancelLinkButtonFixed() {
        print("üö´ –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Link Button")
        
        isConnecting = false
        linkButtonPressed = false
        connectionAttempts = 0
        linkButtonCountdown = 60
        connectionError = nil
        showLinkButtonAlert = false
        
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–º–µ–Ω—É —Ç–∞–π–º–µ—Ä–∞ –≤ AppViewModel –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    }
}

// MARK: - UI Helpers

extension OnboardingViewModel {
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    var linkButtonStatusText: String {
        if linkButtonPressed {
            return "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
        } else if isConnecting {
            if connectionAttempts > 0 {
                return "–ü–æ–ø—ã—Ç–∫–∞ \(connectionAttempts) –∏–∑ 30..."
            } else {
                return "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Link..."
            }
        } else if let error = connectionError {
            return error
        } else {
            return "–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    var linkButtonStatusColor: Color {
        if linkButtonPressed {
            return .green
        } else if connectionError != nil {
            return .red
        } else if isConnecting {
            return .cyan
        } else {
            return .gray
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    var canProceedFromLinkButton: Bool {
        return linkButtonPressed && !isConnecting
    }
}

// MARK: - Camera Permission (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è QR-–∫–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º)
/*
func requestCameraPermission() {
    switch AVCaptureDevice.authorizationStatus(for: .video) {
    case .authorized:
        print("üì∑ –ö–∞–º–µ—Ä–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä")
        showQRScanner = true
    case .notDetermined:
        print("üì∑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
        AVCaptureDevice.requestAccess(for: .video) { [weak self] granted in
            DispatchQueue.main.async {
                if granted {
                    print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ")
                    self?.showQRScanner = true
                } else {
                    print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                    self?.showCameraPermissionAlert = true
                }
            }
        }
    case .denied, .restricted:
        print("‚ùå –ö–∞–º–µ—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
        showCameraPermissionAlert = true
    @unknown default:
        break
    }
}
*/

// MARK: - QR Code Handling (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º)
/*
func handleScannedQR(_ code: String) {
    print("üì± OnboardingViewModel: –ü–æ–ª—É—á–µ–Ω QR-–∫–æ–¥: '\(code)'")
    showQRScanner = false
    
    let cleanedCode = code.trimmingCharacters(in: .whitespacesAndNewlines)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR-–∫–æ–¥–æ–≤ Hue Bridge
    if cleanedCode.hasPrefix("bridge-id:") {
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç Philips Hue: bridge-id:ECB5FAFFFE896811
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω QR-–∫–æ–¥ Philips Hue Bridge")
        if let bridgeId = parseBridgeId(from: code) {
            print("‚úÖ Bridge ID —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: \(bridgeId)")
            searchForSpecificBridge(bridgeId: bridgeId)
        } else {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫")
            startBridgeSearch()
        }
        currentStep = .searchBridges
        
    } else if cleanedCode.hasPrefix("S#") {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: S#12345678
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥ Hue Bridge")
        let serialNumber = String(cleanedCode.dropFirst(2))
        searchForSpecificBridge(bridgeId: serialNumber)
        currentStep = .searchBridges
        
    } else if cleanedCode.hasPrefix("X-HM://") {
        // HomeKit QR-–∫–æ–¥ - –ù–ï Philips Hue
        print("‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω HomeKit QR-–∫–æ–¥, –Ω–æ —ç—Ç–æ –Ω–µ Philips Hue Bridge")
        print("üí° QR-–∫–æ–¥ —Ä—è–¥–æ–º —Å HomeKit –º–µ—Ç–∫–æ–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HomeKit")
        print("üí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hue –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–∏—Å–∫—É –±–µ–∑ QR-–∫–æ–¥–∞ - –º–æ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ —Å–µ—Ç–∏
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
        currentStep = .searchBridges
        startBridgeSearch()
        
    } else {
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞: \(cleanedCode)")
        print("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∏—Å–∫–æ–º –º–æ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–µ—Ç–µ–≤–æ–º—É –ø–æ–∏—Å–∫—É
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
        currentStep = .searchBridges
        startBridgeSearch()
    }
}
/// –ü–∞—Ä—Å–∏–Ω–≥ ID –º–æ—Å—Ç–∞ –∏–∑ QR-–∫–æ–¥–∞
private func parseBridgeId(from input: String) -> String? {
    let cleaned = input.trimmingCharacters(in: .whitespacesAndNewlines)
    
    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞: '\(cleaned)'")
    
    // –ì–õ–ê–í–ù–´–ô –§–û–†–ú–ê–¢ —Å —Ñ–æ—Ç–æ: bridge-id:ECB5FAFFFE896811
    if cleaned.hasPrefix("bridge-id:") {
        let bridgeId = String(cleaned.dropFirst(10)).trimmingCharacters(in: .whitespacesAndNewlines)
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ 'bridge-id:' —Ñ–æ—Ä–º–∞—Ç–∞: \(bridgeId)")
        return bridgeId.uppercased()
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å bridge-id
    if cleaned.contains("bridge-id") {
        let patterns = [
            #"bridge-id:\s*([A-Fa-f0-9]{12,16})"#,
            #"bridge-id\s+([A-Fa-f0-9]{12,16})"#,
            #"bridge-id\s*:\s*([A-Fa-f0-9]{12,16})"#
        ]
        
        for pattern in patterns {
            if let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive),
               let match = regex.firstMatch(in: cleaned, options: [], range: NSRange(location: 0, length: cleaned.count)),
               let range = Range(match.range(at: 1), in: cleaned) {
                let bridgeId = String(cleaned[range])
                print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID —á–µ—Ä–µ–∑ regex: \(bridgeId)")
                return bridgeId.uppercased()
            }
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –∏—â–µ–º hex –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    let hexPattern = #"[A-Fa-f0-9]{12,16}"#
    if let regex = try? NSRegularExpression(pattern: hexPattern, options: []),
       let match = regex.firstMatch(in: cleaned, options: [], range: NSRange(location: 0, length: cleaned.count)),
       let range = Range(match.range, in: cleaned) {
        let bridgeId = String(cleaned[range])
        print("‚úÖ –ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π Bridge ID (hex): \(bridgeId)")
        return bridgeId.uppercased()
    }
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID –∏–∑: '\(cleaned)'")
    return nil
}
*/
