//
//  OnboardingViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.
//

import SwiftUI
import AVFoundation
import Combine

/// ViewModel –¥–ª—è OnboardingView
class OnboardingViewModel: ObservableObject {
    // MARK: - Published Properties
    
    @Published var currentStep: OnboardingStep = .welcome
    // MARK: - QR Code Properties (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
    // @Published var showQRScanner = false
    // @Published var showCameraPermissionAlert = false
    @Published var showLocalNetworkAlert = false
    @Published var showLinkButtonAlert = false
    @Published var isSearchingBridges = false
    @Published var linkButtonCountdown = 30
    @Published var discoveredBridges: [Bridge] = []
    @Published var selectedBridge: Bridge?
    
    // MARK: - Private Properties
    
    private var appViewModel: AppViewModel
    private var linkButtonTimer: Timer?
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    
    init(appViewModel: AppViewModel) {
        self.appViewModel = appViewModel
        setupBindings()
    }
    
    // MARK: - Setup
    
    private func setupBindings() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        appViewModel.$connectionStatus
            .receive(on: DispatchQueue.main)
            .sink { [weak self] status in
                switch status {
                case .connected:
                    self?.currentStep = .connected
                case .discovered:
                    if !(self?.discoveredBridges.isEmpty ?? true) {
                        self?.currentStep = .bridgeFound
                    }
                default:
                    break
                }
            }
            .store(in: &cancellables)
        
        // –°–ª—É—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—Å—Ç—ã
        appViewModel.$discoveredBridges
            .receive(on: DispatchQueue.main)
            .sink { [weak self] bridges in
                self?.discoveredBridges = bridges
                if !bridges.isEmpty && self?.currentStep == .searchBridges {
                    print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–æ—Å—Ç—ã –æ—Ç AppViewModel: \(bridges.count)")
                    for bridge in bridges {
                        print("  üì° –ú–æ—Å—Ç: \(bridge.id) at \(bridge.internalipaddress)")
                    }
                    
                    // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫ bridgeFound - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ searchBridges
                    // –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –≤–º–µ—Å—Ç–æ "–ü–æ–∏—Å–∫"
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –º–æ—Å—Ç –µ—Å–ª–∏ –æ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π
                    if bridges.count == 1 {
                        print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–æ—Å—Ç")
                        self?.selectBridge(bridges[0])
                    }
                }
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Navigation
    
    func nextStep() {
        switch currentStep {
        case .welcome:
            // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
            currentStep = .localNetworkPermission
        case .localNetworkPermission:
            currentStep = .searchBridges
        case .searchBridges:
            if !discoveredBridges.isEmpty {
                currentStep = .bridgeFound
            }
        case .bridgeFound:
            currentStep = .linkButton
        case .linkButton:
            currentStep = .connected
        case .connected:
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
            appViewModel.showSetup = false
        }
        
        // MARK: - QR Code Steps (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        /*
        case .cameraPermission:
            // –ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
            requestCameraPermission()
        case .qrScanner:
            currentStep = .localNetworkPermission
        */
    }
    
    func previousStep() {
        switch currentStep {
        case .welcome:
            break
        case .localNetworkPermission:
            currentStep = .welcome
        case .searchBridges:
            currentStep = .localNetworkPermission
        case .bridgeFound:
            currentStep = .searchBridges
        case .linkButton:
            currentStep = .bridgeFound
        case .connected:
            currentStep = .linkButton
        }
        
        // MARK: - QR Code Steps (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        /*
        case .cameraPermission:
            currentStep = .welcome
        case .qrScanner:
            currentStep = .cameraPermission
        */
    }
    
    // MARK: - Camera Permission (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è QR-–∫–æ–¥–∞ –≤ –±—É–¥—É—â–µ–º)
    /*
    func requestCameraPermission() {
        switch AVCaptureDevice.authorizationStatus(for: .video) {
        case .authorized:
            print("üì∑ –ö–∞–º–µ—Ä–∞ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä")
            showQRScanner = true
        case .notDetermined:
            print("üì∑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
            AVCaptureDevice.requestAccess(for: .video) { [weak self] granted in
                DispatchQueue.main.async {
                    if granted {
                        print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ–ª—É—á–µ–Ω–æ")
                        self?.showQRScanner = true
                    } else {
                        print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                        self?.showCameraPermissionAlert = true
                    }
                }
            }
        case .denied, .restricted:
            print("‚ùå –ö–∞–º–µ—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
            showCameraPermissionAlert = true
        @unknown default:
            break
        }
    }
    */
    
    // MARK: - QR Code Handling (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º)
    /*
    func handleScannedQR(_ code: String) {
        print("üì± OnboardingViewModel: –ü–æ–ª—É—á–µ–Ω QR-–∫–æ–¥: '\(code)'")
        showQRScanner = false
        
        let cleanedCode = code.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR-–∫–æ–¥–æ–≤ Hue Bridge
        if cleanedCode.hasPrefix("bridge-id:") {
            // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç Philips Hue: bridge-id:ECB5FAFFFE896811
            print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω QR-–∫–æ–¥ Philips Hue Bridge")
            if let bridgeId = parseBridgeId(from: code) {
                print("‚úÖ Bridge ID —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω: \(bridgeId)")
                searchForSpecificBridge(bridgeId: bridgeId)
            } else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫")
                startBridgeSearch()
            }
            currentStep = .searchBridges
            
        } else if cleanedCode.hasPrefix("S#") {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: S#12345678
            print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π QR-–∫–æ–¥ Hue Bridge")
            let serialNumber = String(cleanedCode.dropFirst(2))
            searchForSpecificBridge(bridgeId: serialNumber)
            currentStep = .searchBridges
            
        } else if cleanedCode.hasPrefix("X-HM://") {
            // HomeKit QR-–∫–æ–¥ - –ù–ï Philips Hue
            print("‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω HomeKit QR-–∫–æ–¥, –Ω–æ —ç—Ç–æ –Ω–µ Philips Hue Bridge")
            print("üí° QR-–∫–æ–¥ —Ä—è–¥–æ–º —Å HomeKit –º–µ—Ç–∫–æ–π –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HomeKit")
            print("üí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hue –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–∏—Å–∫—É –±–µ–∑ QR-–∫–æ–¥–∞ - –º–æ—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ —Å–µ—Ç–∏
            print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
            currentStep = .searchBridges
            startBridgeSearch()
            
        } else {
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞: \(cleanedCode)")
            print("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∏—Å–∫–æ–º –º–æ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–µ—Ç–µ–≤–æ–º—É –ø–æ–∏—Å–∫—É
            print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ Hue Bridge –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
            currentStep = .searchBridges
            startBridgeSearch()
        }
    } 
    /// –ü–∞—Ä—Å–∏–Ω–≥ ID –º–æ—Å—Ç–∞ –∏–∑ QR-–∫–æ–¥–∞
    private func parseBridgeId(from input: String) -> String? {
        let cleaned = input.trimmingCharacters(in: .whitespacesAndNewlines)
        
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ QR-–∫–æ–¥–∞: '\(cleaned)'")
        
        // –ì–õ–ê–í–ù–´–ô –§–û–†–ú–ê–¢ —Å —Ñ–æ—Ç–æ: bridge-id:ECB5FAFFFE896811
        if cleaned.hasPrefix("bridge-id:") {
            let bridgeId = String(cleaned.dropFirst(10)).trimmingCharacters(in: .whitespacesAndNewlines)
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID –∏–∑ 'bridge-id:' —Ñ–æ—Ä–º–∞—Ç–∞: \(bridgeId)")
            return bridgeId.uppercased()
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å bridge-id
        if cleaned.contains("bridge-id") {
            let patterns = [
                #"bridge-id:\s*([A-Fa-f0-9]{12,16})"#,
                #"bridge-id\s+([A-Fa-f0-9]{12,16})"#,
                #"bridge-id\s*:\s*([A-Fa-f0-9]{12,16})"#
            ]
            
            for pattern in patterns {
                if let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive),
                   let match = regex.firstMatch(in: cleaned, options: [], range: NSRange(location: 0, length: cleaned.count)),
                   let range = Range(match.range(at: 1), in: cleaned) {
                    let bridgeId = String(cleaned[range])
                    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω Bridge ID —á–µ—Ä–µ–∑ regex: \(bridgeId)")
                    return bridgeId.uppercased()
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –∏—â–µ–º hex –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let hexPattern = #"[A-Fa-f0-9]{12,16}"#
        if let regex = try? NSRegularExpression(pattern: hexPattern, options: []),
           let match = regex.firstMatch(in: cleaned, options: [], range: NSRange(location: 0, length: cleaned.count)),
           let range = Range(match.range, in: cleaned) {
            let bridgeId = String(cleaned[range])
            print("‚úÖ –ù–∞–π–¥–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π Bridge ID (hex): \(bridgeId)")
            return bridgeId.uppercased()
        }
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Bridge ID –∏–∑: '\(cleaned)'")
        return nil
    }
    */
    
    // MARK: - Bridge Search
        
        func startBridgeSearch() {
            print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏")
            isSearchingBridges = true
            discoveredBridges.removeAll()
            
            appViewModel.searchForBridges()
            
            // –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            DispatchQueue.main.asyncAfter(deadline: .now() + 15) { [weak self] in
                guard let self = self else { return }
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –ª–∏ –º—ã —É–∂–µ –∫ –º–æ—Å—Ç—É
                // –ï—Å–ª–∏ –º–æ—Å—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if self.appViewModel.connectionStatus == .connected ||
                   self.appViewModel.connectionStatus == .needsAuthentication {
                    print("‚úÖ –ú–æ—Å—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç")
                    return
                }
                
                self.isSearchingBridges = false
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ—Å—Ç –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
                if let error = self.appViewModel.error as? HueAPIError,
                   case .localNetworkPermissionDenied = error {
                    print("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                    self.showLocalNetworkAlert = true
                } else if self.discoveredBridges.isEmpty {
                    print("‚ùå –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –º–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                    print("   1. –ú–æ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏")
                    print("   2. –ú–æ—Å—Ç –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print("   3. –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö iOS")
                } else {
                    print("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(self.discoveredBridges.count)")
                    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–∏—Å–∫–∞, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –≤–º–µ—Å—Ç–æ "–ü–æ–∏—Å–∫"
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ bridgeFound –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
                }
            }
        }
    
    private func searchForSpecificBridge(bridgeId: String) {
        print("üîç –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ—Å—Ç —Å ID: \(bridgeId)")
        isSearchingBridges = true
        
        appViewModel.discoverBridge(bySerial: bridgeId) { [weak self] bridge in
            DispatchQueue.main.async {
                self?.isSearchingBridges = false
                
                if let bridge = bridge {
                    print("‚úÖ –ú–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: \(bridge.id) –ø–æ –∞–¥—Ä–µ—Å—É \(bridge.internalipaddress)")
                    self?.discoveredBridges = [bridge]
                    self?.selectedBridge = bridge
                    self?.currentStep = .bridgeFound
                } else {
                    print("‚ùå –ú–æ—Å—Ç —Å ID \(bridgeId) –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    // –ü—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
                    self?.startBridgeSearch()
                }
            }
        }
    }
    
    // MARK: - Bridge Connection
    
    func selectBridge(_ bridge: Bridge) {
        print("üì° –í—ã–±—Ä–∞–Ω –º–æ—Å—Ç: \(bridge.id)")
        selectedBridge = bridge
        appViewModel.currentBridge = bridge
    }
    
    func startBridgeConnection() {
        guard let bridge = selectedBridge else { 
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return 
        }
        
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id) at \(bridge.internalipaddress)")
        currentStep = .linkButton
        showLinkButtonAlert = true
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É
        appViewModel.connectToBridge(bridge)
        
        // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
            self?.startContinuousAuthentication()
        }
    }
    
    private func startContinuousAuthentication() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { [weak self] _ in
            print("üîê –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            self?.attemptCreateUser()
        }
    }
    
    /// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        private func attemptCreateUser() {
            #if canImport(UIKit)
            let deviceName = UIDevice.current.name
            #else
            let deviceName = Host.current().localizedName ?? "Mac"
            #endif
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
            appViewModel.createUserWithRetry(appName: "BulbsHUE", completion: { [weak self] success in
                if success {
                    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    self?.cancelLinkButton()
                    self?.currentStep = .connected
                    
                    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º setup –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                        self?.appViewModel.showSetup = false
                    }
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
                    if let error = self?.appViewModel.error as? HueAPIError,
                       case .localNetworkPermissionDenied = error {
                        print("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!")
                        self?.cancelLinkButton()
                        self?.showLocalNetworkAlert = true
                    }
                    // –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ - –∫–Ω–æ–ø–∫–∞ Link –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞
                }
            })
        }
    
    func cancelLinkButton() {
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        showLinkButtonAlert = false
    }
    
    // MARK: - Helpers
    
    func openAppSettings() {
        if let url = URL(string: UIApplication.openSettingsURLString) {
            UIApplication.shared.open(url)
        }
    }
    
    func showLocalNetworkInfo() {
        showLocalNetworkAlert = true
    }
}
extension OnboardingViewModel {
    
    /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func attemptCreateUserImproved() {
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        }
        
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–æ—Å—Ç—É \(bridge.internalipaddress)...")
        
        appViewModel.createUserWithRetry(appName: "BulbsHUE") { [weak self] success in
            if success {
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                self?.cancelLinkButton()
                self?.currentStep = .connected
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
                    self?.appViewModel.showSetup = false
                }
            } else {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ - –∫–Ω–æ–ø–∫–∞ Link –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞
                // –¢–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
            }
        }
    }
}
extension OnboardingViewModel {
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    func startBridgeConnectionWithPermissionCheck() {
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        }
        
        print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
        
        if #available(iOS 14.0, *) {
            let checker = LocalNetworkPermissionChecker()
            checker.checkLocalNetworkPermission { [weak self] hasPermission in
                if hasPermission {
                    print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω–æ")
                    self?.proceedWithConnection(bridge: bridge)
                } else {
                    print("üö´ –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                    self?.showLocalNetworkAlert = true
                }
            }
        } else {
            // –î–ª—è iOS < 14 —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            proceedWithConnection(bridge: bridge)
        }
    }
    
    private func proceedWithConnection(bridge: Bridge) {
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id) at \(bridge.internalipaddress)")
        currentStep = .linkButton
        showLinkButtonAlert = true
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É
        appViewModel.connectToBridge(bridge)
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        linkButtonTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: true) { [weak self] _ in
            self?.attemptCreateUserImproved()
        }
    }
}
// MARK: - OnboardingStep

enum OnboardingStep {
    case welcome
    // MARK: - QR Code Steps (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º)
    // case cameraPermission
    // case qrScanner
    case localNetworkPermission
    case searchBridges
    case bridgeFound
    case linkButton
    case connected
}
