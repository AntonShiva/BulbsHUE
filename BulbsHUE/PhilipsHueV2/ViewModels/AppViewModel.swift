

import Foundation
import Combine
#if canImport(UIKit)
import UIKit
#else
import AppKit
#endif


/// –ì–ª–∞–≤–Ω—ã–π ViewModel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –¥—Ä—É–≥–∏–µ ViewModels
class AppViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    /// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É
    @Published var connectionStatus: ConnectionStatus = .disconnected
    
    /// –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—Å—Ç—ã –≤ —Å–µ—Ç–∏
    @Published var discoveredBridges: [Bridge] = []
    
    /// –¢–µ–∫—É—â–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –º–æ—Å—Ç
    @Published var currentBridge: Bridge?
    
    /// Application key –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    @Published var applicationKey: String? {
        didSet {
            if let key = applicationKey {
                UserDefaults.standard.set(key, forKey: "HueApplicationKey")
                apiClient.setApplicationKey(key)
            }
        }
    }
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    @Published var showSetup: Bool = false
    
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –º–æ—Å—Ç–∞
    @Published var bridgeCapabilities: BridgeCapabilities?
    
    /// –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    @Published var performanceMetrics = PerformanceMetrics()
    
    /// –¢–µ–∫—É—â–∞—è –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    @Published var error: Error?
    
    // MARK: - Child ViewModels
    
    /// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏
    @Published var lightsViewModel: LightsViewModel
    
    /// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞–º–∏
    @Published var scenesViewModel: ScenesViewModel
    
    /// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
    @Published var groupsViewModel: GroupsViewModel
    
    /// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞–º–∏
    @Published var sensorsViewModel: SensorsViewModel
    
    /// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏
    @Published var rulesViewModel: RulesViewModel
    
    // MARK: - Private Properties
    
    private var apiClient: HueAPIClient
    private var cancellables = Set<AnyCancellable>()
    private var eventStreamCancellable: AnyCancellable?
    
    /// –ö–ª–∏–µ–Ω—Ç –¥–ª—è Entertainment API
    private var entertainmentClient: HueEntertainmentClient?
    
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    private weak var dataPersistenceService: DataPersistenceService?
    
    /// –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ DataPersistenceService –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    var dataService: DataPersistenceService? {
        return dataPersistenceService
    }
    
    // MARK: - Initialization
    
    init(dataPersistenceService: DataPersistenceService? = nil) {
        self.dataPersistenceService = dataPersistenceService
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º IP, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        self.apiClient = HueAPIClient(bridgeIP: "", dataPersistenceService: dataPersistenceService)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ ViewModels
        self.lightsViewModel = LightsViewModel(apiClient: apiClient)
        self.scenesViewModel = ScenesViewModel(apiClient: apiClient)
        self.groupsViewModel = GroupsViewModel(apiClient: apiClient)
        self.sensorsViewModel = SensorsViewModel(apiClient: apiClient)
        self.rulesViewModel = RulesViewModel(apiClient: apiClient)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        setupPerformanceMonitoring()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        setupAppStateObservation()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loadSavedSettings()
    }
    
    // MARK: - Public Methods
    

    
    /// –ù–∞—á–∏–Ω–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    func searchForBridges() {
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤...")
        connectionStatus = .searching
        discoveredBridges.removeAll() // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        error = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: SSDP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ multicast entitlement
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloud Discovery –∏ IP scan (–Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö entitlements)
        if #available(iOS 14.0, *) {
            let permissionChecker = LocalNetworkPermissionChecker()
            Task {
                do {
                    let hasPermission = try await permissionChecker.requestAuthorization()
                    await MainActor.run {
                        if hasPermission {
                            self.startDiscoveryProcess()
                        } else {
                            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                            self.connectionStatus = .disconnected
                            self.error = HueAPIError.localNetworkPermissionDenied
                        }
                    }
                } catch {
                    await MainActor.run {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: \(error)")
                        self.connectionStatus = .disconnected
                        self.error = HueAPIError.localNetworkPermissionDenied
                    }
                }
            }
        } else {
            // –î–ª—è iOS < 14 –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
            startDiscoveryProcess()
        }
    }
    
    /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private func startDiscoveryProcess() {
        // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π discovery –∫–ª–∞—Å—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if #available(iOS 12.0, *) {
            let discovery = HueBridgeDiscovery()
            discovery.discoverBridges { [weak self] bridges in
                self?.handleDiscoveryResults(bridges)
            }
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π iOS
            self.handleLegacyDiscovery()
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    private func handleDiscoveryResults(_ bridges: [Bridge]) {
        DispatchQueue.main.async { [weak self] in
            print("üìã Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: \(bridges.count) –º–æ—Å—Ç–æ–≤")
            for bridge in bridges {
                print("  üì° –ú–æ—Å—Ç: \(bridge.id) at \(bridge.internalipaddress)")
            }
            
            self?.discoveredBridges = bridges
            
            if bridges.isEmpty {
                print("‚ùå –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self?.connectionStatus = .disconnected
                #if os(iOS)
                self?.error = HueAPIError.localNetworkPermissionDenied
                #endif
            } else {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(bridges.count)")
                self?.connectionStatus = .discovered
                self?.error = nil
            }
        }
    }
    
    /// Fallback discovery –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π iOS
    private func handleLegacyDiscovery() {
        print("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy discovery –¥–ª—è iOS < 12.0")
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π cloud + IP scan –±–µ–∑ Network framework
        DispatchQueue.main.async { [weak self] in
            self?.connectionStatus = .disconnected
            self?.error = HueAPIError.bridgeNotFound
        }
    }
    

    
    /// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ—Å—Ç—É
    /// - Parameter bridge: –ú–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    func connectToBridge(_ bridge: Bridge) {
        currentBridge = bridge
        UserDefaults.standard.set(bridge.internalipaddress, forKey: "HueBridgeIP")
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º IP
        recreateAPIClient(with: bridge.internalipaddress)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ—Å—Ç–∞
        apiClient.getBridgeConfig()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    if case .failure = completion {
                        self?.connectionStatus = .disconnected
                    }
                },
                receiveValue: { [weak self] config in
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é API
                    if let apiVersion = config.apiversion,
                       apiVersion.compare("1.46.0", options: .numeric) == .orderedAscending {
                        self?.error = HueAPIError.outdatedBridge
                        return
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    if let bridgeId = config.bridgeid {
                        self?.currentBridge?.id = bridgeId
                    }
                    
                    if let key = self?.applicationKey {
                        self?.connectionStatus = .connected
                        self?.startEventStream()
                        self?.loadAllData()
                        self?.showSetup = false
                    } else {
                        self?.connectionStatus = .needsAuthentication
                        self?.showSetup = true
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ—Å—Ç—É
    /// - Parameters:
    ///   - appName: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    ///   - completion: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    func createUser(appName: String, completion: @escaping (Bool) -> Void) {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        apiClient.createUser(appName: appName, deviceName: deviceName)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É –∫–Ω–æ–ø–∫–∏
                        if case HueAPIError.linkButtonNotPressed = error {
                            completion(false)
                        } else {
                            completion(false)
                        }
                    }
                },
                receiveValue: { [weak self] response in
                    if let success = response.success,
                       let username = success.username {
                        self?.applicationKey = username
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º client key –¥–ª—è Entertainment API
                        if let clientKey = success.clientkey {
                            UserDefaults.standard.set(clientKey, forKey: "HueClientKey")
                            self?.setupEntertainmentClient(clientKey: clientKey)
                        }
                        self?.connectionStatus = .connected
                        self?.showSetup = false
                        self?.startEventStream()
                        self?.loadAllData()
                        completion(true)
                    } else if let error = response.error {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ 101 - –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
                        if error.type == 101 {
                            self?.error = HueAPIError.linkButtonNotPressed
                        }
                        completion(false)
                    } else {
                        completion(false)
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –º–æ—Å—Ç–∞
    func disconnect() {
        connectionStatus = .disconnected
        currentBridge = nil
        applicationKey = nil
        eventStreamCancellable?.cancel()
        
        UserDefaults.standard.removeObject(forKey: "HueBridgeIP")
        UserDefaults.standard.removeObject(forKey: "HueApplicationKey")
    }
    
    /// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    func refreshAll() {
        loadAllData()
    }
    
//    /// –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è OnboardingView)
//    func searchForBridges() {
//        discoverBridges()
//    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–æ—Å—Ç—É
    /// - Parameters:
    ///   - bridge: –ú–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ///   - appName: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    ///   - deviceName: –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    ///   - completion: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    func createUser(on bridge: Bridge, appName: String, deviceName: String, completion: @escaping (Bool) -> Void) {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        if currentBridge?.id != bridge.id {
            connectToBridge(bridge)
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        createUser(appName: appName, completion: completion)
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –º–æ—Å—Ç–∞
    func loadBridgeCapabilities() {
        apiClient.getBridgeCapabilities()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { _ in },
                receiveValue: { [weak self] capabilities in
                    self?.bridgeCapabilities = capabilities
                    self?.checkResourceLimits(capabilities)
                }
            )
            .store(in: &cancellables)
    }
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        private func setupAppStateObservation() {
            #if canImport(UIKit)
            NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)
                .sink { [weak self] _ in
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    if self?.connectionStatus == .connected {
                        print("üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø")
                        self?.lightsViewModel.loadLights()
                    } else {
                        print("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                    }
                }
                .store(in: &cancellables)
            #endif
        }
    
    // MARK: - Private Methods
        
        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        private func loadSavedSettings() {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Keychain (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
            if let credentials = HueKeychainManager.shared.getLastBridgeCredentials() {
                loadSavedSettingsFromKeychain()
                return
            }
            
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å UserDefaults
            if let savedIP = UserDefaults.standard.string(forKey: "HueBridgeIP"),
               let savedKey = UserDefaults.standard.string(forKey: "HueApplicationKey") {
                
                applicationKey = savedKey
                recreateAPIClient(with: savedIP)
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º client key –¥–ª—è Entertainment API –∏–∑ Keychain
                if let bridgeId = UserDefaults.standard.string(forKey: "HueBridgeID"),
                   let clientKey = HueKeychainManager.shared.getClientKey(for: bridgeId) {
                    setupEntertainmentClient(clientKey: clientKey)
                }
                
                currentBridge = Bridge(
                    id: "",
                    internalipaddress: savedIP,
                    port: 443
                )
                
                connectionStatus = .connected
                startEventStream()
                // loadAllData() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ recreateAPIClient –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞
            } else {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                showSetup = true
                connectionStatus = .disconnected
                print("üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∂–¥–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            }
        }
    

    
    /// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç API –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º IP
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ViewModels
    private func recreateAPIClient(with ip: String) {
        print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å IP: \(ip)")
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä–µ–¥–∞—á–µ–π DataPersistenceService
        apiClient = HueAPIClient(bridgeIP: ip, dataPersistenceService: dataPersistenceService)
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö ViewModels –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ ViewModels...")
            self.lightsViewModel = LightsViewModel(apiClient: self.apiClient)
            self.scenesViewModel = ScenesViewModel(apiClient: self.apiClient)
            self.groupsViewModel = GroupsViewModel(apiClient: self.apiClient)
            self.sensorsViewModel = SensorsViewModel(apiClient: self.apiClient)
            self.rulesViewModel = RulesViewModel(apiClient: self.apiClient)
            
            print("‚úÖ ViewModels –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –Ω–æ–≤—ã–º API –∫–ª–∏–µ–Ω—Ç–æ–º")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application key –µ—Å–ª–∏ –µ—Å—Ç—å
            if let key = self.applicationKey {
                print("üîë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application key –≤ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
                self.apiClient.setApplicationKey(key)
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞
                print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ application key...")
                self.loadAllData()
            } else {
                print("‚ö†Ô∏è Application key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
            }
        }
    }
    

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        private func loadAllData() {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            guard connectionStatus == .connected else {
                print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
                return
            }
            
            print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –º–æ—Å—Ç–∞...")
            lightsViewModel.loadLights()
            scenesViewModel.loadScenes()
            groupsViewModel.loadGroups()
            sensorsViewModel.loadSensors()
            rulesViewModel.loadRules()
            loadBridgeCapabilities()
        }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
    private func startEventStream() {
        eventStreamCancellable?.cancel()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö ViewModels
        lightsViewModel.startEventStream()
        
        eventStreamCancellable = apiClient.connectToEventStream()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { _ in
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                },
                receiveValue: { [weak self] event in
                    self?.handleEvent(event)
                }
            )
    }
    
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
    private func handleEvent(_ event: HueEvent) {
        // –°–æ–±—ã—Ç–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö ViewModels —á–µ—Ä–µ–∑ eventPublisher
        performanceMetrics.eventsReceived += 1
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤
    private func checkResourceLimits(_ capabilities: BridgeCapabilities) {
        guard let limits = capabilities.resources else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç–∞–º
        if let lightLimit = limits.lights,
           lightsViewModel.lights.count > Int(Double(lightLimit) * 0.8) {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–º–ø")
        }
        
        if let ruleLimit = limits.rules,
           rulesViewModel.rules.count > Int(Double(ruleLimit) * 0.8) {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")
        }
        
        if let sceneLimit = limits.scenes,
           scenesViewModel.scenes.count > Int(Double(sceneLimit) * 0.8) {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω")
        }
    }
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Entertainment –∫–ª–∏–µ–Ω—Ç
    private func setupEntertainmentClient(clientKey: String) {
        guard let bridge = currentBridge else { return }
        entertainmentClient = HueEntertainmentClient(
            bridgeIP: bridge.internalipaddress,
            applicationKey: applicationKey ?? "",
            clientKey: clientKey
        )
    }
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private func setupPerformanceMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        apiClient.errorPublisher
            .sink { [weak self] error in
                switch error {
                case .rateLimitExceeded:
                    self?.performanceMetrics.rateLimitHits += 1
                case .bufferFull:
                    self?.performanceMetrics.bufferOverflows += 1
                default:
                    break
                }
            }
            .store(in: &cancellables)
    }
    

    
    // MARK: - Memory Management

    deinit {
        print("‚ôªÔ∏è AppViewModel –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        eventStreamCancellable?.cancel()
        apiClient.disconnectEventStream()
        cancellables.forEach { $0.cancel() }
        cancellables.removeAll()
        entertainmentClient?.stopSession()
        entertainmentClient = nil
    }
    
}

/// –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É
enum ConnectionStatus {
    case disconnected
    case searching
    case discovered
    case needsAuthentication
    case connected
    
    var description: String {
        switch self {
        case .disconnected:
            return "–û—Ç–∫–ª—é—á–µ–Ω–æ"
        case .searching:
            return "–ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤..."
        case .discovered:
            return "–ú–æ—Å—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
        case .needsAuthentication:
            return "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        case .connected:
            return "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
        }
    }
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
struct PerformanceMetrics {
    var eventsReceived: Int = 0
    var rateLimitHits: Int = 0
    var bufferOverflows: Int = 0
    var averageLatency: Double = 0
    
    mutating func reset() {
        eventsReceived = 0
        rateLimitHits = 0
        bufferOverflows = 0
        averageLatency = 0
    }
}



/// –ú–æ–¥–µ–ª—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–∞ Hue Bridge
struct HueBridgeQRCode {
    /// –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ—Å—Ç–∞
    let serialNumber: String
    
    /// ID –º–æ—Å—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    let bridgeId: String?
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ QR-–∫–æ–¥–∞
    init?(from qrString: String) {
        let cleaned = qrString.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –ü–∞—Ä—Å–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR-–∫–æ–¥–æ–≤
        if cleaned.hasPrefix("S#") {
            // –§–æ—Ä–º–∞—Ç: S#12345678
            self.serialNumber = String(cleaned.dropFirst(2))
            self.bridgeId = nil
        } else if let url = URL(string: cleaned),
                  let components = URLComponents(url: url, resolvingAgainstBaseURL: false) {
            // URL —Ñ–æ—Ä–º–∞—Ç: https://...?serial=S%2312345678&id=...
            var serial: String?
            var id: String?
            
            for queryItem in components.queryItems ?? [] {
                switch queryItem.name {
                case "serial":
                    serial = queryItem.value?.replacingOccurrences(of: "S#", with: "")
                case "id":
                    id = queryItem.value
                default:
                    break
                }
            }
            
            guard let serialNumber = serial else { return nil }
            self.serialNumber = serialNumber
            self.bridgeId = id
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return nil
        }
    }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å N-UPnP (Network Universal Plug and Play)
extension AppViewModel {
    /// –ü–æ–∏—Å–∫ –º–æ—Å—Ç–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ N-UPnP
   
      func discoverBridge(bySerial serial: String, completion: @escaping (Bridge?) -> Void) {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±–ª–∞—á–Ω—ã–π –ø–æ–∏—Å–∫
          apiClient.discoverBridgesViaCloud()
              .receive(on: DispatchQueue.main)
              .sink(
                  receiveCompletion: { _ in },
                  receiveValue: { bridges in
                      // –ò—â–µ–º –º–æ—Å—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ID
                      let foundBridge = bridges.first { bridge in
                          // ID –º–æ—Å—Ç–∞ –ù–ï –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
                          let bridgeId = bridge.id
                          return bridgeId.lowercased().contains(serial.lowercased()) ||
                                 serial.lowercased().contains(bridgeId.lowercased())
                      }
                      completion(foundBridge)
                  }
              )
              .store(in: &cancellables)
      }
    
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ description.xml
    func validateBridge(_ bridge: Bridge, completion: @escaping (Bool) -> Void) {
        print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ—Å—Ç \(bridge.internalipaddress)...")
        
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è description.xml
        guard let url = URL(string: "https://\(bridge.internalipaddress)/description.xml") else {
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è –º–æ—Å—Ç–∞")
            completion(false)
            return
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ—Å—Ç–∞: \(error)")
                completion(false)
                return
            }
            
            guard let data = data,
                  let xmlString = String(data: data, encoding: .utf8) else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å XML –¥–∞–Ω–Ω—ã–µ")
                completion(false)
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Philips Hue Bridge
            let isHueBridge = xmlString.contains("Philips hue") || 
                             xmlString.contains("Royal Philips Electronics") ||
                             xmlString.contains("modelName>Philips hue bridge")
            
            if isHueBridge {
                print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ Philips Hue Bridge")
            } else {
                print("‚ùå –≠—Ç–æ –Ω–µ Philips Hue Bridge")
            }
            
            completion(isHueBridge)
        }.resume()
    }
    
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Touch Link
    func connectWithTouchLink(bridge: Bridge, completion: @escaping (Bool) -> Void) {
        // Touch Link - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        // –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –º–æ—Å—Ç—É
        
        // –í API v2 Touch Link –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∫–Ω–æ–ø–∫–æ–π Link
        connectToBridge(bridge)
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var attempts = 0
        let maxAttempts = 10
        
        Timer.scheduledTimer(withTimeInterval: 3, repeats: true) { timer in
            attempts += 1
            
            self.createUser(appName: "PhilipsHueV2") { success in
                if success {
                    timer.invalidate()
                    completion(true)
                } else if attempts >= maxAttempts {
                    timer.invalidate()
                    completion(false)
                }
            }
        }
    }
}


extension AppViewModel {
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Keychain
    func loadSavedSettingsFromKeychain() {
        if let credentials = HueKeychainManager.shared.getLastBridgeCredentials() {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–∏ —Å–Ω–∞—á–∞–ª–∞
            applicationKey = credentials.applicationKey
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç (—Ç–µ–ø–µ—Ä—å loadAllData –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤ recreateAPIClient)
            recreateAPIClient(with: credentials.bridgeIP)
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Entertainment –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å client key
            if let clientKey = credentials.clientKey {
                setupEntertainmentClient(clientKey: clientKey)
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ—Å—Ç–∞
            currentBridge = Bridge(
                id: credentials.bridgeId,
                internalipaddress: credentials.bridgeIP,
                port: 443
            )
            
            connectionStatus = .connected
            startEventStream()
            // loadAllData() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ recreateAPIClient –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞
        } else {
            showSetup = true
        }
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    func saveCredentials() {
        guard let bridge = currentBridge,
              let appKey = applicationKey else { return }
        
        let clientKey = HueKeychainManager.shared.getClientKey(for: bridge.id)
        
        let credentials = HueKeychainManager.BridgeCredentials(
            bridgeId: bridge.id,
            bridgeIP: bridge.internalipaddress,
            applicationKey: appKey,
            clientKey: clientKey
        )
        
        _ = HueKeychainManager.shared.saveBridgeCredentials(credentials)
    }
    
    /// –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –º–æ—Å—Ç–∞ –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    func disconnectAndClearData() {
        guard let bridge = currentBridge else { return }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        disconnect()
        
        // –£–¥–∞–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Keychain
        HueKeychainManager.shared.deleteCredentials(for: bridge.id)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    func createUserEnhanced(appName: String, completion: @escaping (Result<Bool, Error>) -> Void) {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        apiClient.createUser(appName: appName, deviceName: deviceName)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                        if let hueError = error as? HueAPIError {
                            switch hueError {
                            case .linkButtonNotPressed:
                                completion(.failure(LinkButtonError.notPressed))
                            case .httpError(let statusCode):
                                if statusCode == 429 {
                                    completion(.failure(LinkButtonError.tooManyAttempts))
                                } else {
                                    completion(.failure(error))
                                }
                            default:
                                completion(.failure(error))
                            }
                        } else {
                            completion(.failure(error))
                        }
                    }
                },
                receiveValue: { [weak self] response in
                    if let success = response.success,
                       let username = success.username {
                        self?.applicationKey = username
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º client key –¥–ª—è Entertainment API
                        if let clientKey = success.clientkey {
                            self?.setupEntertainmentClient(clientKey: clientKey)
                        }
                        
                        self?.connectionStatus = .connected
                        self?.showSetup = false
                        self?.startEventStream()
                        self?.loadAllData()
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        self?.saveCredentials()
                        
                        completion(.success(true))
                    } else if let error = response.error {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
                        switch error.type {
                        case 101:
                            completion(.failure(LinkButtonError.notPressed))
                        case 7:
                            completion(.failure(LinkButtonError.invalidRequest))
                        default:
                            completion(.failure(LinkButtonError.unknown(error.description ?? "Unknown error")))
                        }
                    } else {
                        completion(.failure(LinkButtonError.unknown("No response")))
                    }
                }
            )
            .store(in: &cancellables)
    }
}

extension AppViewModel {
    
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    func createUserWithRetry(appName: String, completion: @escaping (Bool) -> Void) {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É
        guard let bridge = currentBridge else {
            print("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞")
            completion(false)
            return
        }
        
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ—Å—Ç—É: \(bridge.internalipaddress)")
        
        apiClient.createUserWithLocalNetworkCheck(appName: appName, deviceName: deviceName)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        print("‚ùå AppViewModel: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error)")
                        
                        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
                        if let nsError = error as NSError?,
                           nsError.code == -1009 {
                            print("üö´ AppViewModel: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!")
                            self.error = HueAPIError.localNetworkPermissionDenied
                        } else if let hueError = error as? HueAPIError,
                                  case .linkButtonNotPressed = hueError {
                            print("‚è≥ AppViewModel: –ö–Ω–æ–ø–∫–∞ Link –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞")
                            self.error = HueAPIError.linkButtonNotPressed
                            // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        } else {
                            print("‚ö†Ô∏è AppViewModel: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(error)")
                            self.error = error as? HueAPIError ?? HueAPIError.invalidResponse
                        }
                        
                        completion(false)
                    }
                },
                receiveValue: { [weak self] response in
                    if let success = response.success,
                       let username = success.username {
                        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω! Username: \(username)")
                        
                        self?.applicationKey = username
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º client key –¥–ª—è Entertainment API –≤ Keychain
                        if let clientKey = success.clientkey {
                            print("üîë Client key: \(clientKey)")
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Keychain –≤–º–µ—Å—Ç–æ UserDefaults –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            if let bridgeId = self?.currentBridge?.id {
                                _ = HueKeychainManager.shared.saveClientKey(clientKey, for: bridgeId)
                            }
                            self?.setupEntertainmentClient(clientKey: clientKey)
                        }
                        
                        self?.connectionStatus = .connected
                        self?.showSetup = false
                        self?.startEventStream()
                        self?.loadAllData()
                        self?.saveCredentials()
                        
                        completion(true)
                    } else {
                        print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                        completion(false)
                    }
                }
            )
            .store(in: &cancellables)
    }
}

/// –û—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Link
enum LinkButtonError: LocalizedError {
    case notPressed
    case tooManyAttempts
    case timeout
    case invalidRequest
    case unknown(String)
    
    var errorDescription: String? {
        switch self {
        case .notPressed:
            return "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Link –Ω–∞ Hue Bridge"
        case .tooManyAttempts:
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        case .timeout:
            return "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        case .invalidRequest:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É"
        case .unknown(let message):
            return "–û—à–∏–±–∫–∞: \(message)"
        }
    }
}
