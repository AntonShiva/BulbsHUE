//
//  AppViewModel+Reconnection.swift
//  BulbsHUE
//
//  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
//

import Foundation
import Combine
import Network

extension AppViewModel {
    
    // MARK: - Reconnection Properties
    
    private struct ReconnectionConfig {
        static let maxRetryAttempts = 5
        static let initialRetryDelay: TimeInterval = 2.0
        static let maxRetryDelay: TimeInterval = 30.0
        static let connectionCheckInterval: TimeInterval = 10.0
    }
    
    // MARK: - Public Reconnection Methods
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    func startConnectionMonitoring() {
        guard connectionStatus == .connected else {
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
        }
        
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        stopConnectionMonitoring()
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        connectionCheckTimer = Timer.scheduledTimer(withTimeInterval: ReconnectionConfig.connectionCheckInterval, repeats: true) { [weak self] _ in
            self?.checkConnectionHealth()
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if #available(iOS 12.0, *) {
            startNetworkPathMonitoring()
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    func stopConnectionMonitoring() {
        connectionCheckTimer?.invalidate()
        connectionCheckTimer = nil
        
        if #available(iOS 12.0, *) {
            if let monitor = networkMonitor as? NWPathMonitor {
                monitor.cancel()
            }
        }
        networkMonitor = nil
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    func checkConnectionHealth() {
        guard connectionStatus == .connected,
              let bridge = currentBridge else {
            return
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ—Å—Ç–∞
        apiClient.getBridgeConfig()
            .timeout(.seconds(5), scheduler: RunLoop.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    if case .failure = completion {
                        print("‚ö†Ô∏è –ú–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                        self?.handleConnectionLost()
                    }
                },
                receiveValue: { [weak self] config in
                    // –ú–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if let bridgeId = config.bridgeid, 
                       self?.currentBridge?.id.isEmpty == true {
                        self?.currentBridge?.id = bridgeId
                        self?.saveCredentials()
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    private func handleConnectionLost() {
        connectionStatus = .reconnecting
        eventStreamCancellable?.cancel()
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event streams
        lightsViewModel.stopEventStream()
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        attemptReconnection()
    }
    
    /// –ü—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ—Å—Ç—É
    func attemptReconnection(attemptNumber: Int = 1) {
        guard attemptNumber <= ReconnectionConfig.maxRetryAttempts else {
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            connectionStatus = .disconnected
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –º–æ—Å—Ç–∞
            rediscoverBridge()
            return
        }
        
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #\(attemptNumber)...")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π IP
        if let savedIP = currentBridge?.internalipaddress {
            tryConnectToIP(savedIP) { [weak self] success in
                if success {
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –º–æ—Å—Ç—É")
                    self?.onSuccessfulReconnection()
                } else {
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
                    let delay = min(
                        ReconnectionConfig.initialRetryDelay * pow(2, Double(attemptNumber - 1)),
                        ReconnectionConfig.maxRetryDelay
                    )
                    
                    print("‚è± –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ \(delay) —Å–µ–∫—É–Ω–¥...")
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                        self?.attemptReconnection(attemptNumber: attemptNumber + 1)
                    }
                }
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ IP, –∏—â–µ–º –º–æ—Å—Ç –∑–∞–Ω–æ–≤–æ
            rediscoverBridge()
        }
    }
    
    /// –ü—Ä–æ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP
    private func tryConnectToIP(_ ip: String, completion: @escaping (Bool) -> Void) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ—Å—Ç–∞ –ø–æ IP
        guard let url = URL(string: "https://\(ip)/api/\(applicationKey ?? "0")/config") else {
            completion(false)
            return
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 5.0
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –¥–µ–ª–µ–≥–∞—Ç–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        let session = URLSession(configuration: .default, delegate: HueURLSessionDelegate(), delegateQueue: nil)
        
        session.dataTask(with: request) { [weak self] data, response, error in
            DispatchQueue.main.async {
                if let httpResponse = response as? HTTPURLResponse,
                   httpResponse.statusCode == 200,
                   let data = data {
                    
                    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç
                    do {
                        let config = try JSONDecoder().decode(BridgeConfig.self, from: data)
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—Å—Ç–µ
                        if let bridgeId = config.bridgeid {
                            self?.currentBridge?.id = bridgeId
                        }
                        if let name = config.name {
                            self?.currentBridge?.name = name
                        }
                        
                        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º IP –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if self?.apiClient.bridgeIP != ip {
                            self?.recreateAPIClient(with: ip)
                        }
                        
                        completion(true)
                    } catch {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ—Å—Ç–∞: \(error)")
                        completion(false)
                    }
                } else {
                    print("‚ùå –ú–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É \(ip): \(error?.localizedDescription ?? "Unknown error")")
                    completion(false)
                }
            }
        }.resume()
    }
    
    /// –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ—Å—Ç –≤ —Å–µ—Ç–∏
    private func rediscoverBridge() {
        print("üîç –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ—Å—Ç–∞ –≤ —Å–µ—Ç–∏...")
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å Bridge ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        let bridgeId = currentBridge?.id ?? 
                      UserDefaults.standard.string(forKey: "lastUsedBridgeId") ??
                      UserDefaults.standard.string(forKey: "HueBridgeID") ??
                      HueKeychainManager.shared.getLastBridgeCredentials()?.bridgeId
        
        guard let savedBridgeId = bridgeId, !savedBridgeId.isEmpty else {
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID –º–æ—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            print("   üîç currentBridge?.id: \(currentBridge?.id ?? "nil")")
            print("   üîç lastUsedBridgeId: \(UserDefaults.standard.string(forKey: "lastUsedBridgeId") ?? "nil")")
            print("   üîç HueBridgeID: \(UserDefaults.standard.string(forKey: "HueBridgeID") ?? "nil")")
            print("   üîç Keychain bridgeId: \(HueKeychainManager.shared.getLastBridgeCredentials()?.bridgeId ?? "nil")")
            
            connectionStatus = .disconnected
            showSetup = true
            return
        }
        
        print("üîç –ò—â–µ–º –º–æ—Å—Ç —Å ID: \(savedBridgeId)")
        
        // –ò—â–µ–º –º–æ—Å—Ç –ø–æ ID
        searchForSpecificBridge(bridgeId: savedBridgeId) { [weak self] foundBridge in
            if let bridge = foundBridge {
                print("‚úÖ –ú–æ—Å—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–≤–æ–º—É –∞–¥—Ä–µ—Å—É: \(bridge.internalipaddress)")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–æ—Å—Ç
                self?.currentBridge = bridge
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                UserDefaults.standard.set(bridge.internalipaddress, forKey: "HueBridgeIP")
                UserDefaults.standard.set(bridge.id, forKey: "HueBridgeID") 
                UserDefaults.standard.set(bridge.id, forKey: "lastUsedBridgeId")
                
                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º IP
                self?.recreateAPIClient(with: bridge.internalipaddress)
                self?.onSuccessfulReconnection()
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Keychain
                self?.saveCredentials()
                
            } else {
                print("‚ùå –ú–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏")
                self?.connectionStatus = .disconnected
                self?.showSetup = true
            }
        }
    }
    
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    private func onSuccessfulReconnection() {
        connectionStatus = .connected
        showSetup = false
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º event stream
        startEventStream()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadAllData()
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        startConnectionMonitoring()
        
        print("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    }
    
    // MARK: - Network Path Monitoring (iOS 12+)
    
    @available(iOS 12.0, *)
    private func startNetworkPathMonitoring() {
        let monitor = NWPathMonitor()
        networkMonitor = monitor
        let queue = DispatchQueue(label: "NetworkMonitor")
        
        monitor.pathUpdateHandler = { [weak self] path in
            DispatchQueue.main.async {
                if path.status == .satisfied {
                    print("üåê –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞")
                    
                    // –ï—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if self?.connectionStatus == .disconnected ||
                       self?.connectionStatus == .reconnecting {
                        self?.attemptReconnection()
                    }
                } else {
                    print("üìµ –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
                    // –ù–µ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É, –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
                    if self?.connectionStatus == .connected {
                        self?.connectionStatus = .reconnecting
                    }
                }
            }
        }
        
        monitor.start(queue: queue)
    }
}

// MARK: - URLSession Delegate –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

private class HueURLSessionDelegate: NSObject, URLSessionDelegate {
    func urlSession(_ session: URLSession, 
                   didReceive challenge: URLAuthenticationChallenge,
                   completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) {
        
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã Hue Bridge
        if challenge.protectionSpace.authenticationMethod == NSURLAuthenticationMethodServerTrust {
            if let serverTrust = challenge.protectionSpace.serverTrust {
                let credential = URLCredential(trust: serverTrust)
                completionHandler(.useCredential, credential)
                return
            }
        }
        
        completionHandler(.performDefaultHandling, nil)
    }
}

// MARK: - Connection Status Extension

extension ConnectionStatus {
    static let reconnecting = ConnectionStatus.connecting // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
}
