import Foundation
import Combine

// MARK: - Bridge Discovery

extension AppViewModel {
    
    /// –ù–∞—á–∏–Ω–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    func searchForBridges() {
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤...")
        connectionStatus = ConnectionStatus.searching
        discoveredBridges.removeAll()
        error = nil
        
        if #available(iOS 14.0, *) {
            let permissionChecker = LocalNetworkPermissionChecker()
            Task {
                do {
                    let hasPermission = try await permissionChecker.requestAuthorization()
                    await MainActor.run {
                        if hasPermission {
                            self.startDiscoveryProcess()
                        } else {
                            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                            self.connectionStatus = ConnectionStatus.disconnected
                            self.error = HueAPIError.localNetworkPermissionDenied
                        }
                    }
                } catch {
                    await MainActor.run {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: \(error)")
                        self.connectionStatus = ConnectionStatus.disconnected
                        self.error = HueAPIError.localNetworkPermissionDenied
                    }
                }
            }
        } else {
            startDiscoveryProcess()
        }
    }
    
    /// –ü–æ–∏—Å–∫ –º–æ—Å—Ç–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ N-UPnP
    func discoverBridge(bySerial serial: String, completion: @escaping (Bridge?) -> Void) {
        apiClient.discoverBridgesViaCloud()
            .sink(
                receiveCompletion: { _ in },
                receiveValue: { bridges in
                    let foundBridge = bridges.first { bridge in
                        let bridgeId = bridge.id
                        return bridgeId.lowercased().contains(serial.lowercased()) ||
                               serial.lowercased().contains(bridgeId.lowercased())
                    }
                    completion(foundBridge)
                }
            )
            .store(in: &cancellables)
    }
    
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ description.xml
    func validateBridge(_ bridge: Bridge, completion: @escaping (Bool) -> Void) {
        print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ—Å—Ç \(bridge.internalipaddress)...")
        
        guard let url = URL(string: "https://\(bridge.internalipaddress)/description.xml") else {
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è –º–æ—Å—Ç–∞")
            completion(false)
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ—Å—Ç–∞: \(error)")
                completion(false)
                return
            }
            
            guard let data = data,
                  let xmlString = String(data: data, encoding: .utf8) else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å XML –¥–∞–Ω–Ω—ã–µ")
                completion(false)
                return
            }
            
            let isHueBridge = xmlString.contains("Philips hue") ||
                             xmlString.contains("Royal Philips Electronics") ||
                             xmlString.contains("modelName>Philips hue bridge")
            
            if isHueBridge {
                print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ Philips Hue Bridge")
            } else {
                print("‚ùå –≠—Ç–æ –Ω–µ Philips Hue Bridge")
            }
            
            completion(isHueBridge)
        }.resume()
    }
    
    // MARK: - Private Discovery Methods
    
    private func startDiscoveryProcess() {
        if #available(iOS 12.0, *) {
            let discovery = HueBridgeDiscovery()
            discovery.discoverBridges { [weak self] bridges in
                self?.handleDiscoveryResults(bridges)
            }
        } else {
            self.handleLegacyDiscovery()
        }
    }
    
    private func handleDiscoveryResults(_ bridges: [Bridge]) {
        Task { @MainActor in
            print("üìã Discovery –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: \(bridges.count) –º–æ—Å—Ç–æ–≤")
            for bridge in bridges {
                print("  üì° –ú–æ—Å—Ç: \(bridge.id) at \(bridge.internalipaddress)")
            }

            let deduped: [Bridge] = bridges.reduce(into: []) { acc, item in
                var normalized = item
                normalized.id = item.normalizedId
                if !acc.contains(where: { $0.normalizedId == normalized.normalizedId ||
                                        $0.internalipaddress == normalized.internalipaddress }) {
                    acc.append(normalized)
                }
            }
            self.discoveredBridges = deduped
            
            if bridges.isEmpty {
                print("‚ùå –ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.connectionStatus = .disconnected
                #if os(iOS)
                self.error = HueAPIError.localNetworkPermissionDenied
                #endif
            } else {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö): \(deduped.count)")
                self.connectionStatus = .discovered
                self.error = nil
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ—Å—Ç - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
                if deduped.count == 1, let singleBridge = deduped.first {
                    print("üéØ –ù–∞–π–¥–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ—Å—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                        self.connectToBridge(singleBridge)
                    }
                }
            }
        }
    }
    
    private func handleLegacyDiscovery() {
        print("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy discovery –¥–ª—è iOS < 12.0")
        Task { @MainActor in
            self.connectionStatus = .disconnected
            self.error = HueAPIError.bridgeNotFound
        }
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ AppViewModel+Discovery.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ AppViewModel –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Hue Bridge –≤ —Å–µ—Ç–∏.
 –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã discovery: cloud, mDNS, IP scan.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - searchForBridges() - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤
 - discoverBridge(bySerial:) - –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ N-UPnP
 - validateBridge() - –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞
 - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è iOS 14+
 - –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 appViewModel.searchForBridges()
 appViewModel.discoverBridge(bySerial: "ABC123") { bridge in ... }
 appViewModel.validateBridge(bridge) { isValid in ... }
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueBridgeDiscovery –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞
 - LocalNetworkPermissionChecker –¥–ª—è iOS 14+
 - HueAPIClient.discoverBridgesViaCloud() –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - AppViewModel.swift - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
 - HueBridgeDiscovery.swift - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ discovery
 - LocalNetworkPermissionChecker.swift - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */
