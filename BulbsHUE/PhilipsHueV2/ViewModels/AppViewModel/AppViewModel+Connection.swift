//
//  AppViewModel+Connection.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/15/25.
//

import Foundation
import Combine
#if canImport(UIKit)
import UIKit
#else
import AppKit
#endif

// MARK: - Bridge Connection

extension AppViewModel {
    
    /// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ—Å—Ç—É
    func connectToBridge(_ bridge: Bridge) {
        currentBridge = bridge
        UserDefaults.standard.set(bridge.internalipaddress, forKey: "HueBridgeIP")
        
        recreateAPIClient(with: bridge.internalipaddress)
        
        apiClient.getBridgeConfig()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    if case .failure = completion {
                        self?.connectionStatus = .disconnected
                    }
                },
                receiveValue: { [weak self] config in
                    if let apiVersion = config.apiversion,
                       apiVersion.compare("1.46.0", options: .numeric) == .orderedAscending {
                        self?.error = HueAPIError.outdatedBridge
                        return
                    }
                    
                    if let bridgeId = config.bridgeid {
                        self?.currentBridge?.id = bridgeId
                    }
                    
                    if let key = self?.applicationKey {
                        self?.connectionStatus = .connected
                        self?.startEventStream()
                        self?.loadAllData()
                        self?.showSetup = false
                    } else {
                        self?.connectionStatus = .needsAuthentication
                        self?.showSetup = true
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ—Å—Ç—É
    func createUser(appName: String, completion: @escaping (Bool) -> Void) {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        apiClient.createUser(appName: appName, deviceName: deviceName)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        if case HueAPIError.linkButtonNotPressed = error {
                            completion(false)
                        } else {
                            completion(false)
                        }
                    }
                },
                receiveValue: { [weak self] response in
                    if let success = response.success,
                       let username = success.username {
                        self?.applicationKey = username
                        
                        if let clientKey = success.clientkey {
                            UserDefaults.standard.set(clientKey, forKey: "HueClientKey")
                            self?.setupEntertainmentClient(clientKey: clientKey)
                        }
                        self?.connectionStatus = .connected
                        self?.showSetup = false
                        self?.startEventStream()
                        self?.loadAllData()
                        completion(true)
                    } else if let error = response.error {
                        if error.type == 101 {
                            self?.error = HueAPIError.linkButtonNotPressed
                        }
                        completion(false)
                    } else {
                        completion(false)
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–æ—Å—Ç—É
    func createUser(on bridge: Bridge, appName: String, deviceName: String, completion: @escaping (Bool) -> Void) {
        if currentBridge?.id != bridge.id {
            connectToBridge(bridge)
        }
        createUser(appName: appName, completion: completion)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    func createUserWithRetry(appName: String, completion: @escaping (Bool) -> Void) {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        guard let bridge = currentBridge else {
            print("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞")
            completion(false)
            return
        }
        
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ—Å—Ç—É: \(bridge.internalipaddress)")
        
        apiClient.createUserWithLocalNetworkCheck(appName: appName, deviceName: deviceName)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error)")
                        
                        if let nsError = error as NSError?,
                           nsError.code == -1009 {
                            print("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏!")
                            self.error = HueAPIError.localNetworkPermissionDenied
                        } else if case HueAPIError.linkButtonNotPressed = error as? HueAPIError ?? HueAPIError.invalidResponse {
                            print("‚è≥ –ö–Ω–æ–ø–∫–∞ Link –µ—â–µ –Ω–µ –Ω–∞–∂–∞—Ç–∞")
                        }
                        
                        completion(false)
                    }
                },
                receiveValue: { [weak self] response in
                    if let success = response.success,
                       let username = success.username {
                        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω! Username: \(username)")
                        
                        self?.applicationKey = username
                        
                        if let clientKey = success.clientkey {
                            print("üîë Client key: \(clientKey)")
                            if let bridgeId = self?.currentBridge?.id {
                                _ = HueKeychainManager.shared.saveClientKey(clientKey, for: bridgeId)
                            }
                            self?.setupEntertainmentClient(clientKey: clientKey)
                        }
                        
                        self?.connectionStatus = .connected
                        self?.showSetup = false
                        self?.startEventStream()
                        self?.loadAllData()
                        self?.saveCredentials()
                        
                        completion(true)
                    } else {
                        print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                        completion(false)
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    func createUserEnhanced(appName: String, completion: @escaping (Result<Bool, Error>) -> Void) {
        #if canImport(UIKit)
        let deviceName = UIDevice.current.name
        #else
        let deviceName = Host.current().localizedName ?? "Mac"
        #endif
        
        apiClient.createUser(appName: appName, deviceName: deviceName)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        if let hueError = error as? HueAPIError {
                            switch hueError {
                            case .linkButtonNotPressed:
                                completion(.failure(LinkButtonError.notPressed))
                            case .httpError(let statusCode):
                                if statusCode == 429 {
                                    completion(.failure(LinkButtonError.tooManyAttempts))
                                } else {
                                    completion(.failure(error))
                                }
                            default:
                                completion(.failure(error))
                            }
                        } else {
                            completion(.failure(error))
                        }
                    }
                },
                receiveValue: { [weak self] response in
                    if let success = response.success,
                       let username = success.username {
                        self?.applicationKey = username
                        
                        if let clientKey = success.clientkey {
                            self?.setupEntertainmentClient(clientKey: clientKey)
                        }
                        
                        self?.connectionStatus = .connected
                        self?.showSetup = false
                        self?.startEventStream()
                        self?.loadAllData()
                        self?.saveCredentials()
                        
                        completion(.success(true))
                    } else if let error = response.error {
                        switch error.type {
                        case 101:
                            completion(.failure(LinkButtonError.notPressed))
                        case 7:
                            completion(.failure(LinkButtonError.invalidRequest))
                        default:
                            completion(.failure(LinkButtonError.unknown(error.description ?? "Unknown error")))
                        }
                    } else {
                        completion(.failure(LinkButtonError.unknown("No response")))
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Touch Link
    func connectWithTouchLink(bridge: Bridge, completion: @escaping (Bool) -> Void) {
        connectToBridge(bridge)
        
        var attempts = 0
        let maxAttempts = 10
        
        Timer.scheduledTimer(withTimeInterval: 3, repeats: true) { timer in
            attempts += 1
            
            self.createUser(appName: "PhilipsHueV2") { success in
                if success {
                    timer.invalidate()
                    completion(true)
                } else if attempts >= maxAttempts {
                    timer.invalidate()
                    completion(false)
                }
            }
        }
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –º–æ—Å—Ç–∞
    func loadBridgeCapabilities() {
        apiClient.getBridgeCapabilities()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { _ in },
                receiveValue: { [weak self] capabilities in
                    self?.bridgeCapabilities = capabilities
                    self?.checkResourceLimits(capabilities)
                }
            )
            .store(in: &cancellables)
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ AppViewModel+Connection.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ AppViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Hue Bridge.
 –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏ API –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - connectToBridge() - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–æ—Å—Ç—É
 - createUser() - –±–∞–∑–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 - createUserEnhanced() - —Å–æ–∑–¥–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 - createUserWithRetry() - —Å–æ–∑–¥–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 - connectWithTouchLink() - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Touch Link
 - loadBridgeCapabilities() - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –º–æ—Å—Ç–∞
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 appViewModel.connectToBridge(bridge)
 appViewModel.createUser(appName: "MyApp") { success in ... }
 appViewModel.createUserEnhanced(appName: "MyApp") { result in ... }
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
 - HueKeychainManager –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è credentials
 - HueEntertainmentClient –¥–ª—è Entertainment API
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - AppViewModel.swift - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å
 - AppViewModel+LinkButton.swift - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Link Button
 - AppViewModel+Keychain.swift - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
