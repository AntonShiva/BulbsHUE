import Foundation
import Combine
#if canImport(UIKit)
import UIKit
#else
import AppKit
#endif

/// –ì–ª–∞–≤–Ω—ã–π ViewModel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –¥—Ä—É–≥–∏–µ ViewModels
@MainActor
class AppViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var connectionStatus: ConnectionStatus = .disconnected
    @Published var discoveredBridges: [Bridge] = []
    @Published var currentBridge: Bridge?
    @Published var applicationKey: String? {
        didSet {
            if let key = applicationKey {
                UserDefaults.standard.set(key, forKey: "HueApplicationKey")
                apiClient.setApplicationKey(key)
            }
        }
    }
    @Published var showSetup: Bool = false
    @Published var bridgeCapabilities: BridgeCapabilities?
    @Published var performanceMetrics = PerformanceMetrics()
    @Published var error: Error?
    
    // MARK: - Child ViewModels
    
    @Published var lightsViewModel: LightsViewModel
    @Published var scenesViewModel: ScenesViewModel
    @Published var groupsViewModel: GroupsViewModel
    @Published var sensorsViewModel: SensorsViewModel
    @Published var rulesViewModel: RulesViewModel
    
    // MARK: - Internal Properties (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
    
    internal var apiClient: HueAPIClient
    internal var cancellables = Set<AnyCancellable>()
    internal var eventStreamCancellable: AnyCancellable?
    internal var entertainmentClient: HueEntertainmentClient?
    internal weak var dataPersistenceService: DataPersistenceService?
    
    // MARK: - Public Properties
    
    var dataService: DataPersistenceService? {
        return dataPersistenceService
    }
    
    // MARK: - Initialization
    
    init(dataPersistenceService: DataPersistenceService? = nil) {
        self.dataPersistenceService = dataPersistenceService
        self.apiClient = HueAPIClient(bridgeIP: "", dataPersistenceService: dataPersistenceService)
        
        self.lightsViewModel = LightsViewModel(apiClient: apiClient)
        self.scenesViewModel = ScenesViewModel(apiClient: apiClient)
        self.groupsViewModel = GroupsViewModel(apiClient: apiClient)
        self.sensorsViewModel = SensorsViewModel(apiClient: apiClient)
        self.rulesViewModel = RulesViewModel(apiClient: apiClient)
        
        setupPerformanceMonitoring()
        setupAppStateObservation()
        loadSavedSettings()
    }
    
    // MARK: - Public Methods
    
    func hasValidConnection() -> Bool {
        return apiClient.hasValidConnection()
    }
    
    func refreshAll() {
        loadAllData()
    }
    
    func disconnect() {
        connectionStatus = .disconnected
        currentBridge = nil
        applicationKey = nil
        eventStreamCancellable?.cancel()
        
        UserDefaults.standard.removeObject(forKey: "HueBridgeIP")
        UserDefaults.standard.removeObject(forKey: "HueApplicationKey")
    }
    
    // MARK: - Internal Methods (–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö)
    
    internal func recreateAPIClient(with ip: String) {
        print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å IP: \(ip)")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event streams –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º
        lightsViewModel.stopEventStream()
        
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º
        cancellables.forEach { $0.cancel() }
        cancellables.removeAll()
        eventStreamCancellable?.cancel()
        eventStreamCancellable = nil
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π API –∫–ª–∏–µ–Ω—Ç
        apiClient = HueAPIClient(bridgeIP: ip, dataPersistenceService: dataPersistenceService)
        
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ ViewModels...")
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ ViewModels —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.lightsViewModel = LightsViewModel(apiClient: self.apiClient)
        self.scenesViewModel = ScenesViewModel(apiClient: self.apiClient)
        self.groupsViewModel = GroupsViewModel(apiClient: self.apiClient)
        self.sensorsViewModel = SensorsViewModel(apiClient: self.apiClient)
        self.rulesViewModel = RulesViewModel(apiClient: self.apiClient)
        
        print("‚úÖ ViewModels –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –Ω–æ–≤—ã–º API –∫–ª–∏–µ–Ω—Ç–æ–º")
        
        if let key = self.applicationKey {
            print("üîë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º application key –≤ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
            self.apiClient.setApplicationKey(key)
            print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ application key...")
            self.loadAllData()
        } else {
            print("‚ö†Ô∏è Application key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
        }
    }
    
    internal func loadAllData() {
        guard connectionStatus == .connected else {
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö")
            return
        }
        
        print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –º–æ—Å—Ç–∞...")
        lightsViewModel.loadLights()
        scenesViewModel.loadScenes()
        groupsViewModel.loadGroups()
        sensorsViewModel.loadSensors()
        rulesViewModel.loadRules()
        loadBridgeCapabilities()
    }
    
    internal func startEventStream() {
        eventStreamCancellable?.cancel()
        
        lightsViewModel.startEventStream()
        
        eventStreamCancellable = apiClient.connectToEventStream()
            .sink(
                receiveCompletion: { _ in },
                receiveValue: { [weak self] event in
                    self?.handleEvent(event)
                }
            )
    }
    
    internal func handleEvent(_ event: HueEvent) {
        performanceMetrics.eventsReceived += 1
    }
    
    internal func setupEntertainmentClient(clientKey: String) {
        guard let bridge = currentBridge else { return }
        entertainmentClient = HueEntertainmentClient(
            bridgeIP: bridge.internalipaddress,
            applicationKey: applicationKey ?? "",
            clientKey: clientKey
        )
    }
    
    internal func saveClientKey(_ clientKey: String) {
        guard let bridgeId = currentBridge?.id else { return }
        _ = HueKeychainManager.shared.saveClientKey(clientKey, for: bridgeId)
        setupEntertainmentClient(clientKey: clientKey)
    }
    
    // MARK: - Private Methods
    
    private func loadSavedSettings() {
        if let credentials = HueKeychainManager.shared.getLastBridgeCredentials() {
            loadSavedSettingsFromKeychain()
            return
        }
        
        if let savedIP = UserDefaults.standard.string(forKey: "HueBridgeIP"),
           let savedKey = UserDefaults.standard.string(forKey: "HueApplicationKey") {
            
            applicationKey = savedKey
            recreateAPIClient(with: savedIP)
            
            if let bridgeId = UserDefaults.standard.string(forKey: "HueBridgeID"),
               let clientKey = HueKeychainManager.shared.getClientKey(for: bridgeId) {
                setupEntertainmentClient(clientKey: clientKey)
            }
            
            currentBridge = Bridge(
                id: "",
                internalipaddress: savedIP,
                port: 443
            )
            
            connectionStatus = .connected
            startEventStream()
        } else {
            showSetup = true
            connectionStatus = .disconnected
            print("üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∂–¥–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        }
    }
    
    private func setupAppStateObservation() {
        #if canImport(UIKit)
        // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ñ–æ–Ω–∞ - –¥–µ–ª–∞–µ–º –º—è–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)
            .sink { [weak self] _ in
                if self?.connectionStatus == .connected {
                    print("üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø")
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º refreshLightsWithStatus –≤–º–µ—Å—Ç–æ loadLights
                    // –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    Task { @MainActor in
                        await self?.lightsViewModel.refreshLightsWithStatus()
                    }
                } else {
                    print("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã–º - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                }
            }
            .store(in: &cancellables)
        
        // –ü—Ä–∏ —É—Ö–æ–¥–µ –≤ —Ñ–æ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        NotificationCenter.default.publisher(for: UIApplication.didEnterBackgroundNotification)
            .sink { [weak self] _ in
                print("üíæ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                // DataPersistenceService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ SwiftData
            }
            .store(in: &cancellables)
        #endif
    }
    
    private func setupPerformanceMonitoring() {
        apiClient.errorPublisher
            .sink { [weak self] error in
                switch error {
                case .rateLimitExceeded:
                    self?.performanceMetrics.rateLimitHits += 1
                case .bufferFull:
                    self?.performanceMetrics.bufferOverflows += 1
                default:
                    break
                }
            }
            .store(in: &cancellables)
    }
    
     func checkResourceLimits(_ capabilities: BridgeCapabilities) {
        guard let limits = capabilities.resources else { return }
        
        if let lightLimit = limits.lights,
           lightsViewModel.lights.count > Int(Double(lightLimit) * 0.8) {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–º–ø")
        }
        
        if let ruleLimit = limits.rules,
           rulesViewModel.rules.count > Int(Double(ruleLimit) * 0.8) {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")
        }
        
        if let sceneLimit = limits.scenes,
           scenesViewModel.scenes.count > Int(Double(sceneLimit) * 0.8) {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 80% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω")
        }
    }
    
    // MARK: - Deinit
    
    deinit {
        print("‚ôªÔ∏è AppViewModel –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        eventStreamCancellable?.cancel()
        apiClient.disconnectEventStream()
        cancellables.forEach { $0.cancel() }
        cancellables.removeAll()
        entertainmentClient?.stopSession()
        entertainmentClient = nil
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ AppViewModel.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –ì–ª–∞–≤–Ω—ã–π ViewModel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hue Bridge
 –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π —Ä–∞–±–æ—Ç—É –¥–æ—á–µ—Ä–Ω–∏—Ö ViewModels.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö ViewModels (lights, scenes, groups, sensors, rules)
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª–∏–µ–Ω—Ç–æ–º
 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º —Å–æ–±—ã—Ç–∏–π
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 let appViewModel = AppViewModel(dataPersistenceService: dataService)
 appViewModel.searchForBridges()
 appViewModel.connectToBridge(bridge)
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - HueAPIClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
 - DataPersistenceService –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 - –î–æ—á–µ—Ä–Ω–∏–µ ViewModels –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - AppViewModel+Discovery.swift - –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤
 - AppViewModel+Connection.swift - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É
 - AppViewModel+LinkButton.swift - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Link Button
 - AppViewModel+Keychain.swift - —Ä–∞–±–æ—Ç–∞ —Å Keychain
 - AppViewModel+QRCode.swift - —Ä–∞–±–æ—Ç–∞ —Å QR –∫–æ–¥–∞–º–∏
 */
