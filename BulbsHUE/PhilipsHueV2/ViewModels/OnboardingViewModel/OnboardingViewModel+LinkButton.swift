//
//  OnboardingViewModel+LinkButton.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/16/25.
//

import SwiftUI
import Combine

extension OnboardingViewModel {
    
    // MARK: - Link Button Enhanced
    
    func startBridgeConnectionFixed() {
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            connectionError = "–ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            return
        }
        
        guard !isConnecting else {
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            return
        }
        
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.id)")
        
        isConnecting = true
        connectionAttempts = 0
        linkButtonPressed = false
        connectionError = nil
        linkButtonCountdown = 60
        
        appViewModel.connectToBridge(bridge)
        
        appViewModel.createUserWithLinkButtonHandling(
            appName: "BulbsHUE",
            onProgress: { [weak self] state in
                self?.handleLinkButtonState(state)
            },
            completion: { [weak self] result in
                self?.handleConnectionResult(result)
            }
        )
    }
    
    private func handleLinkButtonState(_ state: LinkButtonState) {
        Task { @MainActor in
            switch state {
            case .idle:
                print("üîÑ Link Button: –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
                self.isConnecting = false
                self.connectionAttempts = 0
                
            case .waiting(let attempt, let maxAttempts):
                print("‚è≥ Link Button: –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è (–ø–æ–ø—ã—Ç–∫–∞ \(attempt)/\(maxAttempts))")
                self.isConnecting = true
                self.connectionAttempts = attempt
                self.linkButtonCountdown = Swift.max(0, (maxAttempts - attempt) * 2)
                
                if !self.showLinkButtonAlert {
                    self.showLinkButtonAlert = true
                }
                
            case .success:
                print("‚úÖ Link Button: –£–°–ü–ï–®–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!")
                self.isConnecting = false
                self.linkButtonPressed = true
                self.showLinkButtonAlert = false
                self.connectionError = nil
                self.currentStep = .connected
                
                Task { @MainActor in
                    try? await Task.sleep(nanoseconds: 1_000_000_000)
                    self.appViewModel.showSetup = false
                }
                
            case .error(let message):
                print("‚ùå Link Button: –û—à–∏–±–∫–∞ - \(message)")
                self.isConnecting = false
                self.connectionError = message
                self.showLinkButtonAlert = false
                
            case .timeout:
                print("‚è∞ Link Button: –¢–∞–π–º–∞—É—Ç")
                self.isConnecting = false
                self.connectionError = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É Link –Ω–∞ –º–æ—Å—Ç—É."
                self.showLinkButtonAlert = false
            }
        }
    }
    
    private func handleConnectionResult(_ result: Result<String, Error>) {
        Task { @MainActor in
            switch result {
            case .success(let username):
                print("üéâ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! Username: \(username)")
                self.linkButtonPressed = true
                self.isConnecting = false
                self.connectionError = nil
                
            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error)")
                self.isConnecting = false
                
                if let linkError = error as? LinkButtonError {
                    switch linkError {
                    case .timeout:
                        self.connectionError = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (60 —Å–µ–∫—É–Ω–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É Link."
                    case .localNetworkDenied:
                        self.connectionError = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö iOS."
                        self.showLocalNetworkAlert = true
                    case .bridgeUnavailable:
                        self.connectionError = "–ú–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏."
                    default:
                        self.connectionError = linkError.localizedDescription
                    }
                } else {
                    self.connectionError = error.localizedDescription
                }
            }
        }
    }
    
    func cancelLinkButtonFixed() {
        print("üö´ –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Link Button")
        
        isConnecting = false
        linkButtonPressed = false
        connectionAttempts = 0
        linkButtonCountdown = 60
        connectionError = nil
        showLinkButtonAlert = false
    }
    
    func attemptCreateUserImproved() {
        if appViewModel.connectionStatus == .connected {
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏")
            cancelLinkButton()
            return
        }
        
        guard let bridge = selectedBridge else {
            print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –º–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        }
        
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–æ—Å—Ç—É \(bridge.internalipaddress)...")
        
        appViewModel.createUserWithRetry(appName: "BulbsHUE") { [weak self] success in
            if success {
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                self?.cancelLinkButton()
                self?.currentStep = .connected
                
                Task { @MainActor in
                    try? await Task.sleep(nanoseconds: 1_000_000_000)
                    self?.appViewModel.showSetup = false
                }
            }
        }
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ OnboardingViewModel+LinkButton.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Link Button —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
 - startBridgeConnectionFixed() - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
 - handleLinkButtonState() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π Link Button
 - handleConnectionResult() - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 - attemptCreateUserImproved() - —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 viewModel.startBridgeConnectionFixed()
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - LinkButtonState enum –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
 - LinkButtonError –¥–ª—è –æ—à–∏–±–æ–∫
 - AppViewModel –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
 */
