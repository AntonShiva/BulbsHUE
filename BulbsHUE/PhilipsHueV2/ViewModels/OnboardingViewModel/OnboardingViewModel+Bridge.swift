//
//  OnboardingViewModel+Bridge.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/16/25.
//

import SwiftUI

extension OnboardingViewModel {
    
    // MARK: - Bridge Management
    
    func selectBridge(_ bridge: Bridge) {
        print("üì° –í—ã–±—Ä–∞–Ω –º–æ—Å—Ç: \(bridge.id)")
        selectedBridge = bridge
        appViewModel.currentBridge = bridge
    }
    
    func startBridgeSearch() {
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏")
        isSearchingBridges = true
        discoveredBridges.removeAll()
        connectionError = nil
        
        appViewModel.searchForBridges()
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏—é –Ω–∞ async –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        startSearchProgressMonitoring()
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏ —Å proper cancellation
    @MainActor
    private func startSearchProgressMonitoring() {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        searchMonitoringTask?.cancel()
        
        let startTime = Date()
        let maxSearchTime: TimeInterval = 30.0
        let checkInterval: TimeInterval = 0.5
        
        searchMonitoringTask = Task { [weak self] in
            guard let self = self else { return }
            
            while self.isSearchingBridges && !Task.isCancelled {
                await MainActor.run {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ AppViewModel
                    self.updateFromAppViewModel()
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if await self.shouldStopSearching(startTime: startTime, maxSearchTime: maxSearchTime) {
                    break
                }
                
                // –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
                try? await Task.sleep(nanoseconds: UInt64(checkInterval * 1_000_000_000))
            }
            
            // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π Task
            await MainActor.run {
                self.searchMonitoringTask = nil
            }
        }
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
    @MainActor
    func stopBridgeSearch() {
        isSearchingBridges = false
        searchMonitoringTask?.cancel()
        searchMonitoringTask = nil
        print("üõë –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    @MainActor
    private func shouldStopSearching(startTime: Date, maxSearchTime: TimeInterval) -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if appViewModel.connectionStatus == .connected ||
           appViewModel.connectionStatus == .needsAuthentication {
            print("‚úÖ –ú–æ—Å—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            isSearchingBridges = false
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—Å—Ç—ã
        if appViewModel.connectionStatus == .discovered && !appViewModel.discoveredBridges.isEmpty {
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(appViewModel.discoveredBridges.count)")
            isSearchingBridges = false
            updateFromAppViewModel()
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
        if let error = appViewModel.error as? HueAPIError,
           case .localNetworkPermissionDenied = error {
            print("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
            isSearchingBridges = false
            showLocalNetworkAlert = true
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if Date().timeIntervalSince(startTime) > maxSearchTime {
            print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞")
            isSearchingBridges = false
            if appViewModel.discoveredBridges.isEmpty {
                connectionError = "–ú–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
            } else {
                updateFromAppViewModel()
            }
            return true
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
        if appViewModel.connectionStatus != .searching {
            isSearchingBridges = false
            updateFromAppViewModel()
            return true
        }
        
        return false
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ OnboardingViewModel+Bridge.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Hue Bridge - –ø–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
 - selectBridge() - –≤—ã–±–æ—Ä –º–æ—Å—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 - startBridgeSearch() - –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤ –≤ —Å–µ—Ç–∏
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 viewModel.startBridgeSearch()
 viewModel.selectBridge(bridge)
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - AppViewModel –¥–ª—è API –ø–æ–∏—Å–∫–∞
 - Bridge –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
 */
