//
//  OnboardingViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 30.07.2025.

import SwiftUI
import AVFoundation
import Combine

@MainActor
class OnboardingViewModel: ObservableObject {
    // MARK: - Published Properties
    
    @Published var currentStep: OnboardingStep = .welcome
    @Published var showLocalNetworkAlert = false
    @Published var showPermissionAlert = false
    @Published var showLinkButtonAlert = false
    @Published var isSearchingBridges = false
    @Published var linkButtonCountdown = 30
    @Published var discoveredBridges: [Bridge] = []
    @Published var selectedBridge: Bridge?
    @Published var isConnecting = false
    @Published var isRequestingPermission = false
    @Published var linkButtonPressed = false
    @Published var connectionError: String? = nil
    
    // MARK: - Internal Properties
    
    internal var appViewModel: AppViewModelProtocol
    internal var linkButtonTimer: Timer?
    internal var cancellables = Set<AnyCancellable>()
    internal var connectionAttempts = 0
    internal let maxConnectionAttempts = 30
    internal var lastLightRequestTime = Date.distantPast
    internal var lastGroupRequestTime = Date.distantPast
    internal let lightRequestInterval: TimeInterval = 0.1
    internal let groupRequestInterval: TimeInterval = 1.0
    
    // MARK: - Initialization
    
    init(appViewModel: AppViewModelProtocol) {
        self.appViewModel = appViewModel
        setupBindings()
    }
    
    // MARK: - Setup
    
    private func setupBindings() {
        appViewModel.connectionStatusPublisher
            .sink { [weak self] status in
                self?.handleConnectionStatusChange(status)
            }
            .store(in: &cancellables)
        
        appViewModel.discoveredBridgesPublisher
            .sink { [weak self] bridges in
                self?.handleDiscoveredBridges(bridges)
            }
            .store(in: &cancellables)
        
        appViewModel.errorPublisher
            .sink { [weak self] error in
                if let hueError = error as? HueAPIError {
                    self?.handleConnectionError(hueError)
                }
            }
            .store(in: &cancellables)
    }
    
    // MARK: - Internal Helper Methods
    
    internal func handleConnectionStatusChange(_ status: ConnectionStatus) {
        switch status {
        case .connected:
            print("‚úÖ OnboardingViewModel: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            handleSuccessfulConnection()
        case .discovered:
            if !discoveredBridges.isEmpty {
                print("üì° OnboardingViewModel: –ú–æ—Å—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            }
        case .needsAuthentication:
            print("üîê OnboardingViewModel: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–Ω–∞–∂–∞—Ç–∏–µ Link Button)")
        case .disconnected:
            print("‚ùå OnboardingViewModel: –û—Ç–∫–ª—é—á–µ–Ω–æ")
        case .searching:
            print("üîç OnboardingViewModel: –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤...")
        @unknown default:
            break
        }
    }
    
    internal func handleDiscoveredBridges(_ bridges: [Bridge]) {
        let unique = bridges.reduce(into: [Bridge]()) { acc, item in
            var normalized = item
            normalized.id = item.normalizedId
            if !acc.contains(where: { $0.normalizedId == normalized.normalizedId ||
                                     $0.internalipaddress == normalized.internalipaddress }) {
                acc.append(normalized)
            }
        }
        discoveredBridges = unique
        
        if !bridges.isEmpty && currentStep == .searchBridges {
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–æ—Å—Ç—ã –æ—Ç AppViewModel: \(bridges.count), —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: \(unique.count)")
            if unique.count == 1, let only = unique.first {
                print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–æ—Å—Ç")
                selectBridge(only)
            }
        }
    }
    
    internal func handleSuccessfulConnection() {
        print("üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        linkButtonTimer?.invalidate()
        linkButtonTimer = nil
        isConnecting = false
        showLinkButtonAlert = false
        linkButtonPressed = true
        connectionError = nil
        currentStep = .connected
        
        Task { @MainActor in
            try await Task.sleep(for: .seconds(1))
            appViewModel.showSetup = false
        }
    }
    
    internal func handleConnectionError(_ error: HueAPIError) {
        switch error {
        case .linkButtonNotPressed:
            break
        case .localNetworkPermissionDenied:
            connectionError = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        case .bridgeNotFound:
            connectionError = "Hue Bridge –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏."
        case .notAuthenticated:
            connectionError = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        default:
            connectionError = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error.localizedDescription)"
        }
    }
}

enum OnboardingStep {
    case welcome
    case localNetworkPermission
    case searchBridges
    case linkButton
    case connected
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ OnboardingViewModel.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –û—Å–Ω–æ–≤–Ω–æ–π ViewModel –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è BulbsHUE.
 –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º, —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - Published —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è UI binding
 - Internal —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
 - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 - –ë–∞–∑–æ–≤—ã–µ helper –º–µ—Ç–æ–¥—ã
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 let viewModel = OnboardingViewModel(appViewModel: appViewModel)
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - AppViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 - SwiftUI, Combine –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 
 –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
 - OnboardingViewModel+Navigation.swift - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —à–∞–≥–∞–º
 - OnboardingViewModel+Connection.swift - –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 - OnboardingViewModel+LinkButton.swift - –æ–±—Ä–∞–±–æ—Ç–∫–∞ Link Button
 - OnboardingViewModel+Bridge.swift - —Ä–∞–±–æ—Ç–∞ —Å –º–æ—Å—Ç–∞–º–∏
 - OnboardingViewModel+Permissions.swift - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */
