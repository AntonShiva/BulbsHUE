//
//  LightsViewModel+NetworkSearch.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/16/25.
//


import Foundation
import Combine

extension LightsViewModel {
    
    // MARK: - Network Search
    
    /// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—â–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø —á–µ—Ä–µ–∑ Hue Bridge
    func searchForNewLights(completion: @escaping ([Light]) -> Void) {
        print("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø (–∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º v1 scan)...")
        let currentLightIds = Set(lights.map { $0.id })
        isLoading = true
        networkFoundLights = []
        
        apiClient.addLightModern(serialNumber: nil)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] result in
                    self?.isLoading = false
                    if case .failure(let error) = result {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)")
                        self?.error = error
                        completion([])
                    }
                },
                receiveValue: { [weak self] allLights in
                    guard let self = self else { completion([]); return }
                    
                    let newLights = allLights.filter { !currentLightIds.contains($0.id) }
                    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(newLights.count)")
                    self.lights = allLights
                    self.networkFoundLights = newLights
                    completion(newLights)
                }
            )
            .store(in: &cancellables)
    }
    
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø –≤ —Å–µ—Ç–∏ (–±–µ–∑ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞)
    func searchForNewLights() {
        print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø...")
        
        isLoading = true
        error = nil
        
        let currentLightIds = Set(lights.map { $0.id })
        
        apiClient.getAllLights()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)")
                        self?.error = error
                    }
                },
                receiveValue: { [weak self] allLights in
                    guard let self = self else { return }
                    
                    // –í –Ω–æ–≤–æ–º API-flow –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ID –¥–æ/–ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
                    let newLights = allLights.filter { light in
                        !currentLightIds.contains(light.id)
                    }
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º isNewLight —Ç–æ–ª—å–∫–æ –¥–ª—è edge cases
                    let potentiallyNewLights = allLights.filter { light in
                        !currentLightIds.contains(light.id) || 
                        (currentLightIds.contains(light.id) && light.isNewLight)
                    }
                    
                    let finalNewLights = !newLights.isEmpty ? newLights : potentiallyNewLights
                    
                    if !finalNewLights.isEmpty {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(finalNewLights.count)")
                        
                        self.lights = allLights
                        self.serialNumberFoundLights = finalNewLights
                        
                        if let firstNewLight = finalNewLights.first {
                            self.selectedLight = firstNewLight
                        }
                    } else {
                        print("‚ÑπÔ∏è –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.error = HueAPIError.unknown(
                            """
                            –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.
                            
                            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
                            ‚Ä¢ –õ–∞–º–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∏—Ç–∞–Ω–∏—é
                            ‚Ä¢ –õ–∞–º–ø—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ—Å—Ç–æ–º
                            ‚Ä¢ –õ–∞–º–ø—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É –º–æ—Å—Ç—É
                            """
                        )
                    }
                }
            )
            .store(in: &cancellables)
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ LightsViewModel+NetworkSearch.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ LightsViewModel –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ª–∞–º–ø.
 –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∞–º–ø –≤ —Å–µ—Ç–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø —á–µ—Ä–µ–∑ v1 scan
 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–µ—Ç–∏
 - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø
 - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 viewModel.searchForNewLights { lights in ... }
 viewModel.searchForNewLights()
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç internal —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
 - –¢—Ä–µ–±—É–µ—Ç HueAPIClient –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
 - –û–±–Ω–æ–≤–ª—è–µ—Ç networkFoundLights –∏ serialNumberFoundLights
 */
