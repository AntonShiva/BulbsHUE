//
//  LightsViewModel+EventStream.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/16/25.
//


import Foundation
import Combine

extension LightsViewModel {
    
    // MARK: - Event Stream Management
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    func startLightStatusMonitoring() {
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–º–ø –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        setupEventStreamSubscription()
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø
    func stopLightStatusMonitoring() {
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–º–ø...")
        apiClient.disconnectEventStream()
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥)
    func startEventStream() {
        stopAutoRefresh()
        
        eventStreamCancellable = apiClient.eventPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] event in
                self?.handleLightEvent(event)
            }
        
        apiClient.connectToEventStream()
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("Event stream error: \(error)")
                    }
                },
                receiveValue: { _ in }
            )
            .store(in: &cancellables)
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
    func stopEventStream() {
        eventStreamCancellable?.cancel()
        apiClient.disconnectEventStream()
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
    func startAutoRefresh() {
        stopAutoRefresh()
        
        refreshTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
            self?.loadLights()
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    func stopAutoRefresh() {
        refreshTimer?.invalidate()
        refreshTimer = nil
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Event Stream
    private func setupEventStreamSubscription() {
        print("üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Event Stream –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
        
        apiClient.connectToEventStreamV2()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { completion in
                    switch completion {
                    case .failure(let error):
                        print("‚ùå –û—à–∏–±–∫–∞ Event Stream: \(error.localizedDescription)")
                    case .finished:
                        print("üîÑ Event Stream –∑–∞–≤–µ—Ä—à–µ–Ω")
                    }
                },
                receiveValue: { [weak self] event in
                    print("üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Event Stream: \(event)")
                    self?.handleLightEvent(event)
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø
    private func handleLightEvent(_ event: HueEvent) {
        print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ª–∞–º–ø—ã...")
        
        guard let eventData = event.data else {
            print("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
            return
        }
        
        for data in eventData {
            print("üìä –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: \(String(describing: data.type)), ID: \(data.id ?? "unknown")")
            
            if data.type == "light", let lightId = data.id {
                print("üí° –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–º–ø—É —Å ID: \(lightId)")
                updateLightFromEvent(lightId: lightId, eventData: data)
            }
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
    private func updateLightFromEvent(lightId: String, eventData: EventData) {
        guard let index = lights.firstIndex(where: { $0.id == lightId }) else {
            print("‚ö†Ô∏è –õ–∞–º–ø–∞ —Å ID \(lightId) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ")
            return
        }
        
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–º–ø—É \(lights[index].metadata.name)...")
        
        var isUpdated = false
        
        if let on = eventData.on {
            let currentOn = lights[index].on.on
            if currentOn != on.on {
                lights[index].on = on
                isUpdated = true
                print("   ‚ö° –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: \(on.on ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞")")
            }
        }
        
        if let dimming = eventData.dimming {
            if lights[index].dimming?.brightness != dimming.brightness {
                lights[index].dimming = dimming
                isUpdated = true
                print("   üîÜ –ò–∑–º–µ–Ω–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å: \(dimming.brightness)%")
            }
        }
        
        if let color = eventData.color {
            lights[index].color = color
            isUpdated = true
            print("   üé® –ò–∑–º–µ–Ω–µ–Ω —Ü–≤–µ—Ç")
        }
        
        if let colorTemp = eventData.color_temperature {
            lights[index].color_temperature = colorTemp
            isUpdated = true
            print("   üå°Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
        }
        
        if isUpdated {
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å reachable –¥–ª—è –ª–∞–º–ø—ã \(lightId)...")
            Task {
                await updateLightReachableStatus(lightId: lightId)
            }
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å reachable –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø—ã
    @MainActor
    private func updateLightReachableStatus(lightId: String) async {
        do {
            let lightsV1 = try await apiClient.getLightsV1WithReachableStatus()
                .eraseToAnyPublisher()
                .asyncValue()
            
            if let index = lights.firstIndex(where: { $0.id == lightId }),
               let lightV1 = apiClient.findMatchingV1Light(v2Light: lights[index], v1Lights: lightsV1) {
                
                let wasReachable = lights[index].isReachable
                let newReachable = lightV1.state?.reachable ?? false
                
                if wasReachable != newReachable {
                    lights[index].communicationStatus = newReachable ? .online : .offline
                    print("   üì° –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å reachable: \(newReachable ? "–¥–æ—Å—Ç—É–ø–Ω–∞" : "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")")
                } else {
                    print("   üì° –°—Ç–∞—Ç—É—Å reachable –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: \(newReachable ? "–¥–æ—Å—Ç—É–ø–Ω–∞" : "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")")
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ reachable: \(error.localizedDescription)")
        }
    }
    
    /// –ò—â–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –ª–∞–º–ø—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
    private func searchForAddedLight(_ serialNumber: String) {
        print("üîç –ò—â–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –ª–∞–º–ø—É \(serialNumber) –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ...")
        isLoading = false
    }
}

// MARK: - Async/Await Extensions

extension AnyPublisher {
    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Publisher –≤ async/await
    func asyncValue() async throws -> Output {
        return try await withCheckedThrowingContinuation { continuation in
            var cancellable: AnyCancellable?
            
            cancellable = self
                .sink(
                    receiveCompletion: { completion in
                        switch completion {
                        case .finished:
                            break
                        case .failure(let error):
                            continuation.resume(throwing: error)
                        }
                        cancellable?.cancel()
                    },
                    receiveValue: { value in
                        continuation.resume(returning: value)
                        cancellable?.cancel()
                    }
                )
        }
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ LightsViewModel+EventStream.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ LightsViewModel –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Server-Sent Events (SSE).
 –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Event Stream
 - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ reachable
 - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Timer (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)
 - Async/await —É—Ç–∏–ª–∏—Ç—ã
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 viewModel.startEventStream()
 viewModel.stopEventStream()
 viewModel.startLightStatusMonitoring()
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç internal —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
 - –¢—Ä–µ–±—É–µ—Ç HueAPIClient –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSE
 - Async/await –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
