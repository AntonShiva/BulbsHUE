//
//  LightsViewModel+Diagnostics.swift
//  BulbsHUE
//
//  –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø
//

import Foundation
import Combine

extension LightsViewModel {
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–∞–Ω–∞–¥–∞)
    func runSearchDiagnostics(completion: @escaping (String) -> Void) {
        print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø...")
        
        apiClient.runLightSearchDiagnostics()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        completion("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: \(error)")
                    }
                },
                receiveValue: { diagnosticReport in
                    print(diagnosticReport)
                    completion(diagnosticReport)
                }
            )
            .store(in: &cancellables)
    }
    
    /// –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ –∫–æ–Ω—Å–æ–ª—å
    func printSystemState() {
        print("\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:")
        print("============================")
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: \(apiClient.hasValidConnection() ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" : "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")")
        print("üí° –í—Å–µ–≥–æ –ª–∞–º–ø: \(lights.count)")
        print("üÜï –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ç—å: \(networkFoundLights.count)")
        print("üî¢ –ù–∞–π–¥–µ–Ω–æ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(serialNumberFoundLights.count)")
        
        if !lights.isEmpty {
            print("\nüìã –°–ø–∏—Å–æ–∫ –ª–∞–º–ø:")
            for (index, light) in lights.enumerated() {
                let status = light.isReachable ? "‚úÖ" : "‚ùå"
                print("  \(index + 1). \(light.metadata.name) \(status)")
                print("     ID: \(light.id)")
                print("     –ù–æ–≤–∞—è: \(light.isNewLight ? "–î–∞" : "–ù–µ—Ç")")
            }
        }
        
        print("\nüí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ runSearchDiagnostics() –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print("============================\n")
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ª–∞–º–ø —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
    func testNetworkSearchWithLogs(completion: @escaping (Bool, String) -> Void) {
        print("\nüß™ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –õ–ê–ú–ü –ß–ï–†–ï–ó –°–ï–¢–¨")
        print("==============================")
        
        var testLog = ""
        let startTime = Date()
        
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        testLog += "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É...\n"
        guard apiClient.hasValidConnection() else {
            testLog += "‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É\n"
            completion(false, testLog)
            return
        }
        testLog += "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ\n\n"
        
        // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ª–∞–º–ø
        testLog += "2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ª–∞–º–ø...\n"
        let existingCount = lights.count
        testLog += "–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∞–º–ø: \(existingCount)\n\n"
        
        // –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
        testLog += "3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ª–∞–º–ø...\n"
        testLog += "‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 40 —Å–µ–∫—É–Ω–¥...\n"
        
        searchForNewLights { [weak self] newLights in
            guard let self = self else { return }
            
            let endTime = Date()
            let duration = endTime.timeIntervalSince(startTime)
            
            testLog += "\n4Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            testLog += "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.1f", duration)) —Å–µ–∫—É–Ω–¥\n"
            testLog += "–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(newLights.count)\n"
            
            if newLights.isEmpty {
                testLog += "\n‚ö†Ô∏è –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                testLog += "‚Ä¢ –í—Å–µ –ª–∞–º–ø—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É\n"
                testLog += "‚Ä¢ –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞–ª–µ–∫–æ\n"
                testLog += "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–±—Ä–æ—Å –ª–∞–º–ø—ã (5 —Ä–∞–∑ –≤–∫–ª/–≤—ã–∫–ª)\n"
                testLog += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å Zigbee –∫–∞–Ω–∞–ª–æ–º\n"
            } else {
                testLog += "\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∞–º–ø—ã:\n"
                for (index, light) in newLights.enumerated() {
                    testLog += "\(index + 1). \(light.metadata.name) (ID: \(light.id))\n"
                }
            }
            
            testLog += "\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞:\n"
            testLog += "–í—Å–µ–≥–æ –ª–∞–º–ø –≤ —Å–∏—Å—Ç–µ–º–µ: \(self.lights.count)\n"
            testLog += "==============================\n"
            
            completion(!newLights.isEmpty, testLog)
        }
    }
}
