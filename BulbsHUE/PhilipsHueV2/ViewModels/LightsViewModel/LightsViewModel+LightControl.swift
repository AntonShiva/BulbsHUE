//
//  LightsViewModel+LightControl.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/16/25.
//

import Foundation
import Combine
import SwiftUI

extension LightsViewModel {
    
    // MARK: - Basic Operations
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
    func loadLights() {
        guard apiClient.hasValidConnection() else {
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–∞–º–ø")
            lights = []
            isLoading = false
            return
        }
        
        isLoading = true
        error = nil
        
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–º–ø—ã —á–µ—Ä–µ–∑ API v2 HTTPS —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞...")
        
        apiClient.getAllLights()
            .sink(
                receiveCompletion: { [weak self] completion in
                    Task { @MainActor in
                        self?.isLoading = false
                        if case .failure(let error) = completion {
                            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–º–ø: \(error)")
                            if case HueAPIError.notAuthenticated = error {
                                print("üìù –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –∂–¥–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                            } else {
                                self?.error = error
                            }
                        }
                    }
                },
                receiveValue: { [weak self] lights in
                    Task { @MainActor in
                        guard let self = self else { return }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                        guard lights is [Light] else {
                            print("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞ –ª–∞–º–ø")
                            return
                        }
                        
                        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(lights.count) –ª–∞–º–ø —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º")
                        self.lights = lights
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∞–º–ø —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ reachable
    @MainActor
    func refreshLightsWithStatus() async {
        isLoading = true
        error = nil
        
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞...")
        
        do {
            let updatedLights = try await apiClient.getAllLights()
                .eraseToAnyPublisher()
                .asyncValue()
            
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ \(updatedLights.count) –ª–∞–º–ø —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º")
            self.lights = updatedLights
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞–º–ø: \(error)")
            self.error = error
        }
        
        isLoading = false
    }
    
    // MARK: - Light Control
    
    /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ª–∞–º–ø—É
    func toggleLight(_ light: Light) {
        let newState = LightState(
            on: OnState(on: !light.on.on)
        )
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è (–≤–∫–ª/–≤—ã–∫–ª) —è–≤–Ω–æ
    func setPower(for light: Light, on: Bool) {
        let newState = LightState(
            on: OnState(on: on)
        )
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å –ª–∞–º–ø—ã —Å debouncing
    func setBrightness(for light: Light, brightness: Double) {
        brightnessUpdateWorkItem?.cancel()
        
        let workItem = DispatchWorkItem { [weak self] in
            let newState = LightState(
                dimming: Dimming(brightness: brightness)
            )
            self?.updateLight(light.id, state: newState, currentLight: light)
        }
        
        brightnessUpdateWorkItem = workItem
        
        Task { @MainActor in
            try await Task.sleep(nanoseconds: 250_000_000) // 0.25 seconds
            workItem.perform()
        }
    }
    
    /// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å (–¥–ª—è commit –ø–æ—Å–ª–µ –∂–µ—Å—Ç–∞)
    func commitBrightness(for light: Light, brightness: Double) {
        brightnessUpdateWorkItem?.cancel()
        let newState = LightState(
            dimming: Dimming(brightness: brightness)
        )
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –ª–∞–º–ø—ã —Å debouncing
    func setColor(for light: Light, color: SwiftUI.Color) {
        colorUpdateWorkItem?.cancel()
        
        let workItem = DispatchWorkItem { [weak self] in
            let xyColor = self?.convertToXY(color: color, gamutType: light.color_gamut_type) ?? XYColor(x: 0.3, y: 0.3)
            let newState = LightState(
                color: HueColor(xy: xyColor)
            )
            self?.updateLight(light.id, state: newState, currentLight: light)
        }
        
        colorUpdateWorkItem = workItem
        
        Task { @MainActor in
            try await Task.sleep(nanoseconds: 200_000_000) // 0.2 seconds
            workItem.perform()
        }
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –ª–∞–º–ø—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–µ–∑ debouncing (–¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤)
    func setColorImmediate(for light: Light, color: SwiftUI.Color) {
        let xyColor = convertToXY(color: color, gamutType: light.color_gamut_type)
        let newState = LightState(
            color: HueColor(xy: xyColor)
        )
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    func setColorTemperature(for light: Light, temperature: Int) {
        let mirek = 1_000_000 / temperature
        let newState = LightState(
            color_temperature: ColorTemperature(mirek: mirek)
        )
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫ –ª–∞–º–ø–µ
    func applyEffect(to light: Light, effect: String) {
        let newState = LightState(
            effects_v2: EffectsV2(effect: effect)
        )
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∞–º–ø –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    func updateMultipleLights(_ lights: [Light], state: LightState) {
        if lights.count > 3 {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ 3 –ª–∞–º–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä—É–ø–ø—ã")
        }
        
        for light in lights {
            updateLight(light.id, state: state, currentLight: light)
        }
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–º–∏–≥–∞–Ω–∏–µ)
    func alertLight(_ light: Light) {
        applyEffect(to: light, effect: "breathe")
    }
    
    /// –ú–∏–≥–∞–µ—Ç –ª–∞–º–ø–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    func blinkLight(_ light: Light) {
        apiClient.blinkLight(id: light.id)
            .receive(on: RunLoop.main)
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥–∞–Ω–∏—è –ª–∞–º–ø—ã \(light.metadata.name): \(error)")
                    }
                },
                receiveValue: { success in
                    if success {
                        print("‚úÖ –õ–∞–º–ø–∞ \(light.metadata.name) –º–∏–≥–Ω—É–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ª–∞–º–ø—É
    func renameLight(_ light: Light, newName: String) {
        var updatedMetadata = light.metadata
        updatedMetadata.name = newName
        
        updateLocalLight(light.id, with: LightState())
        
        if let index = lights.firstIndex(where: { $0.id == light.id }) {
            lights[index].metadata.name = newName
        }
    }
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ª–∞–º–ø—É –≤ –∫–æ–º–Ω–∞—Ç—É
    func moveToRoom(_ light: Light, roomId: String) {
        if let index = lights.firstIndex(where: { $0.id == light.id }) {
            lights[index].metadata.archetype = roomId
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø—ã
    func updateLightCommunicationStatus(lightId: String, status: CommunicationStatus) {
        guard let index = lights.firstIndex(where: { $0.id == lightId }) else {
            print("‚ö†Ô∏è LightsViewModel: –õ–∞–º–ø–∞ —Å ID \(lightId) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return
        }
        
        lights[index].communicationStatus = status
        print("‚úÖ LightsViewModel: –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –ª–∞–º–ø—ã \(lightId): \(status)")
        objectWillChange.send()
    }
    
    // MARK: - Private Update Method
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã —á–µ—Ä–µ–∑ API
    private func updateLight(_ lightId: String, state: LightState, currentLight: Light? = nil) {
        guard activeRequests < maxActiveRequests else {
            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return
        }
        
        activeRequests += 1
        let optimizedState = state.optimizedState(currentLight: currentLight)
        
        print("üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–º–ø—É \(lightId) —á–µ—Ä–µ–∑ API v2 HTTPS...")
        
        apiClient.updateLight(id: lightId, state: optimizedState)
            .receive(on: RunLoop.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.activeRequests -= 1
                    
                    if case .failure(let error) = completion {
                        self?.error = error
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É \(lightId): \(error)")
                        
                        switch error {
                        case HueAPIError.rateLimitExceeded:
                            print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        case HueAPIError.bufferFull:
                            print("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –º–æ—Å—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")
                        case HueAPIError.notAuthenticated:
                            print("üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
                        default:
                            break
                        }
                    }
                },
                receiveValue: { [weak self] success in
                    if success {
                        print("‚úÖ –õ–∞–º–ø–∞ \(lightId) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        self?.updateLocalLight(lightId, with: optimizedState)
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É \(lightId)")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    // MARK: - Color Conversion
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SwiftUI Color –≤ XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    private func convertToXY(color: SwiftUI.Color, gamutType: String? = nil) -> XYColor {
        return ColorConversion.convertToXY(color: color, gamutType: gamutType)
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç XY –≤ RGB –¥–ª—è UI
    func convertXYToColor(_ xy: XYColor, brightness: Double = 1.0, gamutType: String? = nil) -> Color {
        return ColorConversion.convertXYToColor(xy, brightness: brightness, gamutType: gamutType)
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ LightsViewModel+LightControl.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ LightsViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ª–∞–º–ø.
 –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏, —Ü–≤–µ—Ç–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∞–º–ø
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º (on/off)
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é —Å debouncing
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º –∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
 - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–∞–º–ø
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 viewModel.toggleLight(light)
 viewModel.setBrightness(for: light, brightness: 75)
 viewModel.setColor(for: light, color: .blue)
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç internal —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
 - –¢—Ä–µ–±—É–µ—Ç HueAPIClient –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
 - ColorConversion –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–æ–º
 */
