//
//  LightsViewModel+SerialNumber.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/16/25.
//


import Foundation
import Combine

extension LightsViewModel {
    
    // MARK: - Serial Number Search
    
    /// –ü–æ–∏—Å–∫ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    func addLightBySerialNumber(_ serialNumber: String) {
        print("üîç –ü–æ–∏—Å–∫ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(serialNumber)")
        
        guard isValidSerialNumber(serialNumber) else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
            error = HueAPIError.unknown("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤ (0-9, A-Z)")
            return
        }
        
        isLoading = true
        error = nil
        clearSerialNumberFoundLights()
        
        apiClient.addLightBySerialNumber(serialNumber)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø—ã: \(error)")
                        self?.handleSerialNumberError(error, serialNumber: serialNumber)
                    }
                },
                receiveValue: { [weak self] foundLights in
                    guard let self = self else { return }
                    
                    if !foundLights.isEmpty {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∞–º–ø: \(foundLights.count)")
                        
                        self.serialNumberFoundLights = foundLights
                        
                        for light in foundLights {
                            if !self.lights.contains(where: { $0.id == light.id }) {
                                self.lights.append(light)
                                print("   + –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∞–º–ø–∞: \(light.metadata.name)")
                            }
                        }
                    } else {
                        print("‚ùå –õ–∞–º–ø—ã —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.showNotFoundError(for: serialNumber)
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –ª–∞–º–ø—É –≤ —Å–ø–∏—Å–æ–∫
    func addFoundLight(_ light: Light) {
        print("üí° –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ª–∞–º–ø—É: \(light.metadata.name)")
        
        if !lights.contains(where: { $0.id == light.id }) {
            lights.append(light)
            print("‚úÖ –õ–∞–º–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∞–º–ø")
        } else {
            print("‚ö†Ô∏è –õ–∞–º–ø–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–º–ø—É –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    func addSerialNumberFoundLight(_ light: Light) {
        print("üîç –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–º–ø—É –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(light.metadata.name)")
        serialNumberFoundLights = [light]
        print("‚úÖ –õ–∞–º–ø–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    }
    
    /// –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∞–º–ø –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    func clearSerialNumberFoundLights() {
        serialNumberFoundLights = []
    }
    
    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä Philips Hue
    func isValidSerialNumber(_ serialNumber: String) -> Bool {
        let cleanSerial = serialNumber
            .uppercased()
            .trimmingCharacters(in: .whitespacesAndNewlines)
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
            .replacingOccurrences(of: ":", with: "")
        
        let validCharacterSet = CharacterSet(charactersIn: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")
        
        let isValidLength = cleanSerial.count == 6
        let hasOnlyValidChars = cleanSerial.rangeOfCharacter(from: validCharacterSet.inverted) == nil
        
        if !isValidLength || !hasOnlyValidChars {
            print("‚ùå –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä '\(serialNumber)' –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
            print("   –û—á–∏—â–µ–Ω–Ω—ã–π: '\(cleanSerial)'")
            print("   –î–ª–∏–Ω–∞: \(cleanSerial.count) (–æ–∂–∏–¥–∞–µ—Ç—Å—è 6)")
            print("   –í–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: \(hasOnlyValidChars)")
            return false
        }
        
        print("‚úÖ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä '\(cleanSerial)' –≤–∞–ª–∏–¥–µ–Ω")
        return true
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Light –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    static func createLightFromSerialNumber(_ serialNumber: String) -> Light {
        let cleanSerialNumber = serialNumber.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
        let lightId = "light_\(cleanSerialNumber)"
        let lightName = "Hue Bulb \(cleanSerialNumber)"
        
        return Light(
            id: lightId,
            type: "light",
            metadata: LightMetadata(
                name: lightName,
                archetype: "desk_lamp"
            ),
            on: OnState(on: false),
            dimming: Dimming(brightness: 100),
            color: HueColor(
                xy: XYColor(x: 0.3, y: 0.3),
                gamut: Gamut(
                    red: XYColor(x: 0.7, y: 0.3),
                    green: XYColor(x: 0.17, y: 0.7),
                    blue: XYColor(x: 0.15, y: 0.06)
                ),
                gamut_type: "C"
            )
        )
    }
    
    // MARK: - Private Methods
    
    /// –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∞–º–ø –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func findExistingLightBySerial(_ serialNumber: String) -> Light? {
        let cleanSerial = serialNumber.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        print("üîç –ò—â–µ–º –ª–∞–º–ø—É —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º: \(cleanSerial)")
        
        return lights.first { light in
            let lightId = light.id.uppercased().replacingOccurrences(of: "-", with: "")
            let lightName = light.metadata.name.uppercased()
            
            let idContainsSerial = lightId.contains(cleanSerial)
            let nameContainsSerial = lightName.contains(cleanSerial)
            let idEndsWithSerial = lightId.count >= 6 && lightId.suffix(6) == cleanSerial
            
            if idContainsSerial || nameContainsSerial || idEndsWithSerial {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–∞–º–ø–∞: \(light.metadata.name)")
                return true
            }
            
            return false
        }
    }
    
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ù–û–í–û–ô –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func addNewLightBySerial(_ serialNumber: String) {
        print("üÜï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–∞–º–ø—É: \(serialNumber)")
        
        apiClient.addLightModern(serialNumber: serialNumber)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: \(error)")
                        
                        self?.error = HueAPIError.unknown(
                            "–õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n" +
                            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n" +
                            "‚Ä¢ –õ–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ—Å—Ç–æ–º\n" +
                            "‚Ä¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n" +
                            "‚Ä¢ –õ–∞–º–ø–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Philips Hue"
                        )
                        self?.serialNumberFoundLights = []
                    }
                },
                receiveValue: { [weak self] foundLights in
                    guard let self = self else { return }
                    
                    if !foundLights.isEmpty {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(foundLights.count)")
                        self.serialNumberFoundLights = foundLights
                        
                        let newLights = foundLights.filter { newLight in
                            !self.lights.contains { $0.id == newLight.id }
                        }
                        self.lights.append(contentsOf: newLights)
                        
                        if let firstLight = foundLights.first {
                            NavigationManager.shared.showCategoriesSelection(for: firstLight)
                        }
                    } else {
                        print("‚ùå –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.error = HueAPIError.unknown("–õ–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        self.serialNumberFoundLights = []
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// Fallback –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ API v1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    private func searchByNameFallback(_ serialNumber: String) {
        let foundLights = lights.filter { light in
            let lightName = light.metadata.name.lowercased()
            let serialLower = serialNumber.lowercased()
            
            return lightName.contains(serialLower) ||
                   light.metadata.name.uppercased().contains(serialNumber.uppercased())
        }
        
        if !foundLights.isEmpty {
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–∞–º–ø–∞ —Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö: \(foundLights.first?.metadata.name ?? "")")
            serialNumberFoundLights = foundLights
            isLoading = false
        } else {
            print("‚ùå –õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø:")
            
            for light in lights {
                print("   üì± '\(light.metadata.name)' - –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            }
            
            isLoading = false
            error = HueAPIError.unknown("–õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            serialNumberFoundLights = []
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func handleSerialNumberError(_ error: Error, serialNumber: String) {
        if let hueError = error as? HueAPIError {
            switch hueError {
            case .notAuthenticated:
                self.error = HueAPIError.unknown(
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –º–æ—Å—Ç—É."
                )
                
            case .bridgeNotFound:
                self.error = HueAPIError.unknown(
                    "–ú–æ—Å—Ç Hue –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
                )
                
            case .networkError:
                self.error = HueAPIError.unknown(
                    "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏, —á—Ç–æ –∏ –º–æ—Å—Ç."
                )
                
            case .httpError(let statusCode):
                if statusCode == 404 {
                    showNotFoundError(for: serialNumber)
                } else {
                    self.error = HueAPIError.unknown(
                        "–û—à–∏–±–∫–∞ HTTP \(statusCode). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                }
                
            default:
                self.error = hueError
            }
        } else {
            self.error = HueAPIError.unknown(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)"
            )
        }
        
        serialNumberFoundLights = []
    }
    
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –∫–æ–≥–¥–∞ –ª–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    private func showNotFoundError(for serialNumber: String) {
        self.error = HueAPIError.unknown(
            """
            –õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
            
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
            ‚Ä¢ –õ–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–µ—Ç—Ä–∞ –æ—Ç –º–æ—Å—Ç–∞
            ‚Ä¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (6 —Å–∏–º–≤–æ–ª–æ–≤)
            ‚Ä¢ –õ–∞–º–ø–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Philips Hue
            ‚Ä¢ –õ–∞–º–ø–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –º–æ—Å—Ç—É
            
            –ï—Å–ª–∏ –ª–∞–º–ø–∞ –±—ã–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –º–æ—Å—Ç—É:
            1. –í—ã–∫–ª—é—á–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
            2. –õ–∞–º–ø–∞ –º–∏–≥–Ω–µ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–±—Ä–æ—Å
            3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞
            """
        )
    }
    
    /// –°–±—Ä–æ—Å –ª–∞–º–ø—ã (–¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é)
    func resetLightForAddition(completion: @escaping (Bool) -> Void) {
        print("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±—Ä–æ—Å—É –ª–∞–º–ø—ã:")
        print("1. –í—ã–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É")
        print("2. –í–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã")
        print("3. –í—ã–∫–ª—é—á–∏—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã")
        print("4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —à–∞–≥–∏ 2-3 –µ—â–µ 4 —Ä–∞–∑–∞")
        print("5. –í–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –º–∏–≥–Ω—É—Ç—å")
        print("6. –õ–∞–º–ø–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é")
        
        self.error = HueAPIError.unknown(
            """
            –î–ª—è —Å–±—Ä–æ—Å–∞ –ª–∞–º–ø—ã:
            
            1. –í—ã–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É
            2. –í–∫–ª—é—á–∏—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            3. –í—ã–∫–ª—é—á–∏—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —à–∞–≥–∏ 2-3 –µ—â–µ 4 —Ä–∞–∑–∞
            5. –í–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É - –æ–Ω–∞ –º–∏–≥–Ω–µ—Ç
            
            –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∞–º–ø—É —Å–Ω–æ–≤–∞.
            """
        )
        
        completion(true)
    }
    
    // MARK: - Dynamic Serial Number Mappings
    
    /// –ö–ª—é—á –¥–ª—è UserDefaults
    private var mappingsKey: String { "HueLightSerialMappings" }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
    func loadSerialMappings() -> [String: String] {
        UserDefaults.standard.dictionary(forKey: mappingsKey) as? [String: String] ?? [:]
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä -> ID –ª–∞–º–ø—ã
    func saveSerialMapping(serial: String, lightId: String) {
        var mappings = loadSerialMappings()
        let cleanSerial = serial.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        mappings[cleanSerial] = lightId
        UserDefaults.standard.set(mappings, forKey: mappingsKey)
        
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –º–∞–ø–ø–∏–Ω–≥: \(cleanSerial) -> \(lightId)")
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –ª–∞–º–ø—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –º–∞–ø–ø–∏–Ω–≥—É
    func findLightByMapping(_ serial: String) -> Light? {
        let cleanSerial = serial.uppercased()
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        let mappings = loadSerialMappings()
        
        if let lightId = mappings[cleanSerial] {
            return lights.first { $0.id == lightId }
        }
        
        return nil
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
    func clearSerialMappings() {
        UserDefaults.standard.removeObject(forKey: mappingsKey)
        print("üóë –ú–∞–ø–ø–∏–Ω–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    }
}

/*
 –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö –§–ê–ô–õ–£ LightsViewModel+SerialNumber.swift
 
 –û–ø–∏—Å–∞–Ω–∏–µ:
 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ LightsViewModel –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–∏–π–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –ª–∞–º–ø.
 –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∞–º–ø –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.
 
 –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 - –ü–æ–∏—Å–∫ –ª–∞–º–ø –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
 - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (6 —Å–∏–º–≤–æ–ª–æ–≤ A-Z, 0-9)
 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞–º–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä -> ID
 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
 - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ª–∞–º–ø
 
 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 viewModel.addLightBySerialNumber("ABC123")
 viewModel.isValidSerialNumber("XYZ789")
 viewModel.resetLightForAddition { success in ... }
 
 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
 - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç internal —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
 - –¢—Ä–µ–±—É–µ—Ç HueAPIClient –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø
 - UserDefaults –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤
 */
