//
//  LightsViewModel.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import Foundation
import Combine
import SwiftUI
import CoreGraphics
#if canImport(UIKit)
import UIKit
#elseif canImport(AppKit)
import AppKit
#endif

/// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏
/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API
class LightsViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    /// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø –≤ —Å–∏—Å—Ç–µ–º–µ
    @Published var lights: [Light] = []
    
    /// –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    @Published var isLoading: Bool = false
    
    /// –¢–µ–∫—É—â–∞—è –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    @Published var error: Error?
    
    /// –í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∞–º–ø–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    @Published var selectedLight: Light?
    
    /// –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–º–ø
    @Published var filter: LightFilter = .all
    
    // MARK: - Private Properties
    
    /// –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
    private let apiClient: HueAPIClient
    
    /// –ù–∞–±–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ Combine
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Performance Properties
    
    /// –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    private var activeRequests = 0
    private let maxActiveRequests = 5
    
    /// –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–æ–¥—Ö–æ–¥)
    private var refreshTimer: Timer?
    
    /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
    private var eventStreamCancellable: AnyCancellable?
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ViewModel —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
    /// - Parameter apiClient: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Hue API
    init(apiClient: HueAPIClient) {
        self.apiClient = apiClient
        setupBindings()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø
    func loadLights() {
        isLoading = true
        error = nil
        
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–º–ø—ã —á–µ—Ä–µ–∑ API v2 HTTPS...")
        
        apiClient.getAllLights()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–º–ø: \(error)")
                        self?.error = error
                    }
                },
                receiveValue: { [weak self] lights in
                    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(lights.count) –ª–∞–º–ø")
                    self?.lights = lights
                }
            )
            .store(in: &cancellables)
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ª–∞–º–ø—É
    /// - Parameter light: –õ–∞–º–ø–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    func toggleLight(_ light: Light) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –ª–∞–º–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ on:true
        let newState = LightState(
            on: OnState(on: !light.on.on)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - brightness: –£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (0-100)
    func setBrightness(for light: Light, brightness: Double) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
        let newState = LightState(
            dimming: Dimming(brightness: brightness)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - color: –¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ SwiftUI Color
    func setColor(for light: Light, color: SwiftUI.Color) {
        let xyColor = convertToXY(color: color, gamutType: light.color_gamut_type)
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        let newState = LightState(
            color: HueColor(xy: xyColor)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (2200-6500)
    func setColorTemperature(for light: Light, temperature: Int) {
        let mirek = 1_000_000 / temperature
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        let newState = LightState(
            color_temperature: ColorTemperature(mirek: mirek)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫ –ª–∞–º–ø–µ
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - effect: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ (cosmos, enchant, sunbeam, underwater)
    func applyEffect(to light: Light, effect: String) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        let newState = LightState(
            effects_v2: EffectsV2(effect: effect)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∞–º–ø –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    /// - Parameters:
    ///   - lights: –ú–∞—Å—Å–∏–≤ –ª–∞–º–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    func updateMultipleLights(_ lights: [Light], state: LightState) {
        if lights.count > 3 {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ 3 –ª–∞–º–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä—É–ø–ø—ã")
        }
        
        for light in lights {
            updateLight(light.id, state: state, currentLight: light)
        }
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–º–∏–≥–∞–Ω–∏–µ)
    /// - Parameter light: –õ–∞–º–ø–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    func alertLight(_ light: Light) {
        // –í API v2 alert –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ effects
        applyEffect(to: light, effect: "breathe")
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥)
    func startEventStream() {
        stopAutoRefresh() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        
        eventStreamCancellable = apiClient.eventPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] event in
                self?.handleEvent(event)
            }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
        apiClient.connectToEventStream()
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("Event stream error: \(error)")
                    }
                },
                receiveValue: { _ in }
            )
            .store(in: &cancellables)
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
    func stopEventStream() {
        eventStreamCancellable?.cancel()
        apiClient.disconnectEventStream()
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    func startAutoRefresh() {
        stopAutoRefresh()
        
        refreshTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
            self?.loadLights()
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    func stopAutoRefresh() {
        refreshTimer?.invalidate()
        refreshTimer = nil
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    private func setupBindings() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç API –∫–ª–∏–µ–Ω—Ç–∞
        apiClient.errorPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] error in
                self?.error = error
            }
            .store(in: &cancellables)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
    private func handleEvent(_ event: HueEvent) {
        guard let eventData = event.data else { return }
        
        for data in eventData {
            switch data.type {
            case "light":
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–∞–º–ø—É
                if let lightId = data.id {
                    updateLocalLightFromEvent(lightId, eventData: data)
                }
            default:
                break
            }
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è
    private func updateLocalLightFromEvent(_ lightId: String, eventData: EventData) {
        guard let index = lights.firstIndex(where: { $0.id == lightId }) else { return }
        
        if let on = eventData.on {
            lights[index].on = on
        }
        
        if let dimming = eventData.dimming {
            lights[index].dimming = dimming
        }
        
        if let color = eventData.color {
            lights[index].color = color
        }
        
        if let colorTemp = eventData.color_temperature {
            lights[index].color_temperature = colorTemp
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ///   - currentLight: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private func updateLight(_ lightId: String, state: LightState, currentLight: Light? = nil) {
        guard activeRequests < maxActiveRequests else {
            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return
        }
        
        activeRequests += 1
        let optimizedState = state.optimizedState(currentLight: currentLight)
        
        print("üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–º–ø—É \(lightId) —á–µ—Ä–µ–∑ API v2 HTTPS...")
        
        apiClient.updateLight(id: lightId, state: optimizedState)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.activeRequests -= 1
                    
                    if case .failure(let error) = completion {
                        self?.error = error
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É \(lightId): \(error)")
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                        switch error {
                        case HueAPIError.rateLimitExceeded:
                            print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        case HueAPIError.bufferFull:
                            print("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –º–æ—Å—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")
                        case HueAPIError.notAuthenticated:
                            print("üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
                        default:
                            break
                        }
                    }
                },
                receiveValue: { [weak self] success in
                    if success {
                        print("‚úÖ –õ–∞–º–ø–∞ \(lightId) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        self?.updateLocalLight(lightId, with: optimizedState)
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É \(lightId)")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private func updateLocalLight(_ lightId: String, with state: LightState) {
        guard let index = lights.firstIndex(where: { $0.id == lightId }) else { return }
        
        if let on = state.on {
            lights[index].on = on
        }
        
        if let dimming = state.dimming {
            lights[index].dimming = dimming
        }
        
        if let color = state.color {
            lights[index].color = color
        }
        
        if let colorTemp = state.color_temperature {
            lights[index].color_temperature = colorTemp
        }
        
        if let effects = state.effects_v2 {
            lights[index].effects_v2 = effects
        }
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SwiftUI Color –≤ XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≥–∞–º–º—ã –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - color: –¶–≤–µ—Ç SwiftUI
    ///   - gamutType: –¢–∏–ø —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º—ã (A, B, C –∏–ª–∏ nil)
    /// - Returns: XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Hue API
    private func convertToXY(color: SwiftUI.Color, gamutType: String? = nil) -> XYColor {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var opacity: CGFloat = 0
        
        // –î–ª—è SwiftUI –∏—Å–ø–æ–ª—å–∑—É–µ–º UIColor/NSColor
        #if canImport(UIKit)
        let uiColor = UIColor(color)
        uiColor.getRed(&red, green: &green, blue: &blue, alpha: &opacity)
        #elseif canImport(AppKit)
        let nsColor = NSColor(color)
        nsColor.getRed(&red, green: &green, blue: &blue, alpha: &opacity)
        #endif
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é (sRGB -> –ª–∏–Ω–µ–π–Ω—ã–π RGB)
        red = (red > 0.04045) ? pow((red + 0.055) / 1.055, 2.4) : (red / 12.92)
        green = (green > 0.04045) ? pow((green + 0.055) / 1.055, 2.4) : (green / 12.92)
        blue = (blue > 0.04045) ? pow((blue + 0.055) / 1.055, 2.4) : (blue / 12.92)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ XYZ –∏—Å–ø–æ–ª—å–∑—É—è Wide RGB D65
        let X = red * 0.4124 + green * 0.3576 + blue * 0.1805
        let Y = red * 0.2126 + green * 0.7152 + blue * 0.0722
        let Z = red * 0.0193 + green * 0.1192 + blue * 0.9505
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ xy
        let sum = X + Y + Z
        var x = sum > 0 ? X / sum : 0
        var y = sum > 0 ? Y / sum : 0
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–∞–º–º—ã –ª–∞–º–ø—ã
        let xyPoint = XYColor(x: x, y: y)
        let gamut = getGamutForType(gamutType)
        
        if !isPointInGamut(xyPoint, gamut: gamut) {
            let corrected = closestPointInGamut(xyPoint, gamut: gamut)
            x = corrected.x
            y = corrected.y
        }
        
        return XYColor(x: x, y: y)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≥–∞–º–º—ã –¥–ª—è —Ç–∏–ø–∞
    private func getGamutForType(_ type: String?) -> Gamut {
        switch type {
        case "A":
            // Legacy LivingColors (Bloom, Aura, Light Strips, Iris)
            return Gamut(
                red: XYColor(x: 0.704, y: 0.296),
                green: XYColor(x: 0.2151, y: 0.7106),
                blue: XYColor(x: 0.138, y: 0.08)
            )
        case "B":
            // –°—Ç–∞—Ä—ã–µ Hue bulbs
            return Gamut(
                red: XYColor(x: 0.675, y: 0.322),
                green: XYColor(x: 0.409, y: 0.518),
                blue: XYColor(x: 0.167, y: 0.04)
            )
        case "C":
            // –ù–æ–≤—ã–µ Hue bulbs
            return Gamut(
                red: XYColor(x: 0.6915, y: 0.3038),
                green: XYColor(x: 0.17, y: 0.7),
                blue: XYColor(x: 0.1532, y: 0.0475)
            )
        default:
            // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –≥–∞–º–º–∞ (–ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä)
            return Gamut(
                red: XYColor(x: 1.0, y: 0),
                green: XYColor(x: 0.0, y: 1.0),
                blue: XYColor(x: 0.0, y: 0.0)
            )
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≥–∞–º–º—ã
    private func isPointInGamut(_ point: XYColor, gamut: Gamut) -> Bool {
        guard let red = gamut.red,
              let green = gamut.green,
              let blue = gamut.blue else { return true }
        
        let v1 = CGPoint(x: green.x - red.x, y: green.y - red.y)
        let v2 = CGPoint(x: blue.x - red.x, y: blue.y - red.y)
        let q = CGPoint(x: point.x - red.x, y: point.y - red.y)
        
        let s = crossProduct(q, v2) / crossProduct(v1, v2)
        let t = crossProduct(v1, q) / crossProduct(v1, v2)
        
        return (s >= 0.0) && (t >= 0.0) && (s + t <= 1.0)
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    private func crossProduct(_ p1: CGPoint, _ p2: CGPoint) -> CGFloat {
        return p1.x * p2.y - p1.y * p2.x
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –≤–Ω—É—Ç—Ä–∏ –≥–∞–º–º—ã
    private func closestPointInGamut(_ point: XYColor, gamut: Gamut) -> XYColor {
        guard let red = gamut.red,
              let green = gamut.green,
              let blue = gamut.blue else { return point }
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        let pRG = closestPointOnLine(
            point: point,
            lineStart: red,
            lineEnd: green
        )
        
        let pGB = closestPointOnLine(
            point: point,
            lineStart: green,
            lineEnd: blue
        )
        
        let pBR = closestPointOnLine(
            point: point,
            lineStart: blue,
            lineEnd: red
        )
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        let dRG = distance(from: point, to: pRG)
        let dGB = distance(from: point, to: pGB)
        let dBR = distance(from: point, to: pBR)
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É
        if dRG <= dGB && dRG <= dBR {
            return pRG
        } else if dGB <= dBR {
            return pGB
        } else {
            return pBR
        }
    }
    
    /// –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –Ω–∞ –ª–∏–Ω–∏–∏
    private func closestPointOnLine(point: XYColor, lineStart: XYColor, lineEnd: XYColor) -> XYColor {
        let ap = CGPoint(x: point.x - lineStart.x, y: point.y - lineStart.y)
        let ab = CGPoint(x: lineEnd.x - lineStart.x, y: lineEnd.y - lineStart.y)
        
        let ab2 = ab.x * ab.x + ab.y * ab.y
        let ap_ab = ap.x * ab.x + ap.y * ab.y
        
        var t = ap_ab / ab2
        t = max(0.0, min(1.0, t))
        
        return XYColor(
            x: lineStart.x + ab.x * t,
            y: lineStart.y + ab.y * t
        )
    }
    
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
    private func distance(from p1: XYColor, to p2: XYColor) -> Double {
        let dx = p1.x - p2.x
        let dy = p1.y - p2.y
        return sqrt(dx * dx + dy * dy)
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç XY –≤ RGB (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)
    func convertXYToColor(_ xy: XYColor, brightness: Double = 1.0, gamutType: String? = nil) -> Color {
        let gamut = getGamutForType(gamutType)
        var xyPoint = xy
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–∞–º–º—ã
        if !isPointInGamut(xyPoint, gamut: gamut) {
            xyPoint = closestPointInGamut(xyPoint, gamut: gamut)
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º xy –≤ XYZ
        let z = 1.0 - xyPoint.x - xyPoint.y
        let Y = brightness
        let X = (Y / xyPoint.y) * xyPoint.x
        let Z = (Y / xyPoint.y) * z
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º XYZ –≤ RGB (sRGB D65)
        var r = X * 1.656492 - Y * 0.354851 - Z * 0.255038
        var g = -X * 0.707196 + Y * 1.655397 + Z * 0.036152
        var b = X * 0.051713 - Y * 0.121364 + Z * 1.011530
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        if r > b && r > g && r > 1.0 {
            g = g / r
            b = b / r
            r = 1.0
        } else if g > b && g > r && g > 1.0 {
            r = r / g
            b = b / g
            g = 1.0
        } else if b > r && b > g && b > 1.0 {
            r = r / b
            g = g / b
            b = 1.0
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é (–ª–∏–Ω–µ–π–Ω—ã–π RGB -> sRGB)
        r = r <= 0.0031308 ? 12.92 * r : (1.0 + 0.055) * pow(r, (1.0 / 2.4)) - 0.055
        g = g <= 0.0031308 ? 12.92 * g : (1.0 + 0.055) * pow(g, (1.0 / 2.4)) - 0.055
        b = b <= 0.0031308 ? 12.92 * b : (1.0 + 0.055) * pow(b, (1.0 / 2.4)) - 0.055
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        r = max(0, min(1, r))
        g = max(0, min(1, g))
        b = max(0, min(1, b))
        
        return Color(red: r, green: g, blue: b)
    }
    
    // MARK: - Computed Properties
    
    /// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã
    var filteredLights: [Light] {
        switch filter {
        case .all:
            return lights
        case .on:
            return lights.filter { $0.on.on }
        case .off:
            return lights.filter { !$0.on.on }
        case .color:
            return lights.filter { $0.color != nil }
        case .white:
            return lights.filter { $0.color_temperature != nil && $0.color == nil }
        }
    }
    
    /// –ì—Ä—É–ø–ø–∞ 0 - –≤—Å–µ –ª–∞–º–ø—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    var allLightsGroup: HueGroup {
        HueGroup(
            id: "0",
            type: "grouped_light",
            group_type: "light_group",
            metadata: GroupMetadata(name: "–í—Å–µ –ª–∞–º–ø—ã")
        )
    }
    
    /// –õ–∞–º–ø—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    var lightsByRoom: [String: [Light]] {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        // –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö
        [:]
    }
    
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    var statistics: LightStatistics {
        LightStatistics(
            total: lights.count,
            on: lights.filter { $0.on.on }.count,
            off: lights.filter { !$0.on.on }.count,
            colorLights: lights.filter { $0.color != nil }.count,
            dimmableLights: lights.filter { $0.dimming != nil }.count,
            unreachable: lights.filter { $0.mode == "streaming" }.count
        )
    }
}

/// –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–º–ø
enum LightFilter: String, CaseIterable {
    case all = "–í—Å–µ"
    case on = "–í–∫–ª—é—á–µ–Ω–Ω—ã–µ"
    case off = "–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ"
    case color = "–¶–≤–µ—Ç–Ω—ã–µ"
    case white = "–ë–µ–ª—ã–µ"
    
    var icon: String {
        switch self {
        case .all: return "lightbulb"
        case .on: return "lightbulb.fill"
        case .off: return "lightbulb.slash"
        case .color: return "paintpalette"
        case .white: return "sun.max"
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–º–ø–∞–º
struct LightStatistics {
    let total: Int
    let on: Int
    let off: Int
    let colorLights: Int
    let dimmableLights: Int
    let unreachable: Int
    
    var onPercentage: Double {
        total > 0 ? Double(on) / Double(total) * 100 : 0
    }
    
    var averageBrightness: Double {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —è—Ä–∫–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø
        0
    }
}



extension LightsViewModel {
    
    /// –ò—â–µ—Ç –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã –≤ —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ Hue Bridge  
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ loadLights() - –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
    /// –°–æ–≥–ª–∞—Å–Ω–æ API v2, –º–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã Zigbee –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è
    /// - Parameter completion: Callback —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ª–∞–º–ø–∞–º–∏
    func searchForNewLights(completion: @escaping ([Light]) -> Void) {
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø...")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ª–∞–º–ø –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        let currentLightIds = Set(lights.map { $0.id })
        print("üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–º–ø: \(lights.count)")
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–∞–∫ –≤ loadLights(), –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å getAllLights...")
        
        apiClient.getAllLights()
                .receive(on: DispatchQueue.main)
                .sink(
                    receiveCompletion: { result in
                        switch result {
                        case .failure(let error):
                            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–º–ø: \(error)")
                            
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ iOS 17+
                            if let hueError = error as? HueAPIError {
                                switch hueError {
                                case .bridgeNotFound:
                                    print("üîå Hue Bridge –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É")
                                case .localNetworkPermissionDenied:
                                    print("üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
                                case .invalidURL:
                                    print("üåê –ù–µ–≤–µ—Ä–Ω—ã–π URL –∞–¥—Ä–µ—Å –º–æ—Å—Ç–∞")
                                case .invalidResponse:
                                    print("üì° –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ—Å—Ç–∞")
                                case .httpError(let statusCode):
                                    print("üîó HTTP –æ—à–∏–±–∫–∞: \(statusCode)")
                                default:
                                    print("‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API: \(hueError)")
                                }
                            } else {
                                print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
                            }
                            completion([])
                        case .finished:
                            print("‚úÖ –ó–∞–ø—Ä–æ—Å getAllLights –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        }
                    },
                    receiveValue: { [weak self] allLights in
                        guard let self = self else {
                            print("‚ùå LightsViewModel –±—ã–ª –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ receiveValue")
                            completion([])
                            return
                        }
                        
                        print("üìä –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–º–ø –æ—Ç API: \(allLights.count)")
                        
                        // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã
                        let newLights = allLights.filter { light in
                            !currentLightIds.contains(light.id)
                        }
                        
                        print("üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(newLights.count)")
                        for light in newLights {
                            print("  üí° –ù–æ–≤–∞—è –ª–∞–º–ø–∞: \(light.metadata.name) (ID: \(light.id))")
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                        self.lights = allLights
                        
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã
                        completion(newLights)
                    }
                )
                .store(in: &self.cancellables)
        }
    
    /// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ª–∞–º–ø—É
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    ///   - newName: –ù–æ–≤–æ–µ –∏–º—è
    func renameLight(_ light: Light, newName: String) {
        var updatedMetadata = light.metadata
        updatedMetadata.name = newName
        
        // –í API v2 –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint
        // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        updateLocalLight(light.id, with: LightState())
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if let index = lights.firstIndex(where: { $0.id == light.id }) {
            lights[index].metadata.name = newName
        }
    }
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ª–∞–º–ø—É –≤ –∫–æ–º–Ω–∞—Ç—É
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    ///   - roomId: ID –∫–æ–º–Ω–∞—Ç—ã (–≥—Ä—É–ø–ø—ã)
    func moveToRoom(_ light: Light, roomId: String) {
        // –í API v2 —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–º–ø—É –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π
        // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        if let index = lights.firstIndex(where: { $0.id == light.id }) {
            lights[index].metadata.archetype = roomId
        }
    }
}


