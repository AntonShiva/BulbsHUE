//
//  LightsViewModel.swift
//  PhilipsHueV2
//
//  Created by Anton Reasin on 28.07.2025.
//

import Foundation
import Combine
import SwiftUI
import CoreGraphics
#if canImport(UIKit)
import UIKit
#elseif canImport(AppKit)
import AppKit
#endif

/// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏
/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API
class LightsViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    /// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø –≤ —Å–∏—Å—Ç–µ–º–µ
    @Published var lights: [Light] = [] {
        didSet {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞
            updateLightsDictionary()
        }
    }
    
    /// –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø –ø–æ ID
    private var lightsDict: [String: Int] = [:]
    
    /// –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    @Published var isLoading: Bool = false
    
    /// –¢–µ–∫—É—â–∞—è –æ—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    @Published var error: Error?
    
    /// –í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∞–º–ø–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    @Published var selectedLight: Light?
    
    /// –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–º–ø
    @Published var filter: LightFilter = .all
    
    /// –õ–∞–º–ø—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞)
    @Published var serialNumberFoundLights: [Light] = []
    
    // MARK: - Private Properties
    
    /// –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
    private let apiClient: HueAPIClient
    
    /// –ù–∞–±–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ Combine
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Performance Properties
    
    /// –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    private var activeRequests = 0
    private let maxActiveRequests = 5
    
    /// –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–æ–¥—Ö–æ–¥)
    private var refreshTimer: Timer?
    
    /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
    private var eventStreamCancellable: AnyCancellable?
    
    /// Debouncing –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
    private var brightnessUpdateWorkItem: DispatchWorkItem?
    
    /// Debouncing –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    private var colorUpdateWorkItem: DispatchWorkItem?
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ViewModel —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
    /// - Parameter apiClient: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Hue API
    init(apiClient: HueAPIClient) {
        self.apiClient = apiClient
        setupBindings()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∞–º–ø
    func loadLights() {
        isLoading = true
        error = nil
        
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∞–º–ø—ã —á–µ—Ä–µ–∑ API v2 HTTPS...")
        
        apiClient.getAllLights()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–º–ø: \(error)")
                        self?.error = error
                    }
                },
                receiveValue: { [weak self] lights in
                    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(lights.count) –ª–∞–º–ø")
                    self?.lights = lights
                }
            )
            .store(in: &cancellables)
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é –ª–∞–º–ø—É –≤ —Å–ø–∏—Å–æ–∫ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É)
    /// - Parameter light: –ù–∞–π–¥–µ–Ω–Ω–∞—è –ª–∞–º–ø–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    func addFoundLight(_ light: Light) {
        print("üí° –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ª–∞–º–ø—É: \(light.metadata.name)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–∞–º–ø—ã –≤ —Å–ø–∏—Å–∫–µ
        if !lights.contains(where: { $0.id == light.id }) {
            lights.append(light)
            print("‚úÖ –õ–∞–º–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∞–º–ø")
        } else {
            print("‚ö†Ô∏è –õ–∞–º–ø–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–º–ø—É –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    /// - Parameter light: –õ–∞–º–ø–∞ –Ω–∞–π–¥–µ–Ω–Ω–∞—è –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    func addSerialNumberFoundLight(_ light: Light) {
        print("üîç –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–º–ø—É –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(light.metadata.name)")
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –ª–∞–º–ø—É
        serialNumberFoundLights = [light]
        print("‚úÖ –õ–∞–º–ø–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    }
    


    
    /// –ò—â–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –ª–∞–º–ø—É –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
    private func searchForAddedLight(_ serialNumber: String) {
        print("üîç –ò—â–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –ª–∞–º–ø—É \(serialNumber) –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ...")
        
        // –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ª–∞–º–ø –∑–∞–≤–µ—Ä—à–∞–µ–º
        isLoading = false
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ª–∞–º–ø—É –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (TouchLink reset + add)
    /// –≠—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–±—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø—ã, –∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Philips Hue
    /// - Parameter serialNumber: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–º–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (6-—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥)
    /// –ü–æ–∏—Å–∫ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (—Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–æ–≤—ã—Ö)
    func addLightBySerialNumber(_ serialNumber: String) {
        print("üîç –ü–æ–∏—Å–∫ –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É: \(serialNumber)")
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        guard isValidSerialNumber(serialNumber) else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
            error = HueAPIError.unknown("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤ (0-9, A-F)")
            return
        }
        
        isLoading = true
        error = nil
        clearSerialNumberFoundLights()
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ HueAPIClient
        apiClient.addLightBySerialNumber(serialNumber)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø—ã: \(error)")
                        self?.handleSerialNumberError(error, serialNumber: serialNumber)
                    }
                },
                receiveValue: { [weak self] foundLights in
                    guard let self = self else { return }
                    
                    if !foundLights.isEmpty {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∞–º–ø: \(foundLights.count)")
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
                        self.serialNumberFoundLights = foundLights
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                        for light in foundLights {
                            if !self.lights.contains(where: { $0.id == light.id }) {
                                self.lights.append(light)
                                print("   + –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∞–º–ø–∞: \(light.metadata.name)")
                            } else {
                                print("   ‚ÑπÔ∏è –õ–∞–º–ø–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ: \(light.metadata.name)")
                            }
                        }
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –ª–∞–º–ø—ã
                        if let firstLight = foundLights.first {
                            self.selectedLight = firstLight
                            NavigationManager.shared.showCategoriesSelection(for: firstLight)
                        }
                    } else {
                        print("‚ùå –õ–∞–º–ø—ã —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.showNotFoundError(for: serialNumber)
                    }
                }
            )
            .store(in: &cancellables)
    }

    /// –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∞–º–ø –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func findExistingLightBySerial(_ serialNumber: String) -> Light? {
        let cleanSerial = serialNumber.uppercased().replacingOccurrences(of: "-", with: "")
        
        // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≤–∞—à–∏—Ö –ª–∞–º–ø
        let knownMappings: [String: String] = [
            "AED970": "Hue color lamp 3",
            "C55B8": "–õ–∞–º–ø–∞ 2",
            "031A17": "–õ–∞–º–ø–∞ 1"
        ]
        
        // –ò—â–µ–º –ø–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –º–∞–ø–ø–∏–Ω–≥—É
        if let knownName = knownMappings[cleanSerial] {
            return lights.first { $0.metadata.name == knownName }
        }
        
        // –ò—â–µ–º –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
        return lights.first { light in
            let lightId = light.id.uppercased().replacingOccurrences(of: "-", with: "")
            let lightName = light.metadata.name.uppercased()
            
            return lightId.contains(cleanSerial) ||
                   lightName.contains(cleanSerial) ||
                   light.matchesSerialNumber(serialNumber)
        }
    }

    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ù–û–í–û–ô –ª–∞–º–ø—ã –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func addNewLightBySerial(_ serialNumber: String) {
        print("üÜï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–∞–º–ø—É: \(serialNumber)")
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        apiClient.addLightModern(serialNumber: serialNumber)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: \(error)")
                        
                        // –ï—Å–ª–∏ –ª–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
                        self?.error = HueAPIError.unknown(
                            "–õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n" +
                            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n" +
                            "‚Ä¢ –õ–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ—Å—Ç–æ–º\n" +
                            "‚Ä¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n" +
                            "‚Ä¢ –õ–∞–º–ø–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Philips Hue"
                        )
                        self?.serialNumberFoundLights = []
                    }
                },
                receiveValue: { [weak self] foundLights in
                    guard let self = self else { return }
                    
                    if !foundLights.isEmpty {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(foundLights.count)")
                        self.serialNumberFoundLights = foundLights
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                        let newLights = foundLights.filter { newLight in
                            !self.lights.contains { $0.id == newLight.id }
                        }
                        self.lights.append(contentsOf: newLights)
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –ª–∞–º–ø—ã
                        if let firstLight = foundLights.first {
                            NavigationManager.shared.showCategoriesSelection(for: firstLight)
                        }
                    } else {
                        print("‚ùå –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.error = HueAPIError.unknown("–õ–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        self.serialNumberFoundLights = []
                    }
                }
            )
            .store(in: &cancellables)
    }
 


    /// Fallback –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ API v1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    private func searchByNameFallback(_ serialNumber: String) {
        // –ò—â–µ–º —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∞–º–ø –ø–æ –∏–º–µ–Ω–∏/–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º  
        let foundLights = lights.filter { light in
            let lightName = light.metadata.name.lowercased()
            let serialLower = serialNumber.lowercased()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –∏–º–µ–Ω–∏ –ª–∞–º–ø—ã
            return lightName.contains(serialLower) || 
                   light.metadata.name.uppercased().contains(serialNumber.uppercased())
        }
        
        if !foundLights.isEmpty {
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–∞–º–ø–∞ —Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö: \(foundLights.first?.metadata.name ?? "")")
            serialNumberFoundLights = foundLights
            isLoading = false
        } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            print("‚ùå –õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø:")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ uniqueid
            for light in lights {
                print("   üì± '\(light.metadata.name)' - –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            }
            
            isLoading = false
            error = HueAPIError.unknown("–õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            serialNumberFoundLights = []
        }
    }
    

    
    /// –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∞–º–ø –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    func clearSerialNumberFoundLights() {
        serialNumberFoundLights = []
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Light –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    /// - Parameter serialNumber: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–º–ø—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤)
    /// - Returns: –ù–æ–≤—ã–π Light –æ–±—ä–µ–∫—Ç
    static func createLightFromSerialNumber(_ serialNumber: String) -> Light {
        let cleanSerialNumber = serialNumber.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
        let lightId = "light_\(cleanSerialNumber)"
        let lightName = "Hue Bulb \(cleanSerialNumber)"
        
        return Light(
            id: lightId,
            type: "light",
            metadata: LightMetadata(
                name: lightName,
                archetype: "desk_lamp"
            ),
            on: OnState(on: false),
            dimming: Dimming(brightness: 100),
            color: HueColor(
                xy: XYColor(x: 0.3, y: 0.3),
                gamut: Gamut(
                    red: XYColor(x: 0.7, y: 0.3),
                    green: XYColor(x: 0.17, y: 0.7),
                    blue: XYColor(x: 0.15, y: 0.06)
                ),
                gamut_type: "C"
            )
        )
    }
    
    /// –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä Philips Hue (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤)
    /// - Parameter serialNumber: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    /// - Returns: true –µ—Å–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π
    func isValidSerialNumber(_ serialNumber: String) -> Bool {
        let cleanSerial = serialNumber
            .trimmingCharacters(in: .whitespacesAndNewlines)
            .replacingOccurrences(of: "-", with: "")
            .replacingOccurrences(of: " ", with: "")
        
        // –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤ (hex)
        let hexCharacterSet = CharacterSet(charactersIn: "0123456789ABCDEFabcdef")
        return cleanSerial.count == 6 &&
               cleanSerial.rangeOfCharacter(from: hexCharacterSet.inverted) == nil
    }
    /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ª–∞–º–ø—É
    /// - Parameter light: –õ–∞–º–ø–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    func toggleLight(_ light: Light) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –ª–∞–º–ø–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ on:true
        let newState = LightState(
            on: OnState(on: !light.on.on)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å –ª–∞–º–ø—ã —Å debouncing
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - brightness: –£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (0-100)
    func setBrightness(for light: Light, brightness: Double) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        brightnessUpdateWorkItem?.cancel()
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        let workItem = DispatchWorkItem { [weak self] in
            let newState = LightState(
                dimming: Dimming(brightness: brightness)
            )
            self?.updateLight(light.id, state: newState, currentLight: light)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
        brightnessUpdateWorkItem = workItem
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ 250–º—Å
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.25, execute: workItem)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –ª–∞–º–ø—ã —Å debouncing
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - color: –¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ SwiftUI Color
    func setColor(for light: Light, color: SwiftUI.Color) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        colorUpdateWorkItem?.cancel()
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        let workItem = DispatchWorkItem { [weak self] in
            let xyColor = self?.convertToXY(color: color, gamutType: light.color_gamut_type) ?? XYColor(x: 0.3, y: 0.3)
            let newState = LightState(
                color: HueColor(xy: xyColor)
            )
            self?.updateLight(light.id, state: newState, currentLight: light)
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
        colorUpdateWorkItem = workItem
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ 200–º—Å (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ UX)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2, execute: workItem)
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (2200-6500)
    func setColorTemperature(for light: Light, temperature: Int) {
        let mirek = 1_000_000 / temperature
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        let newState = LightState(
            color_temperature: ColorTemperature(mirek: mirek)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫ –ª–∞–º–ø–µ
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    ///   - effect: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ (cosmos, enchant, sunbeam, underwater)
    func applyEffect(to light: Light, effect: String) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        let newState = LightState(
            effects_v2: EffectsV2(effect: effect)
        )
        
        updateLight(light.id, state: newState, currentLight: light)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∞–º–ø –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    /// - Parameters:
    ///   - lights: –ú–∞—Å—Å–∏–≤ –ª–∞–º–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    func updateMultipleLights(_ lights: [Light], state: LightState) {
        if lights.count > 3 {
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ 3 –ª–∞–º–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä—É–ø–ø—ã")
        }
        
        for light in lights {
            updateLight(light.id, state: state, currentLight: light)
        }
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–º–∏–≥–∞–Ω–∏–µ)
    /// - Parameter light: –õ–∞–º–ø–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    func alertLight(_ light: Light) {
        // –í API v2 alert –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ effects
        applyEffect(to: light, effect: "breathe")
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥)
    func startEventStream() {
        stopAutoRefresh() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        
        eventStreamCancellable = apiClient.eventPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] event in
                self?.handleEvent(event)
            }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
        apiClient.connectToEventStream()
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("Event stream error: \(error)")
                    }
                },
                receiveValue: { _ in }
            )
            .store(in: &cancellables)
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏–π
    func stopEventStream() {
        eventStreamCancellable?.cancel()
        apiClient.disconnectEventStream()
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
    func startAutoRefresh() {
        stopAutoRefresh()
        
        refreshTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
            self?.loadLights()
        }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    func stopAutoRefresh() {
        refreshTimer?.invalidate()
        refreshTimer = nil
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    private func setupBindings() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∏ –æ—Ç API –∫–ª–∏–µ–Ω—Ç–∞
        apiClient.errorPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] error in
                self?.error = error
            }
            .store(in: &cancellables)
    }
    
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
    private func handleEvent(_ event: HueEvent) {
        guard let eventData = event.data else { return }
        
        for data in eventData {
            switch data.type {
            case "light":
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–∞–º–ø—É
                if let lightId = data.id {
                    updateLocalLightFromEvent(lightId, eventData: data)
                }
            default:
                break
            }
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è
    private func updateLocalLightFromEvent(_ lightId: String, eventData: EventData) {
        guard let index = lights.firstIndex(where: { $0.id == lightId }) else { return }
        
        if let on = eventData.on {
            lights[index].on = on
        }
        
        if let dimming = eventData.dimming {
            lights[index].dimming = dimming
        }
        
        if let color = eventData.color {
            lights[index].color = color
        }
        
        if let colorTemp = eventData.color_temperature {
            lights[index].color_temperature = colorTemp
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ///   - currentLight: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private func updateLight(_ lightId: String, state: LightState, currentLight: Light? = nil) {
        guard activeRequests < maxActiveRequests else {
            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return
        }
        
        activeRequests += 1
        let optimizedState = state.optimizedState(currentLight: currentLight)
        
        print("üöÄ –û–±–Ω–æ–≤–ª—è–µ–º –ª–∞–º–ø—É \(lightId) —á–µ—Ä–µ–∑ API v2 HTTPS...")
        
        apiClient.updateLight(id: lightId, state: optimizedState)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.activeRequests -= 1
                    
                    if case .failure(let error) = completion {
                        self?.error = error
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É \(lightId): \(error)")
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                        switch error {
                        case HueAPIError.rateLimitExceeded:
                            print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        case HueAPIError.bufferFull:
                            print("‚ö†Ô∏è –ë—É—Ñ–µ—Ä –º–æ—Å—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω")
                        case HueAPIError.notAuthenticated:
                            print("üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
                        default:
                            break
                        }
                    }
                },
                receiveValue: { [weak self] success in
                    if success {
                        print("‚úÖ –õ–∞–º–ø–∞ \(lightId) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        self?.updateLocalLight(lightId, with: optimizedState)
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É \(lightId)")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–∞–º–ø
    private func updateLightsDictionary() {
        lightsDict.removeAll()
        for (index, light) in lights.enumerated() {
            lightsDict[light.id] = index
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    /// - Parameters:
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private func updateLocalLight(_ lightId: String, with state: LightState) {
        // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ firstIndex(where:)
        guard let index = lightsDict[lightId], index < lights.count else { return }
        
        if let on = state.on {
            lights[index].on = on
        }
        
        if let dimming = state.dimming {
            lights[index].dimming = dimming
        }
        
        if let color = state.color {
            lights[index].color = color
        }
        
        if let colorTemp = state.color_temperature {
            lights[index].color_temperature = colorTemp
        }
        
        if let effects = state.effects_v2 {
            lights[index].effects_v2 = effects
        }
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SwiftUI Color –≤ XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –≥–∞–º–º—ã –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - color: –¶–≤–µ—Ç SwiftUI
    ///   - gamutType: –¢–∏–ø —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º—ã (A, B, C –∏–ª–∏ nil)
    /// - Returns: XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Hue API
    private func convertToXY(color: SwiftUI.Color, gamutType: String? = nil) -> XYColor {
        return ColorConversion.convertToXY(color: color, gamutType: gamutType)
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç XY –≤ RGB (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)
    func convertXYToColor(_ xy: XYColor, brightness: Double = 1.0, gamutType: String? = nil) -> Color {
        return ColorConversion.convertXYToColor(xy, brightness: brightness, gamutType: gamutType)
    }
    
    // MARK: - Computed Properties
    
    /// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã
    var filteredLights: [Light] {
        switch filter {
        case .all:
            return lights
        case .on:
            return lights.filter { $0.on.on }
        case .off:
            return lights.filter { !$0.on.on }
        case .color:
            return lights.filter { $0.color != nil }
        case .white:
            return lights.filter { $0.color_temperature != nil && $0.color == nil }
        }
    }
    
    /// –ì—Ä—É–ø–ø–∞ 0 - –≤—Å–µ –ª–∞–º–ø—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    var allLightsGroup: HueGroup {
        HueGroup(
            id: "0",
            type: "grouped_light",
            group_type: "light_group",
            metadata: GroupMetadata(name: "–í—Å–µ –ª–∞–º–ø—ã")
        )
    }
    
    /// –õ–∞–º–ø—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
    var lightsByRoom: [String: [Light]] {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        // –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–∞—Ö
        [:]
    }
    
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    var statistics: LightStatistics {
        LightStatistics(
            total: lights.count,
            on: lights.filter { $0.on.on }.count,
            off: lights.filter { !$0.on.on }.count,
            colorLights: lights.filter { $0.color != nil }.count,
            dimmableLights: lights.filter { $0.dimming != nil }.count,
            unreachable: lights.filter { $0.mode == "streaming" }.count
        )
    }
    // MARK: - Memory Management

    deinit {
        print("‚ôªÔ∏è LightsViewModel –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        cancellables.forEach { $0.cancel() }
        cancellables.removeAll()
        refreshTimer?.invalidate()
        refreshTimer = nil
        brightnessUpdateWorkItem?.cancel()
        colorUpdateWorkItem?.cancel()
        stopEventStream()
        lights.removeAll()
        serialNumberFoundLights.removeAll()
        lightsDict.removeAll()
    }
}

/// –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–º–ø
enum LightFilter: String, CaseIterable {
    case all = "–í—Å–µ"
    case on = "–í–∫–ª—é—á–µ–Ω–Ω—ã–µ"
    case off = "–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ"
    case color = "–¶–≤–µ—Ç–Ω—ã–µ"
    case white = "–ë–µ–ª—ã–µ"
    
    var icon: String {
        switch self {
        case .all: return "lightbulb"
        case .on: return "lightbulb.fill"
        case .off: return "lightbulb.slash"
        case .color: return "paintpalette"
        case .white: return "sun.max"
        }
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∞–º–ø–∞–º
struct LightStatistics {
    let total: Int
    let on: Int
    let off: Int
    let colorLights: Int
    let dimmableLights: Int
    let unreachable: Int
    
    var onPercentage: Double {
        total > 0 ? Double(on) / Double(total) * 100 : 0
    }
    
    var averageBrightness: Double {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —è—Ä–∫–æ—Å—Ç–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø
        0
    }
}



extension LightsViewModel {
    
    /// –ò—â–µ—Ç –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã –≤ —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ Hue Bridge  
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ —á—Ç–æ –∏ loadLights() - –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
    /// –°–æ–≥–ª–∞—Å–Ω–æ API v2, –º–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã Zigbee –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è
    /// - Parameter completion: Callback —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ª–∞–º–ø–∞–º–∏
    func searchForNewLights(completion: @escaping ([Light]) -> Void) {
        print("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø...")
        
        let currentLightIds = Set(lights.map { $0.id })
        
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î –ò–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø
        apiClient.addLightModern(serialNumber: nil)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { result in
                    if case .failure(let error) = result {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)")
                        completion([])
                    }
                },
                receiveValue: { [weak self] allLights in
                    guard let self = self else {
                        completion([])
                        return
                    }
                    
                    let newLights = allLights.filter { light in
                        !currentLightIds.contains(light.id)
                    }
                    
                    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(newLights.count)")
                    self.lights = allLights
                    completion(newLights)
                }
            )
            .store(in: &cancellables)
    }
    
    /// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –ª–∞–º–ø—É
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    ///   - newName: –ù–æ–≤–æ–µ –∏–º—è
    func renameLight(_ light: Light, newName: String) {
        var updatedMetadata = light.metadata
        updatedMetadata.name = newName
        
        // –í API v2 –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint
        // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        updateLocalLight(light.id, with: LightState())
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if let index = lights.firstIndex(where: { $0.id == light.id }) {
            lights[index].metadata.name = newName
        }
    }
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ª–∞–º–ø—É –≤ –∫–æ–º–Ω–∞—Ç—É
    /// - Parameters:
    ///   - light: –õ–∞–º–ø–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    ///   - roomId: ID –∫–æ–º–Ω–∞—Ç—ã (–≥—Ä—É–ø–ø—ã)
    func moveToRoom(_ light: Light, roomId: String) {
        // –í API v2 —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–º–ø—É –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π
        // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        
        if let index = lights.firstIndex(where: { $0.id == light.id }) {
            lights[index].metadata.archetype = roomId
        }
    }
}




extension LightsViewModel {
    
   
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    private func handleSerialNumberError(_ error: Error, serialNumber: String) {
        if let hueError = error as? HueAPIError {
            switch hueError {
            case .notAuthenticated:
                self.error = HueAPIError.unknown(
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –º–æ—Å—Ç—É."
                )
                
            case .bridgeNotFound:
                self.error = HueAPIError.unknown(
                    "–ú–æ—Å—Ç Hue –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
                )
                
            case .networkError:
                self.error = HueAPIError.unknown(
                    "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–æ–π –∂–µ Wi-Fi —Å–µ—Ç–∏, —á—Ç–æ –∏ –º–æ—Å—Ç."
                )
                
            case .httpError(let statusCode):
                if statusCode == 404 {
                    // –õ–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                    showNotFoundError(for: serialNumber)
                } else {
                    self.error = HueAPIError.unknown(
                        "–û—à–∏–±–∫–∞ HTTP \(statusCode). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                }
                
            default:
                self.error = hueError
            }
        } else {
            self.error = HueAPIError.unknown(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)"
            )
        }
        
        serialNumberFoundLights = []
    }
    
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –∫–æ–≥–¥–∞ –ª–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    private func showNotFoundError(for serialNumber: String) {
        self.error = HueAPIError.unknown(
            """
            –õ–∞–º–ø–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º \(serialNumber) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
            
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
            ‚Ä¢ –õ–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–µ—Ç—Ä–∞ –æ—Ç –º–æ—Å—Ç–∞
            ‚Ä¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (6 —Å–∏–º–≤–æ–ª–æ–≤)
            ‚Ä¢ –õ–∞–º–ø–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Philips Hue
            ‚Ä¢ –õ–∞–º–ø–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –º–æ—Å—Ç—É
            
            –ï—Å–ª–∏ –ª–∞–º–ø–∞ –±—ã–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –º–æ—Å—Ç—É:
            1. –í—ã–∫–ª—é—á–∏—Ç–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
            2. –õ–∞–º–ø–∞ –º–∏–≥–Ω–µ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–±—Ä–æ—Å
            3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞
            """
        )
    }
    
 
    
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø –≤ —Å–µ—Ç–∏ (–±–µ–∑ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞)
    func searchForNewLights() {
        print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ª–∞–º–ø...")
        
        isLoading = true
        error = nil
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ ID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        let currentLightIds = Set(lights.map { $0.id })
        
        // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ API v2
        apiClient.getAllLights()
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error)")
                        self?.error = error
                    }
                },
                receiveValue: { [weak self] allLights in
                    guard let self = self else { return }
                    
                    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ª–∞–º–ø—ã
                    let newLights = allLights.filter { light in
                        !currentLightIds.contains(light.id) || light.isNewLight
                    }
                    
                    if !newLights.isEmpty {
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ª–∞–º–ø: \(newLights.count)")
                        
                        self.lights = allLights
                        self.serialNumberFoundLights = newLights
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ–π –ª–∞–º–ø—ã
                        if let firstNewLight = newLights.first {
                            self.selectedLight = firstNewLight
                        }
                    } else {
                        print("‚ÑπÔ∏è –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        self.error = HueAPIError.unknown(
                            """
                            –ù–æ–≤—ã–µ –ª–∞–º–ø—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.
                            
                            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
                            ‚Ä¢ –õ–∞–º–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–∏—Ç–∞–Ω–∏—é
                            ‚Ä¢ –õ–∞–º–ø—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ—Å—Ç–æ–º
                            ‚Ä¢ –õ–∞–º–ø—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É –º–æ—Å—Ç—É
                            """
                        )
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –°–±—Ä–æ—Å –ª–∞–º–ø—ã (–¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é)
    func resetLightForAddition(completion: @escaping (Bool) -> Void) {
        print("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±—Ä–æ—Å—É –ª–∞–º–ø—ã:")
        print("1. –í—ã–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É")
        print("2. –í–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã")
        print("3. –í—ã–∫–ª—é—á–∏—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã")
        print("4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —à–∞–≥–∏ 2-3 –µ—â–µ 4 —Ä–∞–∑–∞")
        print("5. –í–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –º–∏–≥–Ω—É—Ç—å")
        print("6. –õ–∞–º–ø–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.error = HueAPIError.unknown(
            """
            –î–ª—è —Å–±—Ä–æ—Å–∞ –ª–∞–º–ø—ã:
            
            1. –í—ã–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É
            2. –í–∫–ª—é—á–∏—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            3. –í—ã–∫–ª—é—á–∏—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
            4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —à–∞–≥–∏ 2-3 –µ—â–µ 4 —Ä–∞–∑–∞
            5. –í–∫–ª—é—á–∏—Ç–µ –ª–∞–º–ø—É - –æ–Ω–∞ –º–∏–≥–Ω–µ—Ç
            
            –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∞–º–ø—É —Å–Ω–æ–≤–∞.
            """
        )
        
        completion(true)
    }
}
