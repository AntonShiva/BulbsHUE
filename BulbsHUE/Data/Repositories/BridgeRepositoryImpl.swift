//
//  BridgeRepositoryImpl.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 15.08.2025.
//

import Foundation
import Combine
import Network

/// –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è BridgeRepository 
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Philips Hue Bridge
class BridgeRepositoryImpl: BridgeRepository {
    
    // MARK: - Dependencies
    
    private let hueBridgeDiscovery: HueBridgeDiscovery
    private let smartBridgeDiscovery = SmartBridgeDiscovery()
    private let hueAPIClient: HueAPIClient
    private let userDefaults = UserDefaults.standard
    
    // MARK: - Private Properties
    
    private var cancellables = Set<AnyCancellable>()
    private let savedBridgeKey = "saved_bridge"
    private let allBridgesKey = "all_saved_bridges"
    
    // MARK: - Initialization
    
    init(hueAPIClient: HueAPIClient) {
        self.hueAPIClient = hueAPIClient
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HueBridgeDiscovery
        if #available(iOS 12.0, *) {
            self.hueBridgeDiscovery = HueBridgeDiscovery()
        } else {
            // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.hueBridgeDiscovery = HueBridgeDiscovery()
        }
    }
    
    // MARK: - Bridge Discovery
    
    func discoverBridges() -> AnyPublisher<[BridgeEntity], Error> {
        return Future<[BridgeEntity], Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(BridgeRepositoryError.bridgeNotFound))
                return
            }
            
            print("üîç [BridgeRepository] –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤...")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HueBridgeDiscovery
            self.hueBridgeDiscovery.discoverBridges { bridges in
                let bridgeEntities = bridges.map { bridge in
                    BridgeEntity(from: bridge)
                }
                
                print("‚úÖ [BridgeRepository] –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤: \(bridgeEntities.count)")
                promise(.success(bridgeEntities))
            }
        }
        .eraseToAnyPublisher()
    }
    
    func discoverBridgesViaMDNS() -> AnyPublisher<[BridgeEntity], Error> {
        return Future<[BridgeEntity], Error> { promise in
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º mDNS discovery –∏–∑ SmartBridgeDiscovery
            let devices = SmartBridgeDiscovery.getLocalNetworkDevices()
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ IP –≤ Bridge entities –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            let bridgeEntities = devices.enumerated().map { index, ip in
                BridgeEntity(
                    id: UUID().uuidString,
                    name: "Philips Hue Bridge",
                    ipAddress: ip,
                    isConnected: false
                )
            }
            
            print("‚úÖ [BridgeRepository] mDNS –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ \(bridgeEntities.count)")
            promise(.success(bridgeEntities))
        }
        .eraseToAnyPublisher()
    }
    
    func discoverBridgesViaPhilips() -> AnyPublisher<[BridgeEntity], Error> {
        return Future<[BridgeEntity], Error> { [weak self] promise in
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º cloud discovery –∏–∑ HueBridgeDiscovery
            // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É Philips —Å–µ—Ä–≤–∏—Å—É
            self?.discoverBridgesViaCloudService { bridges in
                let bridgeEntities = bridges.map { bridge in
                    BridgeEntity(from: bridge)
                }
                
                print("‚úÖ [BridgeRepository] Philips Cloud –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤ \(bridgeEntities.count)")
                promise(.success(bridgeEntities))
            }
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Bridge Connection
    
    func connectToBridge(_ bridge: BridgeEntity, forcePairing: Bool = false) -> AnyPublisher<BridgeEntity, Error> {
        return Future<BridgeEntity, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(BridgeRepositoryError.bridgeNotFound))
                return
            }
            
            print("üîó [BridgeRepository] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É: \(bridge.name) (\(bridge.ipAddress))")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.checkBridgeConnection(bridge)
                .sink(
                    receiveCompletion: { completion in
                        if case .failure(let error) = completion {
                            promise(.failure(error))
                        }
                    },
                    receiveValue: { isConnected in
                        if isConnected {
                            // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            if !forcePairing && bridge.applicationKey != nil {
                                promise(.success(bridge))
                                return
                            }
                        }
                        
                        // –ù—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                        promise(.success(bridge)) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    }
                )
                .store(in: &self.cancellables)
        }
        .eraseToAnyPublisher()
    }
    
    func authenticateWithBridge(_ bridge: BridgeEntity, appName: String, deviceName: String) -> AnyPublisher<BridgeEntity, Error> {
        return Future<BridgeEntity, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(BridgeRepositoryError.bridgeNotFound))
                return
            }
            
            print("üîê [BridgeRepository] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –º–æ—Å—Ç–æ–º: \(bridge.name)")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HueAPIClient –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            self.hueAPIClient.createUser(appName: appName, deviceName: deviceName)
                .sink(
                    receiveCompletion: { completion in
                        if case .failure(let error) = completion {
                            print("‚ùå [BridgeRepository] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: \(error)")
                            promise(.failure(BridgeRepositoryError.authenticationFailed))
                        }
                    },
                    receiveValue: { authResponse in
                        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π bridge —Å application key
                        let authenticatedBridge = BridgeEntity(
                            id: bridge.id,
                            name: bridge.name,
                            ipAddress: bridge.ipAddress,
                            modelId: bridge.modelId,
                            swVersion: bridge.swVersion,
                            applicationKey: authResponse.success?.username,
                            isConnected: true,
                            lastSeen: Date()
                        )
                        
                        print("‚úÖ [BridgeRepository] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                        promise(.success(authenticatedBridge))
                    }
                )
                .store(in: &self.cancellables)
        }
        .eraseToAnyPublisher()
    }
    
    func checkBridgeConnection(_ bridge: BridgeEntity) -> AnyPublisher<Bool, Error> {
        return Future<Bool, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(BridgeRepositoryError.bridgeNotFound))
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å
            guard let url = URL(string: "https://\(bridge.ipAddress)/api/config") else {
                promise(.failure(BridgeRepositoryError.invalidBridgeData))
                return
            }
            
            let task = URLSession.shared.dataTask(with: url) { data, response, error in
                if let error = error {
                    promise(.failure(BridgeRepositoryError.networkError(error)))
                    return
                }
                
                guard let httpResponse = response as? HTTPURLResponse,
                      httpResponse.statusCode == 200 else {
                    promise(.failure(BridgeRepositoryError.bridgeUnavailable))
                    return
                }
                
                promise(.success(true))
            }
            
            task.resume()
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Bridge Info
    
    func getBridgeInfo(_ bridge: BridgeEntity) -> AnyPublisher<BridgeEntity, Error> {
        return getBridgeConfig(bridge)
            .map { config in
                // –û–±–Ω–æ–≤–ª—è–µ–º bridge entity —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                BridgeEntity(
                    id: bridge.id,
                    name: config.name ?? bridge.name,
                    ipAddress: bridge.ipAddress,
                    modelId: config.modelid,
                    swVersion: config.swversion,
                    applicationKey: bridge.applicationKey,
                    isConnected: bridge.isConnected,
                    lastSeen: Date()
                )
            }
            .eraseToAnyPublisher()
    }
    
    func getBridgeConfig(_ bridge: BridgeEntity) -> AnyPublisher<BridgeConfig, Error> {
        return Future<BridgeConfig, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(BridgeRepositoryError.bridgeNotFound))
                return
            }
            
            self.hueAPIClient.getBridgeConfig()
                .sink(
                    receiveCompletion: { completion in
                        if case .failure(let error) = completion {
                            promise(.failure(BridgeRepositoryError.networkError(error)))
                        }
                    },
                    receiveValue: { config in
                        promise(.success(config))
                    }
                )
                .store(in: &self.cancellables)
        }
        .eraseToAnyPublisher()
    }
    
    func getBridgeCapabilities(_ bridge: BridgeEntity) -> AnyPublisher<BridgeCapabilities, Error> {
        return Future<BridgeCapabilities, Error> { promise in
            // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            let capabilities = BridgeCapabilities(
                resources: ResourceLimits(
                    lights: 50,
                    sensors: 62,
                    groups: 64,
                    scenes: 200,
                    rules: 250,
                    schedules: 100,
                    resourcelinks: 64,
                    whitelists: 16
                ),
                streaming: StreamingLimits(total: 10, entertainment: 1),
                timezones: ["UTC", "Europe/Moscow"]
            )
            
            promise(.success(capabilities))
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Bridge Storage
    
    func saveBridge(_ bridge: BridgeEntity) -> AnyPublisher<BridgeEntity, Error> {
        return Future<BridgeEntity, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(BridgeRepositoryError.bridgeNotFound))
                return
            }
            
            do {
                let data = try JSONEncoder().encode(bridge)
                self.userDefaults.set(data, forKey: self.savedBridgeKey)
                
                // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ—Å—Ç–æ–≤
                var allBridges = self.loadAllSavedBridges()
                
                // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ—Å—Ç —Å —Ç–∞–∫–∏–º –∂–µ ID, –µ—Å–ª–∏ –µ—Å—Ç—å
                allBridges.removeAll { $0.id == bridge.id }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ—Å—Ç
                allBridges.append(bridge)
                
                let allBridgesData = try JSONEncoder().encode(allBridges)
                self.userDefaults.set(allBridgesData, forKey: self.allBridgesKey)
                
                print("‚úÖ [BridgeRepository] –ú–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(bridge.name)")
                promise(.success(bridge))
                
            } catch {
                promise(.failure(BridgeRepositoryError.invalidBridgeData))
            }
        }
        .eraseToAnyPublisher()
    }
    
    func getSavedBridge() -> AnyPublisher<BridgeEntity?, Never> {
        return Future<BridgeEntity?, Never> { [weak self] promise in
            guard let self = self,
                  let data = self.userDefaults.data(forKey: self.savedBridgeKey) else {
                promise(.success(nil))
                return
            }
            
            do {
                let bridge = try JSONDecoder().decode(BridgeEntity.self, from: data)
                promise(.success(bridge))
            } catch {
                print("‚ùå [BridgeRepository] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞: \(error)")
                promise(.success(nil))
            }
        }
        .eraseToAnyPublisher()
    }
    
    func removeSavedBridge() -> AnyPublisher<Void, Never> {
        return Future<Void, Never> { [weak self] promise in
            self?.userDefaults.removeObject(forKey: self?.savedBridgeKey ?? "")
            print("‚úÖ [BridgeRepository] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–æ—Å—Ç —É–¥–∞–ª–µ–Ω")
            promise(.success(()))
        }
        .eraseToAnyPublisher()
    }
    
    func getAllSavedBridges() -> AnyPublisher<[BridgeEntity], Never> {
        return Future<[BridgeEntity], Never> { [weak self] promise in
            let bridges = self?.loadAllSavedBridges() ?? []
            promise(.success(bridges))
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Private Methods
    
    private func loadAllSavedBridges() -> [BridgeEntity] {
        guard let data = userDefaults.data(forKey: allBridgesKey) else {
            return []
        }
        
        do {
            return try JSONDecoder().decode([BridgeEntity].self, from: data)
        } catch {
            print("‚ùå [BridgeRepository] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ—Å—Ç–æ–≤: \(error)")
            return []
        }
    }
    
    private func discoverBridgesViaCloudService(completion: @escaping ([Bridge]) -> Void) {
        // –ó–∞–ø—Ä–æ—Å –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É Philips Discovery Service
        guard let url = URL(string: "https://discovery.meethue.com/") else {
            completion([])
            return
        }
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå Cloud discovery error: \(error)")
                completion([])
                return
            }
            
            guard let data = data else {
                completion([])
                return
            }
            
            do {
                let bridges = try JSONDecoder().decode([Bridge].self, from: data)
                print("‚úÖ Cloud discovery: –Ω–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤ \(bridges.count)")
                completion(bridges)
            } catch {
                print("‚ùå Cloud discovery parsing error: \(error)")
                completion([])
            }
        }
        
        task.resume()
    }
}
