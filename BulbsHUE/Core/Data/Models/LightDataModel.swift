//
//  LightDataModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/11/25.
//

import Foundation
import SwiftData

/// SwiftData –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∞–º–ø
/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ Light –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
@Model
final class LightDataModel {
    
    // MARK: - Stored Properties
    
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∞–º–ø—ã
    var lightId: String
    
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–º–ø—ã
    var name: String
    
    /// –¢–∏–ø –∞—Ä—Ö–µ—Ç–∏–ø–∞ –ª–∞–º–ø—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞: "DESK LAMP", "CEILING ROUND", etc.)
    var archetype: String
    
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è –ª–∞–º–ø—ã
    var isOn: Bool
    
    /// –Ø—Ä–∫–æ—Å—Ç—å –ª–∞–º–ø—ã (0.0 - 100.0)
    var brightness: Double
    
    /// –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (153 - 500 mired)
    var colorTemperature: Int?
    
    /// –¶–≤–µ—Ç –ª–∞–º–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    var colorX: Double?
    var colorY: Double?
    
    /// –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –ª–∞–º–ø–∞ –≤ Environment (–≤–∏–¥–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ)
    var isAssignedToEnvironment: Bool
    
    /// –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    var lastUpdated: Date
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    /// - Parameters:
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–º–ø—ã
    ///   - archetype: –¢–∏–ø –ª–∞–º–ø—ã
    ///   - isOn: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è
    ///   - brightness: –Ø—Ä–∫–æ—Å—Ç—å
    ///   - colorTemperature: –¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    ///   - colorX: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–≤–µ—Ç–∞
    ///   - colorY: Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–≤–µ—Ç–∞
    ///   - isAssignedToEnvironment: –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –≤ Environment
    init(
        lightId: String,
        name: String,
        archetype: String,
        isOn: Bool = false,
        brightness: Double = 50.0,
        colorTemperature: Int? = nil,
        colorX: Double? = nil,
        colorY: Double? = nil,
        isAssignedToEnvironment: Bool = false
    ) {
        self.lightId = lightId
        self.name = name
        self.archetype = archetype
        self.isOn = isOn
        self.brightness = brightness
        self.colorTemperature = colorTemperature
        self.colorX = colorX
        self.colorY = colorY
        self.isAssignedToEnvironment = isAssignedToEnvironment
        self.lastUpdated = Date()
    }
}

// MARK: - Light Model Conversion

extension LightDataModel {
    
    /// –°–æ–∑–¥–∞—Ç—å LightDataModel –∏–∑ Light –º–æ–¥–µ–ª–∏
    /// - Parameters:
    ///   - light: Light –º–æ–¥–µ–ª—å –∏–∑ API
    ///   - isAssignedToEnvironment: –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –≤ Environment
    /// - Returns: LightDataModel –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    static func fromLight(_ light: Light, isAssignedToEnvironment: Bool = false) -> LightDataModel {
        return LightDataModel(
            lightId: light.id,
            name: light.metadata.name,
            archetype: light.metadata.archetype ?? "other",
            isOn: light.on.on,
            brightness: light.dimming?.brightness ?? 50.0,
            colorTemperature: light.color_temperature?.mirek,
            colorX: light.color?.xy?.x,
            colorY: light.color?.xy?.y,
            isAssignedToEnvironment: isAssignedToEnvironment
        )
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Light –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
    /// - Returns: Light –º–æ–¥–µ–ª—å
    func toLight() -> Light {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Light –º–æ–¥–µ–ª–∏
        let on = OnState(on: isOn)
        
        let dimming = Dimming(brightness: brightness)
        
        let colorTemperatureComponent: ColorTemperature? = {
            if let temp = colorTemperature {
                return ColorTemperature(mirek: temp)
            }
            return nil
        }()
        
        let colorComponent: HueColor? = {
            if let x = colorX, let y = colorY {
                return HueColor(xy: XYColor(x: x, y: y))
            }
            return nil
        }()
        
        let metadata = LightMetadata(
            name: name,
            archetype: archetype
        )
        
        return Light(
            id: lightId,
            metadata: metadata,
            on: on,
            dimming: dimming,
            color: colorComponent,
            color_temperature: colorTemperatureComponent
        )
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Light –º–æ–¥–µ–ª–∏
    /// - Parameter light: Light –º–æ–¥–µ–ª—å –∏–∑ API
    func updateFromLight(_ light: Light) {
        print("üîÑ LightDataModel.updateFromLight:")
        print("   ‚îî‚îÄ‚îÄ –¢–µ–∫—É—â–∏–π archetype –≤ –ë–î: '\(self.archetype)'")
        print("   ‚îî‚îÄ‚îÄ –ù–æ–≤—ã–π archetype –∏–∑ API: '\(light.metadata.archetype ?? "nil")'")
        
        self.name = light.metadata.name
        
        // –í–ê–ñ–ù–û: –ù–ï –∑–∞—Ç–∏—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞ –∏–∑ UI –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API!
        // –ï—Å–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ç–∏–ø –∏–∑ –Ω–∞—à–∏—Ö BulbTypeModels (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä),
        // –ù–ò–ö–û–ì–î–ê –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ archetype –∏–∑ API Philips Hue (–Ω–∞–ø—Ä–∏–º–µ—Ä, sultan_bulb)
        
        let ourSubtypes = [
            // TABLE
            "TRADITIONAL LAMP", "DESK LAMP", "TABLE WASH",
            // FLOOR  
            "CHRISTMAS TREE", "FLOOR SHADE", "FLOOR LANTERN", "BOLLARD", "GROUND SPOT", "RECESSED FLOOR", "LIGHT BAR",
            // WALL
            "WALL LANTERN", "WALL SHADE", "WALL SPOT", "DUAL WALL LIGHT",
            // CEILING
            "PENDANT ROUND", "PENDANT HORIZONTAL", "CEILING ROUND", "CEILING SQUARE", "SINGLE SPOT", "DOUBLE SPOT", "RECESSED CEILING", "PEDANT SPOT", "CEILING HORIZONTAL", "CEILING TUBE",
            // OTHER
            "SIGNATURE BULB", "ROUNDED BULB", "SPOT", "FLOOD LIGHT", "CANDELABRA BULB", "FILAMENT BULB", "MINI-BULB", "HUE LIGHTSTRIP", "LIGHTGUIDE", "PLAY LIGHT BAR", "HUE BLOOM", "HUE IRIS", "SMART PLUG", "HUE CENTRIS", "HUE TUBE", "HUE SIGNE", "FLOODLIGHT CAMERA", "TWILIGHT"
        ]
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π archetype - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä, –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
        if ourSubtypes.contains(self.archetype.uppercased()) {
            print("   ‚îî‚îÄ‚îÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ç–∏–ø: '\(self.archetype)' (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ '\(light.metadata.archetype ?? "nil")')")
        } else if self.archetype.isEmpty,
                  let newArchetype = light.metadata.archetype,
                  !newArchetype.isEmpty {
            print("   ‚îî‚îÄ‚îÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º archetype –∏–∑ API: '\(newArchetype)'")
            self.archetype = newArchetype
        } else {
            print("   ‚îî‚îÄ‚îÄ –ù–µ –∏–∑–º–µ–Ω—è–µ–º archetype")
        }
        
        self.isOn = light.on.on
        self.brightness = light.dimming?.brightness ?? self.brightness
        self.colorTemperature = light.color_temperature?.mirek
        self.colorX = light.color?.xy?.x
        self.colorY = light.color?.xy?.y
        self.lastUpdated = Date()
    }
}
