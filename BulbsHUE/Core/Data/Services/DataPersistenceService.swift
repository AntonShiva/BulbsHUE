//
//  DataPersistenceService.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/11/25.
//

import Foundation
import SwiftData
import SwiftUI
import Combine

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SwiftData
/// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
final class DataPersistenceService: ObservableObject {
    
    // MARK: - Published Properties
    
    /// –°–ø–∏—Å–æ–∫ –ª–∞–º–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤ Environment (–¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI)
    @Published var assignedLights: [Light] = []
    
    /// –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    @Published var isUpdating: Bool = false
    
    // MARK: - Properties
    
    /// –ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä SwiftData
    private let modelContainer: ModelContainer
    
    /// –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    private var modelContext: ModelContext {
        modelContainer.mainContext
    }
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º SwiftData
    init() {
        do {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É –¥–∞–Ω–Ω—ã—Ö
            let schema = Schema([
                LightDataModel.self,
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            ])
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
            let modelConfiguration = ModelConfiguration(
                schema: schema,
                isStoredInMemoryOnly: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
                cloudKitDatabase: .none // –ü–æ–∫–∞ –±–µ–∑ iCloud, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            )
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.modelContainer = try ModelContainer(
                for: schema,
                configurations: [modelConfiguration]
            )
            
            print("‚úÖ DataPersistenceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            loadAssignedLights()
        } catch {
            fatalError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ModelContainer: \(error)")
        }
    }
    
    // MARK: - Light Management
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É
    /// - Parameters:
    ///   - light: Light –º–æ–¥–µ–ª—å –∏–∑ API
    ///   - isAssignedToEnvironment: –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –ª–∞–º–ø–∞ –≤ Environment
    func saveLightData(_ light: Light, isAssignedToEnvironment: Bool = false) {
        print("üîÑ DataPersistenceService.saveLightData: \(light.metadata.name), assigned: \(isAssignedToEnvironment)")
        
        Task { @MainActor in
            isUpdating = true
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –ª–∞–º–ø–∞
            if let existingLight = fetchLightData(by: light.id) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                existingLight.updateFromLight(light)
                existingLight.isAssignedToEnvironment = isAssignedToEnvironment
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–∞–º–ø–∞: \(light.metadata.name)")
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                let lightData = LightDataModel.fromLight(light, isAssignedToEnvironment: isAssignedToEnvironment)
                modelContext.insert(lightData)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–∞–º–ø–∞: \(light.metadata.name)")
            }
            
            saveContext()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º @Published —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è UI
            loadAssignedLights()
            
            isUpdating = false
            print("üîÑ DataPersistenceService.saveLightData –∑–∞–≤–µ—Ä—à–µ–Ω")
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–∞–º–ø—É –ø–æ ID
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    /// - Returns: LightDataModel –∏–ª–∏ nil
    func fetchLightData(by lightId: String) -> LightDataModel? {
        let descriptor = FetchDescriptor<LightDataModel>(
            predicate: #Predicate { $0.lightId == lightId }
        )
        
        do {
            let lights = try modelContext.fetch(descriptor)
            return lights.first
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–º–ø—ã \(lightId): \(error)")
            return nil
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–∞–º–ø—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤ Environment
    /// - Returns: –ú–∞—Å—Å–∏–≤ Light –º–æ–¥–µ–ª–µ–π
    func fetchAssignedLights() -> [Light] {
        let descriptor = FetchDescriptor<LightDataModel>(
            predicate: #Predicate { $0.isAssignedToEnvironment == true },
            sortBy: [SortDescriptor(\.name)]
        )
        
        do {
            let lightDataModels = try modelContext.fetch(descriptor)
            return lightDataModels.map { $0.toLight() }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø: \(error)")
            return []
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∞–º–ø—ã
    /// - Returns: –ú–∞—Å—Å–∏–≤ Light –º–æ–¥–µ–ª–µ–π
    func fetchAllLights() -> [Light] {
        let descriptor = FetchDescriptor<LightDataModel>(
            sortBy: [SortDescriptor(\.lastUpdated, order: .reverse)]
        )
        
        do {
            let lightDataModels = try modelContext.fetch(descriptor)
            return lightDataModels.map { $0.toLight() }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∞–º–ø: \(error)")
            return []
        }
    }
    
    /// –ù–∞–∑–Ω–∞—á–∏—Ç—å –ª–∞–º–ø—É –≤ Environment (—Å–¥–µ–ª–∞—Ç—å –≤–∏–¥–∏–º–æ–π)
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    func assignLightToEnvironment(_ lightId: String) {
        Task { @MainActor in
            isUpdating = true
            
            if let lightData = fetchLightData(by: lightId) {
                lightData.isAssignedToEnvironment = true
                saveContext()
                
                // –û–±–Ω–æ–≤–ª—è–µ–º @Published —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è UI
                loadAssignedLights()
            }
            
            isUpdating = false
        }
    }
    
    /// –£–±—Ä–∞—Ç—å –ª–∞–º–ø—É –∏–∑ Environment (—Å–∫—Ä—ã—Ç—å)
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    func removeLightFromEnvironment(_ lightId: String) {
        Task { @MainActor in
            isUpdating = true
            
            if let lightData = fetchLightData(by: lightId) {
                lightData.isAssignedToEnvironment = false
                saveContext()
                
                // –û–±–Ω–æ–≤–ª—è–µ–º @Published —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è UI
                loadAssignedLights()
            }
            
            isUpdating = false
        }
    }
    
    /// –£–¥–∞–ª–∏—Ç—å –ª–∞–º–ø—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    func deleteLightData(_ lightId: String) {
        Task { @MainActor in
            if let lightData = fetchLightData(by: lightId) {
                modelContext.delete(lightData)
                saveContext()
            }
        }
    }
    
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∞–º–ø—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ (–Ω–æ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ)
    /// - Parameter apiLights: –õ–∞–º–ø—ã –∏–∑ API
    func syncWithAPILights(_ apiLights: [Light]) {
        Task { @MainActor in
            for light in apiLights {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø—ã - –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–Ω–∞ –≤ —Å–µ—Ç—å
                let isConnected = light.on.on || (light.dimming?.brightness ?? 0) > 0
                
                if let existingLight = fetchLightData(by: light.id) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–∞–º–ø—É
                    existingLight.updateFromLight(light)
                    
                    // –ï—Å–ª–∏ –ª–∞–º–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –æ—Ç —Å–µ—Ç–∏ –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
                    if !isConnected && !existingLight.isAssignedToEnvironment {
                        existingLight.isAssignedToEnvironment = false
                    }
                } else if isConnected {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ª–∞–º–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
                    let lightData = LightDataModel.fromLight(light, isAssignedToEnvironment: false)
                    modelContext.insert(lightData)
                }
            }
            
            saveContext()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º @Published —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è UI
            loadAssignedLights()
        }
    }
    
    // MARK: - Private Methods
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ª–∞–º–ø—ã –≤ @Published —Å–≤–æ–π—Å—Ç–≤–æ
    private func loadAssignedLights() {
        let descriptor = FetchDescriptor<LightDataModel>(
            predicate: #Predicate { $0.isAssignedToEnvironment == true },
            sortBy: [SortDescriptor(\.name)]
        )
        
        do {
            let lightDataModels = try modelContext.fetch(descriptor)
            let newLights = lightDataModels.map { $0.toLight() }
            
            print("üîÑ DataPersistenceService.loadAssignedLights: –Ω–∞–π–¥–µ–Ω–æ \(newLights.count) –ª–∞–º–ø")
            print("üîÑ –õ–∞–º–ø—ã: \(newLights.map { $0.metadata.name })")
            
            assignedLights = newLights
            print("‚úÖ @Published assignedLights –æ–±–Ω–æ–≤–ª–µ–Ω —Å \(assignedLights.count) –ª–∞–º–ø–∞–º–∏")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø: \(error)")
            assignedLights = []
        }
    }
    
    // MARK: - Context Management
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    private func saveContext() {
        do {
            try modelContext.save()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: \(error)")
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å ModelContainer –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ App
    var container: ModelContainer {
        return modelContainer
    }
}

// MARK: - Extensions

extension DataPersistenceService {
    /// –°–æ–∑–¥–∞—Ç—å mock —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–≤—å—é –∏ —Ç–µ—Å—Ç–æ–≤
    static func createMock() -> DataPersistenceService {
        return DataPersistenceService()
    }
}