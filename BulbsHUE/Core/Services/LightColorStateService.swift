//
//  LightColorStateService.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 1.09.2025.
//

import SwiftUI
import Combine

// MARK: - Light Color State Management

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ü–≤–µ—Ç–∞ –ª–∞–º–ø
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø
/// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID - Single Responsibility
@MainActor
final class LightColorStateService: ObservableObject {
    
    // MARK: - Private Properties
    
    /// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ª–∞–º–ø
    /// –ö–ª—é—á - ID –ª–∞–º–ø—ã, –∑–Ω–∞—á–µ–Ω–∏–µ - —Ü–≤–µ—Ç
    @Published private var lightColors: [String: Color] = [:]
    
    /// –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ ColorPicker
    /// –ö–ª—é—á - ID –ª–∞–º–ø—ã, –∑–Ω–∞—á–µ–Ω–∏–µ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (0-1)
    @Published private var colorPickerPositions: [String: CGPoint] = [:]
    
    // MARK: - Singleton
    
    static let shared = LightColorStateService()
    
    private init() {
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è Singleton
    }
    
    // MARK: - Public Methods
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - color: –¶–≤–µ—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    ///   - position: –ü–æ–∑–∏—Ü–∏—è –≤ ColorPicker (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è 0-1)
    func setLightColor(_ lightId: String, color: Color, position: CGPoint? = nil) {
        lightColors[lightId] = color
        
        if let position = position {
            colorPickerPositions[lightId] = position
        }
        
        print("üé® LightColorStateService: –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ü–≤–µ—Ç –¥–ª—è –ª–∞–º–ø—ã \(lightId)")
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –ª–∞–º–ø—ã
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    /// - Returns: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏–ª–∏ nil
    func getLightColor(_ lightId: String) -> Color? {
        return lightColors[lightId]
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ ColorPicker –¥–ª—è –ª–∞–º–ø—ã
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    /// - Returns: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ nil
    func getColorPickerPosition(_ lightId: String) -> CGPoint? {
        return colorPickerPositions[lightId]
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å baseColor –¥–ª—è –ª–∞–º–ø—ã (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ItemControl)
    /// - Parameter light: –õ–∞–º–ø–∞
    /// - Returns: –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ItemControl
    func getBaseColor(for light: Light) -> Color {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ü–≤–µ—Ç
        if let customColor = lightColors[light.id] {
            return customColor
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∏–∑ API –¥–∞–Ω–Ω—ã—Ö –ª–∞–º–ø—ã
        if let colorState = light.color,
           let xyColor = colorState.xy {
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º XY –≤ RGB
            let (r, g, b) = convertXYToRGB(x: Double(xyColor.x), y: Double(xyColor.y))
            return Color(red: r, green: g, blue: b)
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–µ—Ç–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–ø–ª—ã–π —Ü–≤–µ—Ç
        return Color(hue: 0.13, saturation: 0.25, brightness: 1.0)
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–∞–º–ø—ã
    /// - Parameter lightId: ID –ª–∞–º–ø—ã
    func clearLightState(_ lightId: String) {
        lightColors.removeValue(forKey: lightId)
        colorPickerPositions.removeValue(forKey: lightId)
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    func clearAllStates() {
        lightColors.removeAll()
        colorPickerPositions.removeAll()
    }
    
    // MARK: - Helper Methods
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç XY –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ RGB
    /// –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func convertXYToRGB(x: Double, y: Double) -> (red: Double, green: Double, blue: Double) {
        // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ XY –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        
        let z = 1.0 - x - y
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ RGB
        let X = x / y
        let Y = 1.0
        let Z = z / y
        
        // sRGB conversion matrix (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–∞—è)
        let r = X * 3.2406 + Y * (-1.5372) + Z * (-0.4986)
        let g = X * (-0.9689) + Y * 1.8758 + Z * 0.0415
        let b = X * 0.0557 + Y * (-0.2040) + Z * 1.0570
        
        // Gamma correction –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        func gammaCorrect(_ component: Double) -> Double {
            let linear = max(0, min(1, component))
            return linear <= 0.0031308 ? 12.92 * linear : 1.055 * pow(linear, 1.0/2.4) - 0.055
        }
        
        return (
            red: gammaCorrect(r),
            green: gammaCorrect(g),
            blue: gammaCorrect(b)
        )
    }
}

// MARK: - Extensions for Color Analysis

extension Color {
    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Ü–≤–µ—Ç–∞ –≤ —Ü–≤–µ—Ç–æ–≤–æ–º –∫—Ä—É–≥–µ
    /// - Parameter imageSize: –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞
    /// - Returns: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (0-1)
    func getColorPickerPosition(imageSize: CGSize = CGSize(width: 320, height: 320)) -> CGPoint {
        // –ü–æ–ª—É—á–∞–µ–º HSB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞
        #if canImport(UIKit)
        let uiColor = UIColor(self)
        var hue: CGFloat = 0
        var saturation: CGFloat = 0
        var brightness: CGFloat = 0
        var alpha: CGFloat = 0
        
        guard uiColor.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: &alpha) else {
            return CGPoint(x: 0.5, y: 0.5) // –¶–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HSB –≤ –ø–æ–ª—è—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let angle = Double(hue) * 2 * .pi - .pi // –ü—Ä–∏–≤–æ–¥–∏–º –∫ -œÄ...œÄ
        let radius = Double(saturation) * (imageSize.width / 2)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let x = radius * cos(angle)
        let y = radius * sin(angle)
        
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (0-1)
        let relativeX = (x / imageSize.width) + 0.5
        let relativeY = (y / imageSize.height) + 0.5
        
        return CGPoint(
            x: max(0, min(1, relativeX)),
            y: max(0, min(1, relativeY))
        )
        #else
        return CGPoint(x: 0.5, y: 0.5)
        #endif
    }
}
