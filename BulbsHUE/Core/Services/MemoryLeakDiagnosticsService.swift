//
//  MemoryLeakDiagnosticsService.swift
//  BulbsHUE
//
//  Created by Claude Code on 04.09.2025.
//

import Foundation
import Combine
import SwiftUI

// MARK: - Memory Diagnostics Service

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
/// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
@MainActor
final class MemoryLeakDiagnosticsService: ObservableObject {
    
    // MARK: - Singleton
    
    static let shared = MemoryLeakDiagnosticsService()
    
    // MARK: - Published Properties
    
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º
    @Published private(set) var activeObjectsStats: [String: Int] = [:]
    
    /// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± —É—Ç–µ—á–∫–∞—Ö –ø–∞–º—è—Ç–∏
    @Published private(set) var memoryWarnings: [MemoryWarning] = []
    
    /// –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è DEBUG)
    @Published var isDiagnosticsEnabled: Bool = false {
        didSet {
            if isDiagnosticsEnabled {
                startMonitoring()
            } else {
                stopMonitoring()
            }
        }
    }
    
    // MARK: - Private Properties
    
    /// –†–µ–µ—Å—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    private var objectRegistry: [String: WeakObjectContainer] = [:]
    
    /// –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    private var monitoringTimer: Timer?
    
    /// –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    private let warningThresholds: [String: Int] = [
        "ViewModels": 20,
        "Repositories": 5,
        "Services": 15,
        "Subjects": 50,
        "Cancellables": 100
    ]
    
    // MARK: - Initialization
    
    private init() {
        // –í–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ
        #if DEBUG
        isDiagnosticsEnabled = true
        #endif
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    /// - Parameters:
    ///   - object: –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    ///   - category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—ä–µ–∫—Ç–∞ (ViewModel, Repository, Service –∏ —Ç.–¥.)
    ///   - identifier: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞
    func registerObject<T: AnyObject>(_ object: T, category: String, identifier: String? = nil) {
        guard isDiagnosticsEnabled else { return }
        
        let objectId = identifier ?? "\(category)_\(ObjectIdentifier(object).hashValue)"
        let container = WeakObjectContainer(object: object, category: category, createdAt: Date())
        
        objectRegistry[objectId] = container
        updateStats()
        
        print("üìä MemoryDiagnostics: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω \(category) - \(objectId)")
    }
    
    /// –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
    /// - Parameter identifier: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞
    func unregisterObject(_ identifier: String) {
        guard isDiagnosticsEnabled else { return }
        
        if let container = objectRegistry.removeValue(forKey: identifier) {
            print("üìä MemoryDiagnostics: –û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \(container.category) - \(identifier)")
            updateStats()
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    /// - Returns: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    func getDiagnosticsReport() -> DiagnosticsReport {
        cleanupDeadReferences()
        
        let categorizedObjects = Dictionary(grouping: objectRegistry.values) { $0.category }
        let categoryStats = categorizedObjects.mapValues { $0.count }
        
        let totalObjects = objectRegistry.count
        let oldestObject = objectRegistry.values.min { $0.createdAt < $1.createdAt }
        
        return DiagnosticsReport(
            totalActiveObjects: totalObjects,
            categoryBreakdown: categoryStats,
            oldestObjectAge: oldestObject?.createdAt.timeIntervalSinceNow.magnitude ?? 0,
            warnings: memoryWarnings,
            lastUpdated: Date()
        )
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
    func performMemoryLeakCheck() {
        guard isDiagnosticsEnabled else { return }
        
        print("üîç MemoryDiagnostics: –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏...")
        
        cleanupDeadReferences()
        updateStats()
        checkForMemoryLeaks()
        
        print("‚úÖ MemoryDiagnostics: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: \(objectRegistry.count)")
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    func clearWarnings() {
        memoryWarnings.removeAll()
    }
    
    // MARK: - Private Methods
    
    /// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    private func startMonitoring() {
        guard monitoringTimer == nil else { return }
        
        monitoringTimer = Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { [weak self] _ in
            Task { @MainActor in
                self?.performMemoryLeakCheck()
            }
        }
        
        print("üöÄ MemoryDiagnostics: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    private func stopMonitoring() {
        monitoringTimer?.invalidate()
        monitoringTimer = nil
        
        print("‚èπÔ∏è MemoryDiagnostics: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
    
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private func updateStats() {
        let categorizedObjects = Dictionary(grouping: objectRegistry.values) { $0.category }
        activeObjectsStats = categorizedObjects.mapValues { $0.count }
    }
    
    /// –û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö —Å—Å—ã–ª–æ–∫
    private func cleanupDeadReferences() {
        let beforeCount = objectRegistry.count
        
        objectRegistry = objectRegistry.compactMapValues { container in
            container.object != nil ? container : nil
        }
        
        let removedCount = beforeCount - objectRegistry.count
        if removedCount > 0 {
            print("üßπ MemoryDiagnostics: –û—á–∏—â–µ–Ω–æ \(removedCount) –º–µ—Ä—Ç–≤—ã—Ö —Å—Å—ã–ª–æ–∫")
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
    private func checkForMemoryLeaks() {
        let currentStats = activeObjectsStats
        
        for (category, threshold) in warningThresholds {
            if let count = currentStats[category], count > threshold {
                let warning = MemoryWarning(
                    category: category,
                    currentCount: count,
                    threshold: threshold,
                    severity: count > threshold * 2 ? .critical : .warning,
                    timestamp: Date()
                )
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if !memoryWarnings.contains(where: { $0.category == category && $0.severity == warning.severity }) {
                    memoryWarnings.append(warning)
                    print("‚ö†Ô∏è MemoryDiagnostics: \(warning.severity.emoji) \(category): \(count)/\(threshold)")
                }
            }
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        let cutoffDate = Date().addingTimeInterval(-300)
        memoryWarnings.removeAll { $0.timestamp < cutoffDate }
    }
    
    // MARK: - Cleanup
    
    deinit {
        monitoringTimer?.invalidate()
        monitoringTimer = nil
        objectRegistry.removeAll()
    }
}

// MARK: - Supporting Types

/// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–∞–±—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã
private class WeakObjectContainer {
    weak var object: AnyObject?
    let category: String
    let createdAt: Date
    
    init(object: AnyObject, category: String, createdAt: Date) {
        self.object = object
        self.category = category
        self.createdAt = createdAt
    }
}

/// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É—Ç–µ—á–∫–µ –ø–∞–º—è—Ç–∏
struct MemoryWarning: Identifiable, Equatable {
    let id = UUID()
    let category: String
    let currentCount: Int
    let threshold: Int
    let severity: Severity
    let timestamp: Date
    
    enum Severity: String, CaseIterable {
        case warning = "Warning"
        case critical = "Critical"
        
        var emoji: String {
            switch self {
            case .warning: return "‚ö†Ô∏è"
            case .critical: return "üö®"
            }
        }
        
        var color: Color {
            switch self {
            case .warning: return .orange
            case .critical: return .red
            }
        }
    }
    
    var description: String {
        return "\(severity.emoji) \(category): \(currentCount) –æ–±—ä–µ–∫—Ç–æ–≤ (–ª–∏–º–∏—Ç: \(threshold))"
    }
}

/// –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
struct DiagnosticsReport {
    let totalActiveObjects: Int
    let categoryBreakdown: [String: Int]
    let oldestObjectAge: TimeInterval
    let warnings: [MemoryWarning]
    let lastUpdated: Date
    
    var hasWarnings: Bool {
        return !warnings.isEmpty
    }
    
    var hasCriticalWarnings: Bool {
        return warnings.contains { $0.severity == .critical }
    }
}

// MARK: - Extensions

extension MemoryLeakDiagnosticsService {
    /// –°–æ–∑–¥–∞—Ç—å mock —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–≤—å—é
    static func createMock() -> MemoryLeakDiagnosticsService {
        let service = MemoryLeakDiagnosticsService()
        service.isDiagnosticsEnabled = false // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è mock
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        service.activeObjectsStats = [
            "ViewModels": 5,
            "Repositories": 3,
            "Services": 8,
            "Subjects": 25
        ]
        
        service.memoryWarnings = [
            MemoryWarning(
                category: "Subjects",
                currentCount: 55,
                threshold: 50,
                severity: .warning,
                timestamp: Date()
            )
        ]
        
        return service
    }
}

// MARK: - Global Registration Helpers

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
extension MemoryLeakDiagnosticsService {
    
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å ViewModel
    static func registerViewModel<T: ObservableObject>(_ viewModel: T, name: String? = nil) {
        let identifier = name ?? String(describing: type(of: viewModel))
        shared.registerObject(viewModel, category: "ViewModels", identifier: identifier)
    }
    
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Repository
    static func registerRepository<T: AnyObject>(_ repository: T, name: String? = nil) {
        let identifier = name ?? String(describing: type(of: repository))
        shared.registerObject(repository, category: "Repositories", identifier: identifier)
    }
    
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Service
    static func registerService<T: AnyObject>(_ service: T, name: String? = nil) {
        let identifier = name ?? String(describing: type(of: service))
        shared.registerObject(service, category: "Services", identifier: identifier)
    }
    
    /// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Subject
    static func registerSubject<T: AnyObject>(_ subject: T, name: String? = nil) {
        let identifier = name ?? String(describing: type(of: subject))
        shared.registerObject(subject, category: "Subjects", identifier: identifier)
    }
}