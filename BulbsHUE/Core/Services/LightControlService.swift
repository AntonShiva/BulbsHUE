//
//  LightControlService.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/9/25.
//

import Foundation
import Combine

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Dependency Inversion
/// –°–ª—É–∂–∏—Ç –∞–¥–∞–ø—Ç–µ—Ä–æ–º –º–µ–∂–¥—É AppViewModel –∏ ItemControlViewModel
class LightControlService: ObservableObject, LightControlling {
    // MARK: - Private Properties
    
    /// –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π AppViewModel
    private weak var appViewModel: AppViewModel?
    
    // MARK: - Initialization
    
    init(appViewModel: AppViewModel) {
        self.appViewModel = appViewModel
    }
    
    // MARK: - LightsManaging Implementation
    
    var lights: [Light] {
        return appViewModel?.lightsViewModel.lights ?? []
    }
    
    var lightsPublisher: AnyPublisher<[Light], Never> {
        guard let appViewModel = appViewModel else {
            return Just([]).eraseToAnyPublisher()
        }
        return appViewModel.lightsViewModel.$lights.eraseToAnyPublisher()
    }
    
    func setPower(for light: Light, on: Bool) {
        appViewModel?.lightsViewModel.setPower(for: light, on: on)
    }
    
    func setBrightness(for light: Light, brightness: Double) {
        appViewModel?.lightsViewModel.setBrightness(for: light, brightness: brightness)
    }
    
    func commitBrightness(for light: Light, brightness: Double) {
        appViewModel?.lightsViewModel.commitBrightness(for: light, brightness: brightness)
    }
    
    // MARK: - GroupsProviding Implementation
    
    var groups: [HueGroup] {
        return appViewModel?.groupsViewModel.groups ?? []
    }
    
    var groupsPublisher: AnyPublisher<[HueGroup], Never> {
        guard let appViewModel = appViewModel else {
            return Just([]).eraseToAnyPublisher()
        }
        return appViewModel.groupsViewModel.$groups.eraseToAnyPublisher()
    }
    
    func findGroup(by id: String) -> HueGroup? {
        return groups.first { $0.id == id }
    }
    
    // MARK: - LightDisplaying Implementation
    
    func getRoomName(for light: Light) -> String {
        print("üè† getRoomName –¥–ª—è –ª–∞–º–ø—ã '\(light.metadata.name)' (ID: \(light.id))")
        print("   ‚îî‚îÄ‚îÄ apiArchetype: '\(light.metadata.archetype ?? "nil")'")
        
        // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: archetype —Ç–µ–ø–µ—Ä—å –¢–û–õ–¨–ö–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ç–∏–ø –ª–∞–º–ø—ã
        // –î–ª—è –∫–æ–º–Ω–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ roomId –≤ Light/LightDataModel
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
        
        print("   ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É (archetype —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–∏–ø–æ–≤ –ª–∞–º–ø)")
        return "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"
    }
    
    func getBulbType(for light: Light) -> String {
        print("üìù getBulbType –¥–ª—è –ª–∞–º–ø—ã '\(light.metadata.name)' (ID: \(light.id))")
        print("   ‚îî‚îÄ‚îÄ userSubtypeName: '\(light.metadata.userSubtypeName ?? "nil")' | apiArchetype: '\(light.metadata.archetype ?? "nil")'")
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ç–∏–ø –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        if let userSubtype = light.metadata.userSubtypeName, !userSubtype.isEmpty {
            print("   ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ç–∏–ø: '\(userSubtype)'")
            return userSubtype
        }
        
        // üîÅ Fallback: –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ–¥—Ç–∏–ø –∏–∑ –ë–î (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–º–µ—à–∞–Ω –≤ —Ç–µ–∫—É—â–∏–π light)
        if let saved = appViewModel?.dataService?.fetchAssignedLights().first(where: { $0.id == light.id }),
           let savedSubtype = saved.metadata.userSubtypeName, !savedSubtype.isEmpty {
            print("   ‚îî‚îÄ‚îÄ Fallback: –ø–æ–¥—Ç–∏–ø –∏–∑ –ë–î: '\(savedSubtype)'")
            return savedSubtype
        }
        
        // –ï—Å–ª–∏ –∞—Ä—Ö–µ—Ç–∏–ø –ø—É—Å—Ç–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print("   ‚îî‚îÄ‚îÄ –ê—Ä—Ö–µ—Ç–∏–ø –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'Smart Light'")
        return "Smart Light"
    }

  
    
    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø—É
    private func getCategoryName(for archetype: String) -> String {
        let archetypeLower = archetype.lowercased()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        if archetypeLower.contains("traditional") || 
           archetypeLower.contains("desk") ||
           archetypeLower.contains("table") ||
           archetypeLower.contains("wash") {
            return "TABLE"
        }
        else if archetypeLower.contains("christmas") ||
                archetypeLower.contains("floor") ||
                archetypeLower.contains("shade") ||
                archetypeLower.contains("lantern") ||
                archetypeLower.contains("bollard") ||
                archetypeLower.contains("ground") ||
                archetypeLower.contains("recessed floor") ||
                archetypeLower.contains("light bar") {
            return "FLOOR"
        }
        else if archetypeLower.contains("wall") ||
                archetypeLower.contains("dual") {
            return "WALL"
        }
        else if archetypeLower.contains("pendant") ||
                archetypeLower.contains("ceiling") ||
                archetypeLower.contains("spot") ||
                archetypeLower.contains("recessed ceiling") ||
                archetypeLower.contains("tube") ||
                archetypeLower.contains("horizontal") {
            return "CEILING"
        }
        else {
            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (signature, rounded, flood, candelabra, filament, mini, lightstrip, etc.)
            return "OTHER"
        }
    }
    
    func getBulbIcon(for light: Light) -> String {
        print("üñºÔ∏è getBulbIcon –¥–ª—è –ª–∞–º–ø—ã '\(light.metadata.name)' (ID: \(light.id))")
        print("   ‚îî‚îÄ‚îÄ userSubtypeIcon: '\(light.metadata.userSubtypeIcon ?? "nil")'")
        print("   ‚îî‚îÄ‚îÄ userSubtypeName: '\(light.metadata.userSubtypeName ?? "nil")' | apiArchetype: '\(light.metadata.archetype ?? "nil")'")
        
        // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∫–æ–Ω–∫–∏ –ø–æ–¥—Ç–∏–ø–∞
        if let userIcon = light.metadata.userSubtypeIcon, !userIcon.isEmpty {
            print("   ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏–∫–æ–Ω–∫—É: '\(userIcon)'")
            return userIcon
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ–¥—Ç–∏–ø - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–¥—Ç–∏–ø–∞
        if let userSubtype = light.metadata.userSubtypeName, !userSubtype.isEmpty {
            let icon = getSubtypeIcon(for: userSubtype)
            print("   ‚îî‚îÄ‚îÄ –ü–æ–ª—É—á–∏–ª–∏ –∏–∫–æ–Ω–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–¥—Ç–∏–ø–∞ '\(userSubtype)': '\(icon)'")
            return icon
        }
        
        // üîÅ Fallback: –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î
        if let saved = appViewModel?.dataService?.fetchAssignedLights().first(where: { $0.id == light.id }) {
            if let savedIcon = saved.metadata.userSubtypeIcon, !savedIcon.isEmpty {
                print("   ‚îî‚îÄ‚îÄ Fallback: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–∫–æ–Ω–∫–∞ –∏–∑ –ë–î: '\(savedIcon)'")
                return savedIcon
            }
            if let savedSubtype = saved.metadata.userSubtypeName, !savedSubtype.isEmpty {
                let icon = getSubtypeIcon(for: savedSubtype)
                print("   ‚îî‚îÄ‚îÄ Fallback: –∏–∫–æ–Ω–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–¥—Ç–∏–ø–∞ –∏–∑ –ë–î '\(savedSubtype)': '\(icon)'")
                return icon
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
        let defaultIcon = "o2" // Rounded bulb
        print("   ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É: '\(defaultIcon)'")
        return defaultIcon
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ–¥—Ç–∏–ø–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    private func getSubtypeIcon(for subtypeName: String) -> String {
        let subtypeNameLower = subtypeName.lowercased()
        print("   üîç getSubtypeIcon –¥–ª—è –ø–æ–¥—Ç–∏–ø–∞: '\(subtypeName)' ‚Üí lowercase: '\(subtypeNameLower)'")
        
        // –ú–∞–ø–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ç–∏–ø–æ–≤ –Ω–∞ –∏—Ö –∏–∫–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ BulbTypeModels.swift
        switch subtypeNameLower {
        // TABLE category (t1-t3)
        case "traditional lamp":
            return "t1"
        case "desk lamp":
            return "t2"
        case "table wash":
            return "t3"
            
        // FLOOR category (f1-f7)
        case "christmas tree":
            return "f1"
        case "floor shade":
            return "f2"
        case "floor lantern":
            return "f3"
        case "bollard":
            return "f4"
        case "ground spot":
            return "f5"
        case "recessed floor":
            return "f6"
        case "light bar":
            return "f7"
            
        // WALL category (w1-w4)
        case "wall lantern":
            return "w1"
        case "wall shade":
            return "w2"
        case "wall spot":
            return "w3"
        case "dual wall light":
            return "w4"
            
        // CEILING category (c1-c10)
        case "pendant round":
            return "c1"
        case "pendant horizontal":
            return "c2"
        case "ceiling round":
            return "c3"
        case "ceiling square":
            return "c4"
        case "single spot":
            return "c5"
        case "double spot":
            return "c6"
        case "recessed ceiling":
            return "c7"
        case "pedant spot":
            return "c8"
        case "ceiling horizontal":
            return "c9"
        case "ceiling tube":
            return "c10"
            
        // OTHER category (o1-o27)
        case "signature bulb":
            return "o1"
        case "rounded bulb":
            return "o2"
        case "spot":
            return "o3"
        case "flood light":
            return "o4"
        case "candelabra bulb":
            return "o5"
        case "filament bulb":
            return "o6"
        case "mini-bulb":
            return "o7"
        case "hue lightstrip":
            return "o8"
        case "lightguide basic":
            return "o7"
        case "lightguide slim":
            return "o8"
        case "lightguide wide":
            return "o9"
        case "lightguide curved":
            return "o10"
        case "lightguide flex":
            return "o11"
        case "twilight":
            return "o12"
        case "twilight pro":
            return "o13"
        case "twilight mini":
            return "o14"
        case "play light bar":
            return "o16"
        case "play light bar dual":
            return "o17"
        case "hue bloom":
            return "o20"
        case "hue bloom mini":
            return "o21"
        case "candle socket":
            return "o15"
        case "christmas tree":
            return "o18"
        case "hue iris":
            return "o19"
        case "unknown":
            return "o22"
        case "stripp":
            return "o23"
        case "bollard":
            return "o24"
        case "wall washer":
            return "o25"
        case "classic fixture":
            return "o26"
        case "hue centris":
            return "o27"
            
        // ‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ –º–∞–ø–∏–º API-–∞—Ä—Ö–µ—Ç–∏–ø—ã –Ω–∞ –∏–∫–æ–Ω–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.
        // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å—é–¥–∞ API-–∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ default.
            
        default:
            // –ï—Å–ª–∏ –ø–æ–¥—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            let categoryIcon = getCategoryIcon(for: subtypeName)
            print("   ‚ö†Ô∏è –ü–æ–¥—Ç–∏–ø '\(subtypeName)' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '\(categoryIcon)'")
            return categoryIcon
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø—É
    private func getCategoryIcon(for archetype: String) -> String {
        let archetypeLower = archetype.lowercased()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        if archetypeLower.contains("traditional") || 
           archetypeLower.contains("desk") ||
           archetypeLower.contains("table") ||
           archetypeLower.contains("wash") {
            return "table"
        }
        else if archetypeLower.contains("christmas") ||
                archetypeLower.contains("floor") ||
                archetypeLower.contains("shade") ||
                archetypeLower.contains("lantern") ||
                archetypeLower.contains("bollard") ||
                archetypeLower.contains("ground") ||
                archetypeLower.contains("recessed floor") ||
                archetypeLower.contains("light bar") {
            return "floor"
        }
        else if archetypeLower.contains("wall") ||
                archetypeLower.contains("dual") {
            return "wall"
        }
        else if archetypeLower.contains("pendant") ||
                archetypeLower.contains("ceiling") ||
                archetypeLower.contains("spot") ||
                archetypeLower.contains("recessed ceiling") ||
                archetypeLower.contains("tube") ||
                archetypeLower.contains("horizontal") {
            return "ceiling"
        }
        else {
            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (signature, rounded, flood, candelabra, filament, mini, lightstrip, etc.)
            return "other"
        }
    }
    
    func getRoomIcon(for light: Light) -> String {
        let roomName = getRoomName(for: light).lowercased()
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–Ω–∞—Ç –Ω–∞ –∏–∫–æ–Ω–∫–∏ –∫–æ–º–Ω–∞—Ç
        switch roomName {
        case _ where roomName.contains("living"):
            return "tr1" // Traditional living room icon
        case _ where roomName.contains("bedroom"):
            return "tr2" // Traditional bedroom icon
        case _ where roomName.contains("kitchen"):
            return "pr1" // Practical kitchen icon
        case _ where roomName.contains("bathroom"):
            return "pr2" // Practical bathroom icon
        case _ where roomName.contains("office"):
            return "pr3" // Practical office icon
        case _ where roomName.contains("outdoor"):
            return "Ou1" // Outdoor icon
        default:
            return "tr1" // Default room icon
        }
    }
}

// MARK: - Extensions

extension LightControlService {
    /// –°–æ–∑–¥–∞—Ç—å mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    static func createMockService() -> LightControlService {
        let mockAppViewModel = AppViewModel(dataPersistenceService: nil)
        return LightControlService(appViewModel: mockAppViewModel)
    }
}
