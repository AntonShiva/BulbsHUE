//
//  LightControlService.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/9/25.
//

import Foundation
import Combine

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Dependency Inversion
/// –°–ª—É–∂–∏—Ç –∞–¥–∞–ø—Ç–µ—Ä–æ–º –º–µ–∂–¥—É AppViewModel –∏ ItemControlViewModel
class LightControlService: ObservableObject, LightControlling {
    // MARK: - Private Properties
    
    /// –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π AppViewModel
    private weak var appViewModel: AppViewModel?
    
    // MARK: - Initialization
    
    init(appViewModel: AppViewModel) {
        self.appViewModel = appViewModel
    }
    
    // MARK: - LightsManaging Implementation
    
    var lights: [Light] {
        return appViewModel?.lightsViewModel.lights ?? []
    }
    
    var lightsPublisher: AnyPublisher<[Light], Never> {
        guard let appViewModel = appViewModel else {
            return Just([]).eraseToAnyPublisher()
        }
        return appViewModel.lightsViewModel.$lights.eraseToAnyPublisher()
    }
    
    func setPower(for light: Light, on: Bool) {
        appViewModel?.lightsViewModel.setPower(for: light, on: on)
    }
    
    func setBrightness(for light: Light, brightness: Double) {
        appViewModel?.lightsViewModel.setBrightness(for: light, brightness: brightness)
    }
    
    func commitBrightness(for light: Light, brightness: Double) {
        appViewModel?.lightsViewModel.commitBrightness(for: light, brightness: brightness)
    }
    
    // MARK: - GroupsProviding Implementation
    
    var groups: [HueGroup] {
        return appViewModel?.groupsViewModel.groups ?? []
    }
    
    var groupsPublisher: AnyPublisher<[HueGroup], Never> {
        guard let appViewModel = appViewModel else {
            return Just([]).eraseToAnyPublisher()
        }
        return appViewModel.groupsViewModel.$groups.eraseToAnyPublisher()
    }
    
    func findGroup(by id: String) -> HueGroup? {
        return groups.first { $0.id == id }
    }
    
    // MARK: - LightDisplaying Implementation
    
    func getRoomName(for light: Light) -> String {
        print("üè† getRoomName –¥–ª—è –ª–∞–º–ø—ã '\(light.metadata.name)' (ID: \(light.id))")
        print("   ‚îî‚îÄ‚îÄ archetype: '\(light.metadata.archetype ?? "nil")'")
        
        // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: archetype —Å–µ–π—á–∞—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–∏–ø –ª–∞–º–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "DESK LAMP"), 
        // –∞ –Ω–µ ID –∫–æ–º–Ω–∞—Ç—ã! –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        // TODO: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è roomId
        
        // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º archetype –∫–∞–∫ roomId –¥–ª—è –ª–∞–º–ø —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–¥—Ç–∏–ø–æ–º
        if let archetype = light.metadata.archetype, !archetype.isEmpty {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ archetype –ø–æ–¥—Ç–∏–ø–æ–º –ª–∞–º–ø—ã (–∞ –Ω–µ ID –∫–æ–º–Ω–∞—Ç—ã)
            // –í—Å–µ –ø–æ–¥—Ç–∏–ø—ã –∏–∑ BulbTypeModels.swift —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            let allKnownSubtypes = [
                // –ù–ê–®–ò –ü–û–î–¢–ò–ü–´ (–∏–∑ BulbTypeModels)
                "TRADITIONAL LAMP", "DESK LAMP", "TABLE WASH",
                "CHRISTMAS TREE", "FLOOR SHADE", "FLOOR LANTERN", "BOLLARD", "GROUND SPOT", "RECESSED FLOOR", "LIGHT BAR",
                "WALL LANTERN", "WALL SHADE", "WALL SPOT", "DUAL WALL LIGHT",
                "PENDANT ROUND", "PENDANT HORIZONTAL", "CEILING ROUND", "CEILING SQUARE", "SINGLE SPOT", "DOUBLE SPOT", "RECESSED CEILING", "PEDANT SPOT", "CEILING HORIZONTAL", "CEILING TUBE",
                "SIGNATURE BULB", "ROUNDED BULB", "SPOT", "FLOOD LIGHT", "CANDELABRA BULB", "FILAMENT BULB", "MINI-BULB", "HUE LIGHTSTRIP", "LIGHTGUIDE", "PLAY LIGHT BAR", "HUE BLOOM", "HUE IRIS", "SMART PLUG", "HUE CENTRIS", "HUE TUBE", "HUE SIGNE", "FLOODLIGHT CAMERA", "TWILIGHT",
                // –ê–†–•–ï–¢–ò–ü–´ PHILIPS HUE API (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–Ω–∞—Ç–∞–º–∏)
                "SULTAN_BULB", "CLASSIC_BULB", "VINTAGE_BULB", "EDISON_BULB", "GLOBE_BULB", "CANDLE_BULB"
            ]
            
            if allKnownSubtypes.contains(archetype.uppercased()) {
                print("   ‚îî‚îÄ‚îÄ archetype —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–∏–ø –ª–∞–º–ø—ã, –Ω–µ –∫–æ–º–Ω–∞—Ç—É. –í–æ–∑–≤—Ä–∞—â–∞–µ–º '–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞'")
                return "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"
            }
            
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–∏–ø, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É
            let roomName = findGroup(by: archetype)?.metadata?.name ?? "–ë–µ–∑ –∫–æ–º–Ω–∞—Ç—ã"
            print("   ‚îî‚îÄ‚îÄ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ –ø–æ archetype: '\(roomName)'")
            return roomName
        }
        
        print("   ‚îî‚îÄ‚îÄ archetype –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '–ë–µ–∑ –∫–æ–º–Ω–∞—Ç—ã'")
        return "–ë–µ–∑ –∫–æ–º–Ω–∞—Ç—ã"
    }
    
    func getBulbType(for light: Light) -> String {
        print("üìù getBulbType –¥–ª—è –ª–∞–º–ø—ã '\(light.metadata.name)' (ID: \(light.id))")
        print("   ‚îî‚îÄ‚îÄ archetype: '\(light.metadata.archetype ?? "nil")'")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–µ—Ç–∏–ø (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞)
        if let archetype = light.metadata.archetype, !archetype.isEmpty {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞ –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ archetype)
            print("   ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–æ–¥—Ç–∏–ø: '\(archetype)'")
            return archetype
        }
        
        // –ï—Å–ª–∏ –∞—Ä—Ö–µ—Ç–∏–ø –ø—É—Å—Ç–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print("   ‚îî‚îÄ‚îÄ –ê—Ä—Ö–µ—Ç–∏–ø –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'Smart Light'")
        return "Smart Light"
    }

  
    
    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø—É
    private func getCategoryName(for archetype: String) -> String {
        let archetypeLower = archetype.lowercased()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        if archetypeLower.contains("traditional") || 
           archetypeLower.contains("desk") ||
           archetypeLower.contains("table") ||
           archetypeLower.contains("wash") {
            return "TABLE"
        }
        else if archetypeLower.contains("christmas") ||
                archetypeLower.contains("floor") ||
                archetypeLower.contains("shade") ||
                archetypeLower.contains("lantern") ||
                archetypeLower.contains("bollard") ||
                archetypeLower.contains("ground") ||
                archetypeLower.contains("recessed floor") ||
                archetypeLower.contains("light bar") {
            return "FLOOR"
        }
        else if archetypeLower.contains("wall") ||
                archetypeLower.contains("dual") {
            return "WALL"
        }
        else if archetypeLower.contains("pendant") ||
                archetypeLower.contains("ceiling") ||
                archetypeLower.contains("spot") ||
                archetypeLower.contains("recessed ceiling") ||
                archetypeLower.contains("tube") ||
                archetypeLower.contains("horizontal") {
            return "CEILING"
        }
        else {
            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (signature, rounded, flood, candelabra, filament, mini, lightstrip, etc.)
            return "OTHER"
        }
    }
    
    func getBulbIcon(for light: Light) -> String {
        print("üñºÔ∏è getBulbIcon –¥–ª—è –ª–∞–º–ø—ã '\(light.metadata.name)' (ID: \(light.id))")
        print("   ‚îî‚îÄ‚îÄ archetype: '\(light.metadata.archetype ?? "nil")'")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–µ—Ç–∏–ø (–≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
        if let archetype = light.metadata.archetype, !archetype.isEmpty {
            // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ–¥—Ç–∏–ø–∞ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–¥—Ç–∏–ø–∞)
            let icon = getSubtypeIcon(for: archetype)
            print("   ‚îî‚îÄ‚îÄ –ü–æ–ª—É—á–∏–ª–∏ –∏–∫–æ–Ω–∫—É –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø—É '\(archetype)': '\(icon)'")
            return icon
        }
        
        // –ï—Å–ª–∏ –∞—Ä—Ö–µ—Ç–∏–ø –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º (legacy)
        let roomName = getRoomName(for: light).lowercased()
        print("   ‚îî‚îÄ‚îÄ –ê—Ä—Ö–µ—Ç–∏–ø –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–Ω–∞—Ç—É: '\(roomName)'")
        
        let defaultIcon: String
        switch roomName {
        case _ where roomName.contains("living"):
            defaultIcon = "f2" // Floor lamp icon for living room
        case _ where roomName.contains("bedroom"):
            defaultIcon = "t2" // Table lamp icon for bedroom
        case _ where roomName.contains("kitchen"):
            defaultIcon = "—Å3" // Ceiling round icon for kitchen
        case _ where roomName.contains("bathroom"):
            defaultIcon = "—Å3" // Ceiling round icon for bathroom
        case _ where roomName.contains("office"):
            defaultIcon = "t2" // Desk lamp icon for office
        default:
            defaultIcon = "o2" // Default bulb icon (rounded bulb)
        }
        
        print("   ‚îî‚îÄ‚îÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '\(defaultIcon)'")
        return defaultIcon
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ–¥—Ç–∏–ø–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    private func getSubtypeIcon(for subtypeName: String) -> String {
        let subtypeNameLower = subtypeName.lowercased()
        print("   üîç getSubtypeIcon –¥–ª—è –ø–æ–¥—Ç–∏–ø–∞: '\(subtypeName)' ‚Üí lowercase: '\(subtypeNameLower)'")
        
        // –ú–∞–ø–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ç–∏–ø–æ–≤ –Ω–∞ –∏—Ö –∏–∫–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ BulbTypeModels.swift
        switch subtypeNameLower {
        // TABLE category (t1-t3)
        case "traditional lamp":
            return "t1"
        case "desk lamp":
            return "t2"
        case "table wash":
            return "t3"
            
        // FLOOR category (f1-f7)
        case "christmas tree":
            return "f1"
        case "floor shade":
            return "f2"
        case "floor lantern":
            return "f3"
        case "bollard":
            return "f4"
        case "ground spot":
            return "f5"
        case "recessed floor":
            return "f6"
        case "light bar":
            return "f7"
            
        // WALL category (w1-w4)
        case "wall lantern":
            return "w1"
        case "wall shade":
            return "w2"
        case "wall spot":
            return "w3"
        case "dual wall light":
            return "w4"
            
        // CEILING category (—Å1-—Å10)
        case "pendant round":
            return "—Å1"
        case "pendant horizontal":
            return "—Å2"
        case "ceiling round":
            return "—Å3"
        case "ceiling square":
            return "—Å4"
        case "single spot":
            return "—Å5"
        case "double spot":
            return "—Å6"
        case "recessed ceiling":
            return "—Å7"
        case "pedant spot":
            return "—Å8"
        case "ceiling horizontal":
            return "—Å9"
        case "ceiling tube":
            return "—Å10"
            
        // OTHER category (o1-o27)
        case "signature bulb":
            return "o1"
        case "rounded bulb":
            return "o2"
        case "spot":
            return "o3"
        case "flood light":
            return "o4"
        case "candelabra bulb":
            return "o5"
        case "filament bulb":
            return "o6"
        case "mini-bulb":
            return "o7"
        case "hue lightstrip":
            return "o8"
        case "lightguide":
            return "o9"
        case "play light bar":
            return "o15"
        case "hue bloom":
            return "o16"
        case "hue iris":
            return "o19"
        case "smart plug":
            return "o20"
        case "hue centris":
            return "o21"
        case "hue tube":
            return "o22"
        case "hue signe":
            return "o23"
        case "floodlight camera":
            return "o24"
        case "twilight":
            return "o25"
            
        // –ê–†–•–ï–¢–ò–ü–´ PHILIPS HUE API
        case "sultan_bulb":
            return "o1" // Signature bulb –∏–∫–æ–Ω–∫–∞
        case "classic_bulb":
            return "o2" // Rounded bulb –∏–∫–æ–Ω–∫–∞
        case "vintage_bulb", "edison_bulb":
            return "o6" // Filament bulb –∏–∫–æ–Ω–∫–∞
        case "globe_bulb":
            return "o2" // Rounded bulb –∏–∫–æ–Ω–∫–∞
        case "candle_bulb":
            return "o5" // Candelabra bulb –∏–∫–æ–Ω–∫–∞
            
        default:
            // –ï—Å–ª–∏ –ø–æ–¥—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            let categoryIcon = getCategoryIcon(for: subtypeName)
            print("   ‚ö†Ô∏è –ü–æ–¥—Ç–∏–ø '\(subtypeName)' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: '\(categoryIcon)'")
            return categoryIcon
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø—É
    private func getCategoryIcon(for archetype: String) -> String {
        let archetypeLower = archetype.lowercased()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        if archetypeLower.contains("traditional") || 
           archetypeLower.contains("desk") ||
           archetypeLower.contains("table") ||
           archetypeLower.contains("wash") {
            return "table"
        }
        else if archetypeLower.contains("christmas") ||
                archetypeLower.contains("floor") ||
                archetypeLower.contains("shade") ||
                archetypeLower.contains("lantern") ||
                archetypeLower.contains("bollard") ||
                archetypeLower.contains("ground") ||
                archetypeLower.contains("recessed floor") ||
                archetypeLower.contains("light bar") {
            return "floor"
        }
        else if archetypeLower.contains("wall") ||
                archetypeLower.contains("dual") {
            return "wall"
        }
        else if archetypeLower.contains("pendant") ||
                archetypeLower.contains("ceiling") ||
                archetypeLower.contains("spot") ||
                archetypeLower.contains("recessed ceiling") ||
                archetypeLower.contains("tube") ||
                archetypeLower.contains("horizontal") {
            return "ceiling"
        }
        else {
            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (signature, rounded, flood, candelabra, filament, mini, lightstrip, etc.)
            return "other"
        }
    }
    
    func getRoomIcon(for light: Light) -> String {
        let roomName = getRoomName(for: light).lowercased()
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–Ω–∞—Ç –Ω–∞ –∏–∫–æ–Ω–∫–∏ –∫–æ–º–Ω–∞—Ç
        switch roomName {
        case _ where roomName.contains("living"):
            return "tr1" // Traditional living room icon
        case _ where roomName.contains("bedroom"):
            return "tr2" // Traditional bedroom icon
        case _ where roomName.contains("kitchen"):
            return "pr1" // Practical kitchen icon
        case _ where roomName.contains("bathroom"):
            return "pr2" // Practical bathroom icon
        case _ where roomName.contains("office"):
            return "pr3" // Practical office icon
        case _ where roomName.contains("outdoor"):
            return "Ou1" // Outdoor icon
        default:
            return "tr1" // Default room icon
        }
    }
}

// MARK: - Extensions

extension LightControlService {
    /// –°–æ–∑–¥–∞—Ç—å mock —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    static func createMockService() -> LightControlService {
        let mockAppViewModel = AppViewModel(dataPersistenceService: nil)
        return LightControlService(appViewModel: mockAppViewModel)
    }
}
