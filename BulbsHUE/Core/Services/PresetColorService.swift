//
//  PresetColorService.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 2.09.2025.
//

import SwiftUI
import Combine

// MARK: - Preset Color Service Protocol

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∫ –ª–∞–º–ø–∞–º
protocol PresetColorServiceProtocol {
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞ –∫ –ª–∞–º–ø–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// - Parameters:
    ///   - scene: –°—Ü–µ–Ω–∞ —Å –ø—Ä–µ—Å–µ—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    ///   - lightIds: ID –ª–∞–º–ø –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    ///   - strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    func applyPresetColors(
        from scene: EnvironmentSceneEntity,
        to lightIds: [String],
        strategy: ColorDistributionStrategy
    ) async throws
    
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø–µ
    /// - Parameters:
    ///   - scene: –°—Ü–µ–Ω–∞ —Å –ø—Ä–µ—Å–µ—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    ///   - lightId: ID –ª–∞–º–ø—ã
    ///   - colorIndex: –ò–Ω–¥–µ–∫—Å —Ü–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ (0-4)
    func applyPresetColor(
        from scene: EnvironmentSceneEntity,
        to lightId: String,
        colorIndex: Int
    ) async throws
}

// MARK: - Preset Color Service Implementation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∫ –ª–∞–º–ø–∞–º
/// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID - Single Responsibility –∏ Dependency Inversion
@MainActor
final class PresetColorService: PresetColorServiceProtocol {
    
    // MARK: - Dependencies
    
    private let lightingColorService: LightingManaging
    private let lightColorStateService: LightColorStateService
    private weak var appViewModel: AppViewModel?
    
    // MARK: - Initialization
    
    init(
        lightingColorService: LightingManaging,
        lightColorStateService: LightColorStateService = .shared,
        appViewModel: AppViewModel?
    ) {
        self.lightingColorService = lightingColorService
        self.lightColorStateService = lightColorStateService
        self.appViewModel = appViewModel
    }
    
    // MARK: - Public Methods
    
    func applyPresetColors(
        from scene: EnvironmentSceneEntity,
        to lightIds: [String],
        strategy: ColorDistributionStrategy = .adaptive
    ) async throws {
        guard !scene.presetColors.isEmpty else {
            print("‚ö†Ô∏è PresetColorService: –°—Ü–µ–Ω–∞ '\(scene.name)' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–≤–µ—Ç–æ–≤")
            return
        }
        
        guard !lightIds.isEmpty else {
            print("‚ö†Ô∏è PresetColorService: –ù–µ —É–∫–∞–∑–∞–Ω—ã –ª–∞–º–ø—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤")
            return
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –ø–æ –ª–∞–º–ø–∞–º
        let distributedColors = strategy.distributeColors(scene.presetColors, forLightCount: lightIds.count)
        
        print("üé® PresetColorService: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞ '\(scene.name)' –∫ \(lightIds.count) –ª–∞–º–ø–∞–º")
        print("üé® –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: \(strategy)")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∫ –∫–∞–∂–¥–æ–π –ª–∞–º–ø–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try await withThrowingTaskGroup(of: Void.self) { group in
            for (index, lightId) in lightIds.enumerated() {
                guard index < distributedColors.count else { continue }
                
                let color = distributedColors[index]
                
                group.addTask { [weak self] in
                    try await self?.applyColorToLight(lightId: lightId, color: color)
                }
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            for try await _ in group { }
        }
        
        print("‚úÖ PresetColorService: –¶–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ \(lightIds.count) –ª–∞–º–ø–∞–º")
    }
    
    func applyPresetColor(
        from scene: EnvironmentSceneEntity,
        to lightId: String,
        colorIndex: Int
    ) async throws {
        guard colorIndex >= 0 && colorIndex < scene.presetColors.count else {
            throw PresetColorServiceError.invalidColorIndex(colorIndex)
        }
        
        let presetColor = scene.presetColors[colorIndex]
        let color = presetColor.color
        
        print("üé® PresetColorService: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç \(presetColor.hexColor) –∫ –ª–∞–º–ø–µ \(lightId)")
        
        try await applyColorToLight(lightId: lightId, color: color)
        
        print("‚úÖ PresetColorService: –¶–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –ª–∞–º–ø–µ \(lightId)")
    }
    
    // MARK: - Private Methods
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø–µ
    private func applyColorToLight(lightId: String, color: Color) async throws {
        guard let appViewModel = appViewModel else {
            throw PresetColorServiceError.appViewModelNotAvailable
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ª–∞–º–ø—É
        guard let light = appViewModel.lightsViewModel.lights.first(where: { $0.id == lightId }) else {
            throw PresetColorServiceError.lightNotFound(lightId)
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ LightingColorService –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        try await lightingColorService.setColorImmediate(for: light, color: color)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ LightColorStateService
        lightColorStateService.setLightColor(lightId, color: color)
    }
}

// MARK: - Preset Color Service Errors

/// –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ü–≤–µ—Ç–æ–≤ –ø—Ä–µ—Å–µ—Ç–æ–≤
enum PresetColorServiceError: Error, LocalizedError {
    case invalidColorIndex(Int)
    case lightNotFound(String)
    case appViewModelNotAvailable
    case noColorsInPreset
    
    var errorDescription: String? {
        switch self {
        case .invalidColorIndex(let index):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ü–≤–µ—Ç–∞: \(index)"
        case .lightNotFound(let lightId):
            return "–õ–∞–º–ø–∞ —Å ID \(lightId) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        case .appViewModelNotAvailable:
            return "AppViewModel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        case .noColorsInPreset:
            return "–ü—Ä–µ—Å–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–≤–µ—Ç–æ–≤"
        }
    }
}

// MARK: - Extensions

extension EnvironmentSceneEntity {
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ü–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞
    var hasPresetColors: Bool {
        return !presetColors.isEmpty
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π (–ø–µ—Ä–≤—ã–π) —Ü–≤–µ—Ç –ø—Ä–µ—Å–µ—Ç–∞
    var primaryColor: Color? {
        return presetColors.first?.color
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ü–≤–µ—Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞ –∫–∞–∫ SwiftUI Colors
    var allColors: [Color] {
        return presetColors.map { $0.color }
    }
}
