//
//  LightingColorService.swift
//  BulbsHUE
//
//  Created by Anton Reasin on [DATE].
//

import SwiftUI
import Foundation

// MARK: - –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–º –æ—Å–≤–µ—â–µ–Ω–∏—è

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–º –∏ —è—Ä–∫–æ—Å—Ç—å—é –ª–∞–º–ø –∏ –∫–æ–º–Ω–∞—Ç
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—ã ColorManaging –∏ BrightnessManaging
/// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility - –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
@MainActor
class LightingColorService: LightingManaging {
    
    // MARK: - Dependencies
    
    /// –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏
    private let lightControlService: LightControlService?
    
    /// AppViewModel –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ª–∞–º–ø –∏ –∫–æ–º–Ω–∞—Ç
    private weak var appViewModel: AppViewModel?
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    /// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Dependency Inversion - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
    init(lightControlService: LightControlService?, appViewModel: AppViewModel?) {
        self.lightControlService = lightControlService
        self.appViewModel = appViewModel
    }
    
    // MARK: - ColorManaging Implementation
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø—ã
    func setColor(for light: Light, color: Color) async throws {
        guard let lightControlService = lightControlService else {
            throw LightingError.serviceNotAvailable
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SwiftUI Color –≤ RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        let rgbComponents = color.rgbComponents
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LightControlService
        try await lightControlService.setLightColor(
            lightId: light.id,
            red: rgbComponents.red,
            green: rgbComponents.green,
            blue: rgbComponents.blue
        )
        
        print("‚úÖ –¶–≤–µ—Ç –ª–∞–º–ø—ã '\(light.metadata.name)' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RGB(\(rgbComponents.red), \(rgbComponents.green), \(rgbComponents.blue))")
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    func setColor(for room: RoomEntity, color: Color) async throws {
        guard let appViewModel = appViewModel else {
            throw LightingError.dataNotAvailable
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –∫–æ–º–Ω–∞—Ç—ã
        let roomLights = appViewModel.lightsViewModel.lights.filter { light in
            room.lightIds.contains(light.id)
        }
        
        guard !roomLights.isEmpty else {
            throw LightingError.noLightsInRoom
        }
        
        print("üè† –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è \(roomLights.count) –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ '\(room.name)'")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–º –ª–∞–º–ø–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try await withThrowingTaskGroup(of: Void.self) { group in
            for light in roomLights {
                group.addTask {
                    try await self.setColor(for: light, color: color)
                }
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            for try await _ in group {
                // –ü—Ä–æ—Ü–µ—Å—Å–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            }
        }
        
        print("‚úÖ –¶–≤–µ—Ç –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ '\(room.name)' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç –ª–∞–º–ø—ã
    func getCurrentColor(for light: Light) -> Color {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ª–∞–º–ø—ã
        if let colorState = light.color,
           let xyColor = colorState.xy {
            return Color(
                red: Double(xyColor.x),
                green: Double(xyColor.y),
                blue: 1.0 - Double(xyColor.x) - Double(xyColor.y)
            )
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–ø–ª—ã–π –±–µ–ª—ã–π –∫–∞–∫ –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç
        return Color(red: 1.0, green: 0.8, blue: 0.6)
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    func getAverageColor(for room: RoomEntity) -> Color {
        guard let appViewModel = appViewModel else {
            return Color.white
        }
        
        let roomLights = appViewModel.lightsViewModel.lights.filter { light in
            room.lightIds.contains(light.id)
        }
        
        guard !roomLights.isEmpty else {
            return Color.white
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç –≤—Å–µ—Ö –ª–∞–º–ø
        let totalRed = roomLights.reduce(0.0) { sum, light in
            sum + getCurrentColor(for: light).rgbComponents.red
        }
        let totalGreen = roomLights.reduce(0.0) { sum, light in
            sum + getCurrentColor(for: light).rgbComponents.green
        }
        let totalBlue = roomLights.reduce(0.0) { sum, light in
            sum + getCurrentColor(for: light).rgbComponents.blue
        }
        
        let count = Double(roomLights.count)
        return Color(
            red: totalRed / count,
            green: totalGreen / count,
            blue: totalBlue / count
        )
    }
    
    // MARK: - BrightnessManaging Implementation
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø—ã
    func setBrightness(for light: Light, brightness: Double) async throws {
        guard let lightControlService = lightControlService else {
            throw LightingError.serviceNotAvailable
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —è—Ä–∫–æ—Å—Ç–∏
        let clampedBrightness = max(0.0, min(100.0, brightness))
        
        try await lightControlService.setLightBrightness(
            lightId: light.id,
            brightness: clampedBrightness
        )
        
        print("‚úÖ –Ø—Ä–∫–æ—Å—Ç—å –ª–∞–º–ø—ã '\(light.metadata.name)' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ \(clampedBrightness)%")
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    func setBrightness(for room: RoomEntity, brightness: Double) async throws {
        guard let appViewModel = appViewModel else {
            throw LightingError.dataNotAvailable
        }
        
        let roomLights = appViewModel.lightsViewModel.lights.filter { light in
            room.lightIds.contains(light.id)
        }
        
        guard !roomLights.isEmpty else {
            throw LightingError.noLightsInRoom
        }
        
        print("üè† –ò–∑–º–µ–Ω—è–µ–º —è—Ä–∫–æ—Å—Ç—å –¥–ª—è \(roomLights.count) –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ '\(room.name)'")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —è—Ä–∫–æ—Å—Ç—å –∫–æ –≤—Å–µ–º –ª–∞–º–ø–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try await withThrowingTaskGroup(of: Void.self) { group in
            for light in roomLights {
                group.addTask {
                    try await self.setBrightness(for: light, brightness: brightness)
                }
            }
            
            for try await _ in group {
                // –ü—Ä–æ—Ü–µ—Å—Å–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            }
        }
        
        print("‚úÖ –Ø—Ä–∫–æ—Å—Ç—å –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ '\(room.name)' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ \(brightness)%")
    }
}

// MARK: - –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å–∞

/// –û—à–∏–±–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
enum LightingError: Error, LocalizedError {
    case serviceNotAvailable
    case dataNotAvailable
    case noLightsInRoom
    case invalidColorValue
    case invalidBrightnessValue
    
    var errorDescription: String? {
        switch self {
        case .serviceNotAvailable:
            return "–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        case .dataNotAvailable:
            return "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        case .noLightsInRoom:
            return "–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –ª–∞–º–ø"
        case .invalidColorValue:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞"
        case .invalidBrightnessValue:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0-100)"
        }
    }
}

// MARK: - Extensions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–≤–µ—Ç–æ–º

extension Color {
    /// –ü–æ–ª—É—á–∏—Ç—å RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–≤–µ—Ç–∞
    var rgbComponents: (red: Double, green: Double, blue: Double) {
        #if canImport(UIKit)
        let uiColor = UIColor(self)
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0
        
        uiColor.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return (Double(red), Double(green), Double(blue))
        #else
        // Fallback –¥–ª—è macOS
        let nsColor = NSColor(self)
        let converted = nsColor.usingColorSpace(.deviceRGB) ?? nsColor
        return (Double(converted.redComponent), Double(converted.greenComponent), Double(converted.blueComponent))
        #endif
    }
}
