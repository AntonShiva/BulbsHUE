//
//  RoomUseCases.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 15.08.2025.
//

import Foundation
import Combine

// MARK: - Create Room Use Case
struct CreateRoomUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol) {
        self.roomRepository = roomRepository
    }
    
    struct Input {
        let name: String
        let type: RoomSubType
        let subtypeName: String
        let iconName: String
    }
    
    func execute(_ input: Input) -> AnyPublisher<RoomEntity, Error> {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        guard !input.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            return Fail(error: RoomError.invalidName)
                .eraseToAnyPublisher()
        }
        
        let room = RoomEntity(
            id: UUID().uuidString,
            name: input.name,
            type: input.type,
            subtypeName: input.subtypeName, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞
            iconName: input.iconName,
            lightIds: [],
            isActive: true,
            createdAt: Date(),
            updatedAt: Date()
        )
        
        return roomRepository.createRoom(room)
            .map { _ in room }
            .eraseToAnyPublisher()
    }
}

// MARK: - Create Room With Lights Use Case
struct CreateRoomWithLightsUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    private let lightRepository: LightRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol, lightRepository: LightRepositoryProtocol) {
        self.roomRepository = roomRepository
        self.lightRepository = lightRepository
    }
    
    struct Input {
        let roomName: String
        let roomType: RoomSubType
        let subtypeName: String // ‚úÖ –ù–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "DOWNSTAIRS")
        let iconName: String // ‚úÖ –ò–∫–æ–Ω–∫–∞ –ø–æ–¥—Ç–∏–ø–∞
        let lightIds: [String]
    }
    
    func execute(_ input: Input) -> AnyPublisher<RoomEntity, Error> {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        guard !input.roomName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            return Fail(error: RoomError.invalidName)
                .eraseToAnyPublisher()
        }
        
        guard !input.lightIds.isEmpty else {
            return Fail(error: RoomError.noLightsProvided)
                .eraseToAnyPublisher()
        }
        
        // ‚úÖ –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó –†–ï–ê–õ–¨–ù–´–ô REPOSITORY
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ª–∞–º–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        let lightChecks = input.lightIds.map { lightId in
            lightRepository.getLight(by: lightId)
                .map { light -> Bool in
                    return light != nil
                }
        }
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∞–º–ø: \(input.lightIds)")
        
        return Publishers.MergeMany(lightChecks)
            .collect()
            .flatMap { results -> AnyPublisher<RoomEntity, Error> in
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ª–∞–º–ø—ã –Ω–∞–π–¥–µ–Ω—ã
                guard results.allSatisfy({ $0 }) else {
                    print("‚ùå –ù–µ –≤—Å–µ –ª–∞–º–ø—ã –Ω–∞–π–¥–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: \(results)")
                    return Fail(error: RoomError.lightNotFound)
                        .eraseToAnyPublisher()
                }
                
                print("‚úÖ –í—Å–µ –ª–∞–º–ø—ã –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É")
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
                let room = RoomEntity(
                    id: UUID().uuidString,
                    name: input.roomName,
                    type: input.roomType,
                    subtypeName: input.subtypeName, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞
                    iconName: input.iconName, // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∫–æ–Ω–∫—É
                    lightIds: input.lightIds,
                    isActive: true,
                    createdAt: Date(),
                    updatedAt: Date()
                )
                
                return self.roomRepository.createRoom(room)
                    .map { _ in room }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - Add Light To Room Use Case
struct AddLightToRoomUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    private let lightRepository: LightRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol, lightRepository: LightRepositoryProtocol) {
        self.roomRepository = roomRepository
        self.lightRepository = lightRepository
    }
    
    struct Input {
        let lightId: String
        let roomId: String
    }
    
    func execute(_ input: Input) -> AnyPublisher<Void, Error> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–º–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return lightRepository.getLight(by: input.lightId)
            .flatMap { light -> AnyPublisher<Void, Error> in
                guard light != nil else {
                    return Fail(error: RoomError.lightNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                return self.roomRepository.getRoom(by: input.roomId)
                    .flatMap { room -> AnyPublisher<Void, Error> in
                        guard room != nil else {
                            return Fail(error: RoomError.roomNotFound)
                                .eraseToAnyPublisher()
                        }
                        
                        return self.roomRepository.addLightToRoom(
                            roomId: input.roomId,
                            lightId: input.lightId
                        )
                    }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - Get Room Lights Use Case
struct GetRoomLightsUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    private let lightRepository: LightRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol, lightRepository: LightRepositoryProtocol) {
        self.roomRepository = roomRepository
        self.lightRepository = lightRepository
    }
    
    struct Input {
        let roomId: String
    }
    
    func execute(_ input: Input) -> AnyPublisher<[LightEntity], Error> {
        return roomRepository.getRoom(by: input.roomId)
            .flatMap { room -> AnyPublisher<[LightEntity], Error> in
                guard let room = room else {
                    return Fail(error: RoomError.roomNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ID –∫–æ–º–Ω–∞—Ç—ã
                return self.lightRepository.getAllLights()
                    .map { lights in
                        lights.filter { room.lightIds.contains($0.id) }
                    }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - Get Rooms Use Case
struct GetRoomsUseCase: UseCase, GetRoomsUseCaseProtocol {
    private let roomRepository: RoomRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol) {
        self.roomRepository = roomRepository
    }
    
    func execute(_ input: Void) -> AnyPublisher<[RoomEntity], Error> {
        return roomRepository.getAllRooms()
    }
}

// MARK: - Delete Room Use Case
struct DeleteRoomUseCase: UseCase, DeleteRoomUseCaseProtocol {
    private let roomRepository: RoomRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol) {
        self.roomRepository = roomRepository
    }
    
    func execute(_ roomId: String) -> AnyPublisher<Void, Error> {
        return roomRepository.deleteRoom(id: roomId)
    }
}

// MARK: - Move Light Between Rooms Use Case
struct MoveLightBetweenRoomsUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    private let lightRepository: LightRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol, lightRepository: LightRepositoryProtocol) {
        self.roomRepository = roomRepository
        self.lightRepository = lightRepository
    }
    
    struct Input {
        let lightId: String
        let fromRoomId: String?  // nil –µ—Å–ª–∏ –ª–∞–º–ø–∞ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        let toRoomId: String
    }
    
    func execute(_ input: Input) -> AnyPublisher<Void, Error> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–º–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return lightRepository.getLight(by: input.lightId)
            .flatMap { light -> AnyPublisher<Void, Error> in
                guard light != nil else {
                    return Fail(error: RoomError.lightNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                return self.roomRepository.getRoom(by: input.toRoomId)
                    .flatMap { targetRoom -> AnyPublisher<Void, Error> in
                        guard targetRoom != nil else {
                            return Fail(error: RoomError.roomNotFound)
                                .eraseToAnyPublisher()
                        }
                        
                        // –ï—Å–ª–∏ –ª–∞–º–ø–∞ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ - —É–¥–∞–ª—è–µ–º –µ—ë –æ—Ç—Ç—É–¥–∞
                        let removeFromOldRoom: AnyPublisher<Void, Error>
                        if let fromRoomId = input.fromRoomId {
                            removeFromOldRoom = self.roomRepository.removeLightFromRoom(
                                roomId: fromRoomId,
                                lightId: input.lightId
                            )
                        } else {
                            removeFromOldRoom = Just(()).setFailureType(to: Error.self).eraseToAnyPublisher()
                        }
                        
                        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–º–Ω–∞—Ç—ã, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é
                        return removeFromOldRoom
                            .flatMap { _ in
                                return self.roomRepository.addLightToRoom(
                                    roomId: input.toRoomId,
                                    lightId: input.lightId
                                )
                            }
                            .eraseToAnyPublisher()
                    }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - Remove Light From Room Use Case
struct RemoveLightFromRoomUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol) {
        self.roomRepository = roomRepository
    }
    
    struct Input {
        let roomId: String
        let lightId: String
    }
    
    func execute(_ input: Input) -> AnyPublisher<Void, Error> {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
        return roomRepository.getRoom(by: input.roomId)
            .flatMap { room -> AnyPublisher<Void, Error> in
                guard let room = room else {
                    return Fail(error: RoomError.roomNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∞–º–ø–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
                guard room.lightIds.contains(input.lightId) else {
                    return Fail(error: RoomError.lightNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –£–¥–∞–ª—è–µ–º –ª–∞–º–ø—É –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                return self.roomRepository.removeLightFromRoom(
                    roomId: input.roomId,
                    lightId: input.lightId
                )
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - Update Room Use Case
struct UpdateRoomUseCase: UseCase {
    private let roomRepository: RoomRepositoryProtocol
    
    init(roomRepository: RoomRepositoryProtocol) {
        self.roomRepository = roomRepository
    }
    
    struct Input {
        let room: RoomEntity
    }
    
    func execute(_ input: Input) -> AnyPublisher<Void, Error> {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
        return roomRepository.getRoom(by: input.room.id)
            .flatMap { existingRoom -> AnyPublisher<Void, Error> in
                guard existingRoom != nil else {
                    return Fail(error: RoomError.roomNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç roomsStream –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                return self.roomRepository.updateRoom(input.room)
            }
            .eraseToAnyPublisher()
    }
}

// MARK: - Room Errors
enum RoomError: Error, LocalizedError {
    case roomNotFound
    case lightNotFound
    case invalidName
    case roomAlreadyExists
    case cannotDeleteNonEmptyRoom
    case noLightsProvided
    
    var errorDescription: String? {
        switch self {
        case .roomNotFound:
            return "Room not found"
        case .lightNotFound:
            return "Light not found"
        case .invalidName:
            return "Invalid room name"
        case .roomAlreadyExists:
            return "Room with this name already exists"
        case .cannotDeleteNonEmptyRoom:
            return "Cannot delete room with lights"
        case .noLightsProvided:
            return "No lights provided for room creation"
        }
    }
}
