//
//  ConnectToBridgeUseCase.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 15.08.2025.
//

import Foundation
import Combine

/// Use Case –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É Philips Hue
/// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
class ConnectToBridgeUseCase {
    
    // MARK: - Dependencies
    
    private let bridgeRepository: BridgeRepository
    
    // MARK: - Private Properties
    
    private let appName = "BulbsHUE"
    private let deviceName = "iOS Device"
    
    // MARK: - Initialization
    
    init(bridgeRepository: BridgeRepository) {
        self.bridgeRepository = bridgeRepository
    }
    
    // MARK: - Public Methods
    
    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    /// - Parameters:
    ///   - bridge: –ú–æ—Å—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ///   - forceReconnect: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    /// - Returns: Publisher —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –º–æ—Å—Ç–æ–º
    func execute(bridge: BridgeEntity, forceReconnect: Bool = false) -> AnyPublisher<BridgeEntity, Error> {
        print("üîó [ConnectToBridgeUseCase] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –º–æ—Å—Ç—É: \(bridge.name) (\(bridge.ipAddress))")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        return bridgeRepository.checkBridgeConnection(bridge)
            .flatMap { [weak self] isConnected -> AnyPublisher<BridgeEntity, Error> in
                guard let self = self else {
                    return Fail(error: BridgeRepositoryError.bridgeNotFound)
                        .eraseToAnyPublisher()
                }
                
                // –ï—Å–ª–∏ –º–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                if !isConnected {
                    print("‚ùå [ConnectToBridgeUseCase] –ú–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return Fail(error: BridgeRepositoryError.bridgeUnavailable)
                        .eraseToAnyPublisher()
                }
                
                // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ –µ—Å—Ç—å –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                if !forceReconnect && bridge.applicationKey != nil && bridge.isConnected {
                    print("‚úÖ [ConnectToBridgeUseCase] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –º–æ—Å—Ç—É")
                    return Just(bridge)
                        .setFailureType(to: Error.self)
                        .eraseToAnyPublisher()
                }
                
                // –ù—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                print("üîê [ConnectToBridgeUseCase] –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                return self.authenticateAndConnect(bridge: bridge)
            }
            .eraseToAnyPublisher()
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É
    /// - Parameter bridge: –ú–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// - Returns: Publisher —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –º–æ—Å—Ç–æ–º
    func forceReconnect(bridge: BridgeEntity) -> AnyPublisher<BridgeEntity, Error> {
        return execute(bridge: bridge, forceReconnect: true)
    }
    
    // MARK: - Private Methods
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    /// - Parameter bridge: –ú–æ—Å—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    /// - Returns: Publisher —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ—Å—Ç–æ–º
    private func authenticateAndConnect(bridge: BridgeEntity) -> AnyPublisher<BridgeEntity, Error> {
        return bridgeRepository.authenticateWithBridge(
            bridge, 
            appName: appName, 
            deviceName: deviceName
        )
        .flatMap { [weak self] authenticatedBridge -> AnyPublisher<BridgeEntity, Error> in
            guard let self = self else {
                return Fail(error: BridgeRepositoryError.bridgeNotFound)
                    .eraseToAnyPublisher()
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—Å—Ç—É
            return self.bridgeRepository.getBridgeInfo(authenticatedBridge)
                .map { updatedBridge in
                    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é bridge entity —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    BridgeEntity(
                        id: updatedBridge.id,
                        name: updatedBridge.name,
                        ipAddress: updatedBridge.ipAddress,
                        modelId: updatedBridge.modelId,
                        swVersion: updatedBridge.swVersion,
                        applicationKey: authenticatedBridge.applicationKey,
                        isConnected: true,
                        lastSeen: Date()
                    )
                }
                .eraseToAnyPublisher()
        }
        .flatMap { [weak self] finalBridge -> AnyPublisher<BridgeEntity, Error> in
            guard let self = self else {
                return Fail(error: BridgeRepositoryError.bridgeNotFound)
                    .eraseToAnyPublisher()
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –º–æ—Å—Ç
            return self.bridgeRepository.saveBridge(finalBridge)
        }
        .eraseToAnyPublisher()
    }
}
