//
//  DiscoverBridgesUseCase.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 15.08.2025.
//

import Foundation
import Combine

/// Use Case –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤ Philips Hue
/// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
///
/// **–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞:**
/// 1. mDNS (Bonjour) - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
/// 2. Cloud Discovery - –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Philips API
/// 3. SSDP - –ª–æ–∫–∞–ª—å–Ω—ã–π UDP multicast –ø–æ–∏—Å–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
///
/// **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
/// - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ (–∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —É—Å–ø–µ—à–Ω–æ–º –º–µ—Ç–æ–¥–µ)
/// - –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ç–∏ –∏ –±–∞—Ç–∞—Ä–µ–∏
/// - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ –º–æ—Å—Ç
class DiscoverBridgesUseCase {
    
    // MARK: - Dependencies
    
    private let bridgeRepository: BridgeRepository
    
    // MARK: - Initialization
    
    init(bridgeRepository: BridgeRepository) {
        self.bridgeRepository = bridgeRepository
    }
    
    // MARK: - Public Methods
    
    /// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    /// - Returns: Publisher —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–æ—Å—Ç–∞–º–∏
    func execute() -> AnyPublisher<[BridgeEntity], Error> {
        print("üîç [DiscoverBridgesUseCase] –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤...")
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        // 1. mDNS - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        // 2. Cloud Discovery - –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫  
        // 3. SSDP - –ª–æ–∫–∞–ª—å–Ω—ã–π UDP multicast –ø–æ–∏—Å–∫
        
        return bridgeRepository.discoverBridgesViaMDNS()
            .catch { error -> AnyPublisher<[BridgeEntity], Never> in
                print("‚ùå [DiscoverBridgesUseCase] mDNS Discovery failed: \(error)")
                return Just([]).eraseToAnyPublisher()
            }
            .flatMap { mdnsBridges -> AnyPublisher<[BridgeEntity], Error> in
                // –ï—Å–ª–∏ mDNS –Ω–∞—à–µ–ª –º–æ—Å—Ç—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ (—Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
                if !mdnsBridges.isEmpty {
                    print("‚úÖ [DiscoverBridgesUseCase] mDNS –Ω–∞—à–µ–ª \(mdnsBridges.count) –º–æ—Å—Ç(–æ–≤), –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Å—Ä–æ—á–Ω–æ")
                    return Just(mdnsBridges)
                        .setFailureType(to: Error.self)
                        .eraseToAnyPublisher()
                }
                
                // –ï—Å–ª–∏ mDNS –Ω–µ –Ω–∞—à–µ–ª - –ø—Ä–æ–±—É–µ–º Cloud Discovery
                print("üîÑ [DiscoverBridgesUseCase] mDNS –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º Cloud Discovery...")
                return self.bridgeRepository.discoverBridgesViaPhilips()
                    .catch { error -> AnyPublisher<[BridgeEntity], Never> in
                        print("‚ùå [DiscoverBridgesUseCase] Cloud Discovery failed: \(error)")
                        return Just([]).eraseToAnyPublisher()
                    }
                    .flatMap { cloudBridges -> AnyPublisher<[BridgeEntity], Error> in
                        // –ï—Å–ª–∏ Cloud –Ω–∞—à–µ–ª –º–æ—Å—Ç—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º
                        if !cloudBridges.isEmpty {
                            print("‚úÖ [DiscoverBridgesUseCase] Cloud Discovery –Ω–∞—à–µ–ª \(cloudBridges.count) –º–æ—Å—Ç(–æ–≤)")
                            return Just(cloudBridges)
                                .setFailureType(to: Error.self)
                                .eraseToAnyPublisher()
                        }
                        
                        // –ï—Å–ª–∏ Cloud –Ω–µ –Ω–∞—à–µ–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º SSDP –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤
                        print("üîÑ [DiscoverBridgesUseCase] Cloud –Ω–µ –Ω–∞—à–µ–ª –º–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º SSDP...")
                        return self.bridgeRepository.discoverBridges()
                            .catch { error -> AnyPublisher<[BridgeEntity], Never> in
                                print("‚ùå [DiscoverBridgesUseCase] SSDP Discovery failed: \(error)")
                                return Just([]).eraseToAnyPublisher()
                            }
                            .map { ssdpBridges in
                                print("‚úÖ [DiscoverBridgesUseCase] SSDP –Ω–∞—à–µ–ª \(ssdpBridges.count) –º–æ—Å—Ç(–æ–≤)")
                                return ssdpBridges
                            }
                            .setFailureType(to: Error.self)
                            .eraseToAnyPublisher()
                    }
                    .eraseToAnyPublisher()
            }
            .eraseToAnyPublisher()
    }
    
    /// –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ mDNS (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
    /// - Returns: Publisher —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–æ—Å—Ç–∞–º–∏
    func executeFast() -> AnyPublisher<[BridgeEntity], Error> {
        print("‚ö° [DiscoverBridgesUseCase] –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ mDNS...")
        return bridgeRepository.discoverBridgesViaMDNS()
    }
    
    /// –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å Philips
    /// - Returns: Publisher —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–æ—Å—Ç–∞–º–∏
    func executeViaCloud() -> AnyPublisher<[BridgeEntity], Error> {
        print("‚òÅÔ∏è [DiscoverBridgesUseCase] –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å...")
        return bridgeRepository.discoverBridgesViaPhilips()
    }
    
    // MARK: - Private Methods
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã - –ª–æ–≥–∏–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
}

