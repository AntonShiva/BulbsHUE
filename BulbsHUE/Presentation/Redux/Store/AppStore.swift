//
//  AppStore.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 15.08.2025.
//

import Foundation
import Combine

// MARK: - Redux Store
/// –û—Å–Ω–æ–≤–Ω–æ–π Store –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ–π—Å—Ç–≤–∏–π
@MainActor
final class AppStore: ObservableObject {
    
    // MARK: - Published State
    @Published private(set) var state: AppState
    
    // MARK: - Private Properties
    private let middlewares: [Middleware]
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init(
        initialState: AppState = AppState(),
        middlewares: [Middleware] = []
    ) {
        self.state = initialState
        self.middlewares = middlewares
    }
    
    // MARK: - Public Methods
    
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ Store
    func dispatch(_ action: AppAction) {
        let oldState = state
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
        let processedAction = middlewares.reduce(action) { currentAction, middleware in
            return middleware.process(action: currentAction, state: oldState, store: self)
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–¥—å—é—Å–µ—Ä
        state = appReducer(state: oldState, action: processedAction)
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ debug —Ä–µ–∂–∏–º–µ
        #if DEBUG
        logStateChange(from: oldState, to: state, action: processedAction)
        #endif
    }
    
    // MARK: - Selectors (Computed Properties)
    
    /// –õ–∞–º–ø—ã –≤ Environment
    var environmentLights: [LightEntity] {
        state.lights.assignedLights
    }
    
    /// –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø—ã
    var availableLights: [LightEntity] {
        state.lights.availableLights
    }
    
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É
    var connectionStatus: ConnectionStatus {
        state.bridge.connectionStatus
    }
    
    /// –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–º–ø
    var isLightsLoading: Bool {
        state.lights.isLoading
    }
    
    /// –û—à–∏–±–∫–∞ –ª–∞–º–ø
    var lightsError: String? {
        state.lights.error
    }
    
    // MARK: - Private Methods
    
    private func logStateChange(from oldState: AppState, to newState: AppState, action: AppAction) {
        if oldState != newState {
            print("üîÑ Redux: \(action)")
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if oldState.lights != newState.lights {
                print("   üí° Lights: \(newState.lights.assignedLights.count) assigned, \(newState.lights.allLights.count) total")
            }
            
            if oldState.bridge != newState.bridge {
                print("   üåâ Bridge: \(newState.bridge.connectionStatus)")
            }
            
            if oldState.scenes != newState.scenes {
                print("   ÔøΩ Scenes: \(newState.scenes.scenes.count) loaded")
            }
        }
    }
}

// MARK: - Middleware Protocol
protocol Middleware {
    func process(action: AppAction, state: AppState, store: AppStore) -> AppAction
}

// MARK: - Redux Store Extensions –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
extension AppStore {
    
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    func subscribe<T: Equatable>(
        to keyPath: KeyPath<AppState, T>
    ) -> AnyPublisher<T, Never> {
        return $state
            .map { $0[keyPath: keyPath] }
            .removeDuplicates()
            .eraseToAnyPublisher()
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ KeyPath
    func getValue<T>(for keyPath: KeyPath<AppState, T>) -> T {
        return state[keyPath: keyPath]
    }
}
