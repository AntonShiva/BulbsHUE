//
//  MigrationAdapter.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 15.08.2025.
//

import Foundation
import Combine

/// Feature flags –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–µ–π
struct MigrationFeatureFlags {
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è Bridge
    static let useNewBridgeArchitecture = true // ‚úÖ –ê–ö–¢–ò–í–ò–†–£–ï–ú Bridge Service
    
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redux –¥–ª—è –ª–∞–º–ø
    static let useReduxForLights = false
    
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redux –¥–ª—è —Å—Ü–µ–Ω
    static let useReduxForScenes = false
    
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redux –¥–ª—è –≥—Ä—É–ø–ø
    static let useReduxForGroups = false
    
    /// –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    static let debugMigration = true
}

/// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
class MigrationAdapter: ObservableObject {
    
    // MARK: - Dependencies
    private let store: AppStore
    private let appViewModel: AppViewModel
    
    // New Bridge Architecture Dependencies
    private let bridgeRepository: BridgeRepository?
    private let discoverBridgesUseCase: DiscoverBridgesUseCase?
    private let connectToBridgeUseCase: ConnectToBridgeUseCase?
    private let getSavedBridgeUseCase: GetSavedBridgeUseCase?
    
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init(store: AppStore, appViewModel: AppViewModel) {
        self.store = store
        self.appViewModel = appViewModel
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é Bridge –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –µ—Å–ª–∏ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–µ–Ω
        if MigrationFeatureFlags.useNewBridgeArchitecture {
            // –°–æ–∑–¥–∞–µ–º HueAPIClient —Å dummy IP (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
            let hueAPIClient = HueAPIClient(bridgeIP: "192.168.1.1") // –í—Ä–µ–º–µ–Ω–Ω—ã–π IP
            let bridgeRepo = BridgeRepositoryImpl(hueAPIClient: hueAPIClient)
            
            self.bridgeRepository = bridgeRepo
            self.discoverBridgesUseCase = DiscoverBridgesUseCase(bridgeRepository: bridgeRepo)
            self.connectToBridgeUseCase = ConnectToBridgeUseCase(bridgeRepository: bridgeRepo)
            self.getSavedBridgeUseCase = GetSavedBridgeUseCase(bridgeRepository: bridgeRepo)
        } else {
            self.bridgeRepository = nil
            self.discoverBridgesUseCase = nil
            self.connectToBridgeUseCase = nil
            self.getSavedBridgeUseCase = nil
        }
        
        if MigrationFeatureFlags.debugMigration {
            print("üîÑ MigrationAdapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("   Bridge Architecture: \(MigrationFeatureFlags.useNewBridgeArchitecture ? "‚úÖ NEW" : "‚ùå OLD")")
            print("   Redux Lights: \(MigrationFeatureFlags.useReduxForLights ? "‚úÖ ENABLED" : "‚ùå DISABLED")")
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–æ—Å—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        loadSavedBridgeIfNeeded()
    }
    
    // MARK: - Bridge Migration
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–æ—Å—Ç (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
    var currentBridge: Bridge? {
        if MigrationFeatureFlags.useNewBridgeArchitecture {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (Redux)
            return store.state.bridge.currentBridge?.toLegacy()
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            return appViewModel.currentBridge
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
    var connectionStatus: ConnectionStatus {
        if MigrationFeatureFlags.useNewBridgeArchitecture {
            // –ú–∞–ø–ø–∏–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å—Ç–∞—Ä—ã–π
            return store.state.bridge.connectionStatus
        } else {
            return appViewModel.connectionStatus
        }
    }
    
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–æ—Å—Ç—É (dual write –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏)
    func connectToBridge(_ bridge: Bridge) {
        if MigrationFeatureFlags.debugMigration {
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ—Å—Ç—É: \(bridge.name ?? "Unknown")")
        }
        
        if MigrationFeatureFlags.useNewBridgeArchitecture {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            let bridgeEntity = bridge.toDomain()
            connectToBridgeUseCase?.execute(bridge: bridgeEntity)
                .sink(
                    receiveCompletion: { completion in
                        if case .failure(let error) = completion {
                            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ—Å—Ç—É (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞): \(error)")
                        }
                    },
                    receiveValue: { [weak self] connectedBridge in
                        print("‚úÖ –ú–æ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: \(connectedBridge.name)")
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        self?.store.dispatch(.bridge(.bridgeConnected(connectedBridge, applicationKey: connectedBridge.applicationKey ?? "")))
                        self?.store.dispatch(.bridge(.setConnectionStatus(.connected)))
                        
                        // Dual write: –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        if let legacyBridge = connectedBridge.toLegacy() {
                            self?.appViewModel.currentBridge = legacyBridge
                            self?.appViewModel.connectionStatus = .connected
                        }
                    }
                )
                .store(in: &cancellables)
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            appViewModel.connectToBridge(bridge)
        }
    }
    
    /// –ü–æ–∏—Å–∫ –º–æ—Å—Ç–æ–≤ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
    func discoverBridges(completion: @escaping ([Bridge]) -> Void) {
        if MigrationFeatureFlags.debugMigration {
            print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤")
        }
        
        if MigrationFeatureFlags.useNewBridgeArchitecture {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            discoverBridgesUseCase?.execute()
                .sink(
                    receiveCompletion: { complete in
                        if case .failure(let error) = complete {
                            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞): \(error)")
                            completion([])
                        }
                    },
                    receiveValue: { bridgeEntities in
                        let legacyBridges = bridgeEntities.compactMap { $0.toLegacy() }
                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: \(legacyBridges.count)")
                        completion(legacyBridges)
                    }
                )
                .store(in: &cancellables)
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            // TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –º–æ—Å—Ç–æ–≤
            completion([])
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    private func loadSavedBridgeIfNeeded() {
        guard MigrationFeatureFlags.useNewBridgeArchitecture else { return }
        
        getSavedBridgeUseCase?.execute()
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞: \(error)")
                    }
                },
                receiveValue: { [weak self] savedBridge in
                    if let bridge = savedBridge {
                        print("ÔøΩ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–æ—Å—Ç: \(bridge.name)")
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º Redux —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        self?.store.dispatch(.bridge(.bridgeConnected(bridge, applicationKey: bridge.applicationKey ?? "")))
                        self?.store.dispatch(.bridge(.setConnectionStatus(bridge.isConnected ? .connected : .disconnected)))
                        
                        // Dual write: –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        if let legacyBridge = bridge.toLegacy() {
                            self?.appViewModel.currentBridge = legacyBridge
                            self?.appViewModel.connectionStatus = bridge.isConnected ? .connected : .disconnected
                        }
                    } else {
                        print("‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–æ—Å—Ç–∞")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    // MARK: - Lights Migration
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ª–∞–º–ø—ã (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
    var lights: [Light] {
        if MigrationFeatureFlags.useReduxForLights {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Redux
            return store.state.lights.assignedLights.map { $0.toLegacy() }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            return appViewModel.lightsViewModel.lights
        }
    }
    
    /// Publisher –¥–ª—è –ª–∞–º–ø (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
    var lightsPublisher: AnyPublisher<[Light], Never> {
        if MigrationFeatureFlags.useReduxForLights {
            return store.$state
                .map { $0.lights.assignedLights.map { $0.toLegacy() } }
                .eraseToAnyPublisher()
        } else {
            return appViewModel.lightsViewModel.$lights
                .eraseToAnyPublisher()
        }
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å –ª–∞–º–ø—É (dual write –≤–æ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏)
    func updateLight(_ light: Light) {
        if MigrationFeatureFlags.debugMigration {
            print("üí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø—ã: \(light.metadata.name)")
        }
        
        // –í—Å–µ–≥–¥–∞ –ø–∏—à–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        // TODO: –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∞–º–ø—ã –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        // appViewModel.lightsViewModel.updateLight(light)
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ø–∏—à–µ–º –∏ —Ç—É–¥–∞
        if MigrationFeatureFlags.useReduxForLights {
            store.dispatch(.light(.lightUpdated(light.toDomain())))
        }
    }
    
    // MARK: - Scenes Migration
    
    var scenes: [HueScene] {
        if MigrationFeatureFlags.useReduxForScenes {
            return store.state.scenes.scenes.map { $0.toLegacy() }
        } else {
            return appViewModel.scenesViewModel.scenes
        }
    }
    
    // MARK: - Groups Migration
    
    var groups: [HueGroup] {
        if MigrationFeatureFlags.useReduxForGroups {
            return store.state.groups.groups.map { $0.toLegacy() }
        } else {
            return appViewModel.groupsViewModel.groups
        }
    }
}

// MARK: - Extensions –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏

extension BridgeEntity {
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ç–∞—Ä—É—é
    func toLegacy() -> Bridge? {
        return Bridge(
            id: self.id,
            internalipaddress: self.ipAddress,
            port: 443,
            macaddress: nil, // TODO: –î–æ–±–∞–≤–∏—Ç—å MAC address –µ—Å–ª–∏ –µ—Å—Ç—å
            name: self.name
        )
    }
}

extension Bridge {
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å –≤ –Ω–æ–≤—É—é
    func toDomain() -> BridgeEntity {
        return BridgeEntity(from: self)
    }
}

extension LightEntity {
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ç–∞—Ä—É—é
    func toLegacy() -> Light {
        // TODO: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ LightEntity -> Light
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        var light = Light()
        light.id = self.id
        light.metadata.name = self.name
        light.on.on = self.isOn
        
        if let brightness = self.brightness as Double? {
            light.dimming = Dimming(brightness: brightness)
        }
        
        return light
    }
}

extension Light {
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å –≤ –Ω–æ–≤—É—é
    func toDomain() -> LightEntity {
        return LightEntity(
            id: self.id,
            name: self.metadata.name,
            type: .other, // TODO: –î–æ–±–∞–≤–∏—Ç—å mapping –¥–ª—è —Ç–∏–ø–æ–≤
            subtype: nil, // TODO: –î–æ–±–∞–≤–∏—Ç—å mapping –¥–ª—è –ø–æ–¥—Ç–∏–ø–æ–≤
            isOn: self.on.on,
            brightness: self.dimming?.brightness ?? 0.0,
            color: nil, // TODO: –î–æ–±–∞–≤–∏—Ç—å mapping –¥–ª—è —Ü–≤–µ—Ç–∞
            colorTemperature: self.color_temperature?.mirek,
            isReachable: true, // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            roomId: nil, // TODO: –î–æ–±–∞–≤–∏—Ç—å mapping –¥–ª—è –∫–æ–º–Ω–∞—Ç
            userSubtype: self.metadata.userSubtypeName,
            userIcon: self.metadata.userSubtypeIcon
        )
    }
}

extension SceneEntity {
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ç–∞—Ä—É—é
    func toLegacy() -> HueScene {
        // TODO: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SceneEntity -> HueScene
        var scene = HueScene()
        scene.id = self.id
        scene.metadata.name = self.name
        return scene
    }
}

extension GroupEntity {
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ —Å—Ç–∞—Ä—É—é
    func toLegacy() -> HueGroup {
        // TODO: –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ GroupEntity -> HueGroup
        var group = HueGroup()
        group.id = self.id
        if group.metadata == nil {
            group.metadata = GroupMetadata()
        }
        group.metadata?.name = self.name
        return group
    }
}
