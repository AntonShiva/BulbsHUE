//
//  RoomsViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/18/25.
//

import Foundation
import Combine
import SwiftUI

/// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏ –≤ Environment
/// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º MVVM –∏ SOLID - Single Responsibility Principle
@MainActor
final class RoomsViewModel: ObservableObject {
    // MARK: - Published Properties
    
    /// –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    @Published var rooms: [RoomEntity] = []
    
    /// –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç
    @Published var isLoading: Bool = false
    
    /// –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç
    @Published var error: Error?
    
    // MARK: - Private Properties
    
    /// Use Case –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    private let getRoomsUseCase: GetRoomsUseCaseProtocol
    private let deleteRoomUseCase: DeleteRoomUseCaseProtocol
    /// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–Ω–∞—Ç –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
    private let roomRepository: RoomRepositoryProtocol
    
    /// –ü–æ–¥–ø–∏—Å–∫–∏ Combine
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Dependency Injection)
    /// - Parameters:
    ///   - getRoomsUseCase: Use Case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç
    ///   - deleteRoomUseCase: Use Case –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç
    ///   - roomRepository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
    init(
        getRoomsUseCase: GetRoomsUseCaseProtocol,
        deleteRoomUseCase: DeleteRoomUseCaseProtocol,
        roomRepository: RoomRepositoryProtocol
    ) {
        self.getRoomsUseCase = getRoomsUseCase
        self.deleteRoomUseCase = deleteRoomUseCase
        self.roomRepository = roomRepository
        
        setupReactiveStreams()
        loadRooms()
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
    func loadRooms() {
        isLoading = true
        error = nil
        
        print("üîç RoomsViewModel: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç...")
        
        getRoomsUseCase.execute(())
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { [weak self] completion in
                    self?.isLoading = false
                    if case .failure(let error) = completion {
                        self?.error = error
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç: \(error)")
                    }
                },
                receiveValue: { [weak self] rooms in
                    self?.rooms = rooms
                    print("‚úÖ RoomsViewModel: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: \(rooms.count)")
                    if !rooms.isEmpty {
                        print("   –ö–æ–º–Ω–∞—Ç—ã: \(rooms.map { "\($0.name) (\($0.lightCount) –ª–∞–º–ø)" })")
                    }
                }
            )
            .store(in: &cancellables)
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç (pull-to-refresh)
    func refreshRooms() {
        loadRooms()
    }
    
    /// –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É
    /// - Parameter roomId: ID –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    func removeRoom(_ roomId: String) {
        guard let room = rooms.first(where: { $0.id == roomId }) else {
            print("‚ùå –ö–æ–º–Ω–∞—Ç–∞ —Å ID \(roomId) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        }
        
        deleteRoomUseCase.execute(roomId)
            .receive(on: DispatchQueue.main)
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: \(error)")
                    }
                },
                receiveValue: { [weak self] _ in
                    // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                    self?.rooms.removeAll { $0.id == roomId }
                    print("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ \(room.name) —É–¥–∞–ª–µ–Ω–∞")
                }
            )
            .store(in: &cancellables)
    }
    
    // MARK: - Computed Properties
    
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
    var roomsCount: Int {
        rooms.count
    }
    
    /// –ï—Å—Ç—å –ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    var hasRooms: Bool {
        !rooms.isEmpty
    }
    
    /// –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    var activeRooms: [RoomEntity] {
        rooms.filter { $0.isActive }
    }
    
    /// –ü—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã (–±–µ–∑ –ª–∞–º–ø)
    var emptyRooms: [RoomEntity] {
        rooms.filter { $0.isEmpty }
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∏–º—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    private func setupReactiveStreams() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º –∫–æ–º–Ω–∞—Ç –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        roomRepository.roomsStream
            .receive(on: DispatchQueue.main)
            .sink { [weak self] updatedRooms in
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                print("üîÑ RoomsViewModel: –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç –∏–∑ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞: \(updatedRooms.count)")
                self?.rooms = updatedRooms
                
                if !updatedRooms.isEmpty {
                    print("   –ö–æ–º–Ω–∞—Ç—ã: \(updatedRooms.map { "\($0.name) (\($0.lightCount) –ª–∞–º–ø)" })")
                }
            }
            .store(in: &cancellables)
    }
}

// MARK: - Mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

extension RoomsViewModel {
    /// –°–æ–∑–¥–∞—Ç—å mock ViewModel –¥–ª—è –ø—Ä–µ–≤—å—é –∏ —Ç–µ—Å—Ç–æ–≤
    static func createMock() -> RoomsViewModel {
        return RoomsViewModel(
            getRoomsUseCase: MockGetRoomsUseCase(),
            deleteRoomUseCase: MockDeleteRoomUseCase(),
            roomRepository: DIContainer.shared.roomRepository
        )
    }
}

// MARK: - Protocol Definitions

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç (Dependency Inversion Principle)
protocol GetRoomsUseCaseProtocol {
    func execute(_ input: Void) -> AnyPublisher<[RoomEntity], Error>
}

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç (Dependency Inversion Principle)
protocol DeleteRoomUseCaseProtocol {
    func execute(_ roomId: String) -> AnyPublisher<Void, Error>
}

// MARK: - Mock Implementations

private struct MockGetRoomsUseCase: GetRoomsUseCaseProtocol {
    func execute(_ input: Void) -> AnyPublisher<[RoomEntity], Error> {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∫–æ–º–Ω–∞—Ç –Ω–µ—Ç - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return Just([])
            .setFailureType(to: Error.self)
            .eraseToAnyPublisher()
    }
}

private struct MockDeleteRoomUseCase: DeleteRoomUseCaseProtocol {
    func execute(_ roomId: String) -> AnyPublisher<Void, Error> {
        return Just(())
            .setFailureType(to: Error.self)
            .eraseToAnyPublisher()
    }
}


