//
//  RoomControlViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/18/25.
//

import Foundation
import SwiftUI
import Combine

/// ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
/// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ItemControlViewModel, –Ω–æ –¥–ª—è –∫–æ–º–Ω–∞—Ç
@MainActor
final class RoomControlViewModel: ObservableObject {
    // MARK: - Published Properties
    
    /// –¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    @Published var currentRoom: RoomEntity?
    
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã (–≤—Å–µ—Ö –ª–∞–º–ø –≤ –Ω–µ–π)
    @Published var isOn: Bool = false
    
    /// –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    @Published var brightness: Double = 100.0
    
    /// –¶–≤–µ—Ç –∫–æ–º–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–æ—Ç –∂–µ —á—Ç–æ —É –ª–∞–º–ø)
    @Published var defaultWarmColor = Color(hue: 0.13, saturation: 0.25, brightness: 1.0)
    
    // MARK: - Private Properties
    
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
    private var lightControlService: LightControlling?
    
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
    private var roomService: RoomServiceProtocol?
    
    /// –ü–æ–¥–ø–∏—Å–∫–∏ Combine
    private var cancellables = Set<AnyCancellable>()
    
    /// –§–ª–∞–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    private var isConfigured: Bool = false
    
    /// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
    private var isUpdatingFromBatch: Bool = false
    
    /// –ó–∞–¥–∞—á–∞ –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —è—Ä–∫–æ—Å—Ç–∏
    private var brightnessTask: Task<Void, Never>?
    
    // MARK: - Initialization
    
    private init() {
        // –ü—É—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–¥–ª—è SwiftUI StateObject)
    static func createIsolated() -> RoomControlViewModel {
        return RoomControlViewModel()
    }
    
    deinit {
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        brightnessTask?.cancel()
        cancellables.removeAll()
    }
    
    // MARK: - Configuration
    
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç ViewModel —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –∫–æ–º–Ω–∞—Ç–æ–π
    /// - Parameters:
    ///   - lightControlService: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏
    ///   - roomService: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
    ///   - room: –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    func configure(
        with lightControlService: LightControlling,
        roomService: RoomServiceProtocol,
        room: RoomEntity
    ) {
        self.lightControlService = lightControlService
        self.roomService = roomService
        self.isConfigured = true
        setupObservers()
        setCurrentRoom(room)
    }
    
    // MARK: - Public Methods
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
    /// - Parameter room: –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    func setCurrentRoom(_ room: RoomEntity) {
        self.currentRoom = room
        updateStateFromRoom()
    }
    
    /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// - Parameter newState: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    func setPower(_ newState: Bool) {
        guard let room = currentRoom,
              let lightControlService = lightControlService else { return }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ –≤—Ä–µ–º—è batch –æ–ø–µ—Ä–∞—Ü–∏–∏
        isUpdatingFromBatch = true
        
        // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è responsiveness
        isOn = newState
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –∫–æ–º–Ω–∞—Ç—ã
        let roomLights = getRoomLights()
        guard !roomLights.isEmpty else { 
            isUpdatingFromBatch = false
            return 
        }
        
        print("üè† –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã '\(room.name)' -> \(newState ? "–í–ö–õ" : "–í–´–ö–õ") (\(roomLights.count) –ª–∞–º–ø)")
        
        // –ì—Ä—É–ø–ø–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∞–º–ø–∞–º–∏ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        Task { [weak self] in
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–º –ª–∞–º–ø–∞–º –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û, –∞ –Ω–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            await withTaskGroup(of: Void.self) { group in
                for light in roomLights {
                    group.addTask {
                        lightControlService.setPower(for: light, on: newState)
                    }
                }
            }
            
            // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç API
            try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
            
            await MainActor.run { [weak self] in
                self?.isUpdatingFromBatch = false
                print("üè† ‚úÖ Batch –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã '\(room.name)'")
            }
        }
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ (—Å –¥–µ–±–∞—É–Ω—Å–æ–º)
    /// - Parameter newBrightness: –ù–æ–≤–∞—è —è—Ä–∫–æ—Å—Ç—å (0-100)
    func setBrightnessThrottled(_ newBrightness: Double) {
        guard let room = currentRoom,
              let lightControlService = lightControlService else { return }
        
        // –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ –≥—Ä—É–ø–ø–æ–≤–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è—Ä–∫–æ—Å—Ç–∏
        isUpdatingFromBatch = true
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è UI responsiveness
        brightness = newBrightness
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –¥–µ–±–∞—É–Ω—Å–∞
        brightnessTask?.cancel()
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –¥–µ–±–∞—É–Ω—Å–æ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        brightnessTask = Task { [weak self] in
            try? await Task.sleep(nanoseconds: 100_000_000) // 0.1 —Å–µ–∫—É–Ω–¥—ã –¥–µ–±–∞—É–Ω—Å
            
            guard let self = self, !Task.isCancelled else { return }
            
            let roomLights = self.getRoomLights()
            await withTaskGroup(of: Void.self) { group in
                for light in roomLights {
                    group.addTask {
                        lightControlService.setBrightness(for: light, brightness: newBrightness)
                    }
                }
            }
            
            await MainActor.run { [weak self] in
                self?.isUpdatingFromBatch = false
            }
        }
    }
    
    /// –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —è—Ä–∫–æ—Å—Ç—å –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// - Parameter newBrightness: –§–∏–Ω–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å
    func commitBrightness(_ newBrightness: Double) {
        guard let room = currentRoom,
              let lightControlService = lightControlService else { return }
        
        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—É—é pending –∑–∞–¥–∞—á—É
        brightnessTask?.cancel()
        isUpdatingFromBatch = true
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
        brightness = newBrightness
        
        print("üè† üí° –ö–æ–º–º–∏—Ç —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã '\(room.name)': \(newBrightness)%")
        
        // –ì—Ä—É–ø–ø–æ–≤–æ–π –∫–æ–º–º–∏—Ç —è—Ä–∫–æ—Å—Ç–∏
        Task { [weak self] in
            let roomLights = self?.getRoomLights() ?? []
            await withTaskGroup(of: Void.self) { group in
                for light in roomLights {
                    group.addTask {
                        lightControlService.commitBrightness(for: light, brightness: newBrightness)
                    }
                }
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            try? await Task.sleep(nanoseconds: 200_000_000) // 0.2 —Å–µ–∫—É–Ω–¥—ã
            
            await MainActor.run { [weak self] in
                self?.isUpdatingFromBatch = false
                print("üè† ‚úÖ –ö–æ–º–º–∏—Ç —è—Ä–∫–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã '\(self?.currentRoom?.name ?? "Unknown")'")
            }
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    func getRoomName() -> String {
        return currentRoom?.name ?? "Unknown Room"
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã
    func getRoomType() -> String {
        return currentRoom?.type.displayName ?? "Room"
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–æ–º–Ω–∞—Ç—ã
    func getRoomIcon() -> String {
        return currentRoom?.iconName ?? "room"
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã (–µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–º–ø—ã)
    func isRoomAvailable() -> Bool {
        let roomLights = getRoomLights()
        return !roomLights.isEmpty && roomLights.contains { $0.isReachable }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    func getLightCount() -> Int {
        return currentRoom?.lightCount ?? 0
    }
    
    // MARK: - Private Methods
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    private func setupObservers() {
        guard let lightControlService = lightControlService else { return }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∞–º–ø
        lightControlService.lightsPublisher
            .receive(on: DispatchQueue.main)
            .sink { [weak self] lights in
                self?.updateStateFromLights(lights)
            }
            .store(in: &cancellables)
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∞–º–ø
    /// - Parameter lights: –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ª–∞–º–ø
    private func updateStateFromLights(_ lights: [Light]) {
        guard let room = currentRoom else { return }
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API –≤–æ –≤—Ä–µ–º—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
        guard !isUpdatingFromBatch else { 
            print("üè† ‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã '\(room.name)' - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è batch –æ–ø–µ—Ä–∞—Ü–∏—è")
            return 
        }
        
        let roomLights = lights.filter { room.lightIds.contains($0.id) }
        updateRoomState(from: roomLights)
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
    private func updateStateFromRoom() {
        let roomLights = getRoomLights()
        updateRoomState(from: roomLights)
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ª–∞–º–ø
    /// - Parameter roomLights: –õ–∞–º–ø—ã –∫–æ–º–Ω–∞—Ç—ã
    private func updateRoomState(from roomLights: [Light]) {
        if roomLights.isEmpty {
            isOn = false
            brightness = 0
            return
        }
        
        // –ö–æ–º–Ω–∞—Ç–∞ "–≤–∫–ª—é—á–µ–Ω–∞" –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ª–∞–º–ø–∞ –≤–∫–ª—é—á–µ–Ω–∞
        isOn = roomLights.contains { $0.on.on }
        
        // –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø
        let onLights = roomLights.filter { $0.on.on }
        if !onLights.isEmpty {
            let totalBrightness = onLights.compactMap { $0.dimming?.brightness }.reduce(0, +)
            brightness = Double(totalBrightness) / Double(onLights.count)
        } else {
            brightness = 0
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ª–∞–º–ø—ã –∫–æ–º–Ω–∞—Ç—ã
    /// - Returns: –ú–∞—Å—Å–∏–≤ –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
    private func getRoomLights() -> [Light] {
        guard let room = currentRoom,
              let lightControlService = lightControlService else { return [] }
        
        return lightControlService.lights.filter { room.lightIds.contains($0.id) }
    }
}

// MARK: - Room Service Protocol

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
protocol RoomServiceProtocol {
    func updateRoom(_ room: RoomEntity) async throws
    func deleteRoom(_ roomId: String) async throws
}

/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–æ–º–Ω–∞—Ç
final class RoomService: RoomServiceProtocol {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
    
    func updateRoom(_ room: RoomEntity) async throws {
        print("üè† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: \(room.name)")
    }
    
    func deleteRoom(_ roomId: String) async throws {
        print("üè† –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: \(roomId)")
    }
}
