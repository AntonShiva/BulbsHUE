//
//  ColorPickerTabsViewModel.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 9/05/25.
//

import SwiftUI
import Combine

@MainActor
class ColorPickerTabsViewModel: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var selectedTab: ColorPickerTab = .hexPicker
    @Published var selectedColor: Color = .orange
    @Published var selectedColorRelativePosition: CGPoint = CGPoint(x: 0.63, y: 0.9) // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç 0 –¥–æ 1
    @Published var brightness: Double = 24.0
    @Published var warmColdLamps: [WarmColdLamp] = []
    @Published var palletColors: [PalletColorItem] = []
    @Published var selectedPalletColorItem: PalletColorItem?
    
    // MARK: - Warm/Cold Properties
    @Published var warmColdSelectedColor: Color = Color(red: 1.0, green: 0.9, blue: 0.8) // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    @Published var warmColdRelativePosition: CGPoint = CGPoint(x: 0.5, y: 0.5) // –ü–æ–∑–∏—Ü–∏—è –≤ warm/cold –∫—Ä—É–≥–µ
    
    // MARK: - Room Light Markers for HEX Picker
    @Published var roomLightMarkers: [RoomLightMarker] = []
    
    #if canImport(UIKit)
    @Published var pickerImage: UIImage? = nil
    #endif
    
    // MARK: - Computed Properties
    
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏ –æ–¥–Ω—É –ª–∞–º–ø—É –∏–ª–∏ –∫–æ–º–Ω–∞—Ç—É
    var isTargetingSingleLight: Bool {
        return NavigationManager.shared.targetLightForColorChange != nil
    }
    
    // MARK: - Initialization
    
    init() {
        setupWarmColdLamps()
        setupPalletColors()
        setupRoomLightMarkers()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        #if canImport(UIKit)
        pickerImage = UIImage(named: "ColorCircl")
        #endif
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–µ–≤–æ–π –ª–∞–º–ø—ã
        initializeWithSavedState()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        updateSelectedColorFromCurrentPosition()
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç ViewModel —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–µ–≤–æ–π –ª–∞–º–ø—ã
    private func initializeWithSavedState() {
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ª–∞–º–ø—É –∏–∑ NavigationManager
        let targetLightId: String?
        
        if let targetLight = NavigationManager.shared.targetLightForColorChange {
            targetLightId = targetLight.id
        } else if let targetRoom = NavigationManager.shared.targetRoomForColorChange {
            // –î–ª—è –∫–æ–º–Ω–∞—Ç—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ª–∞–º–ø—É –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—É—é
            targetLightId = targetRoom.lightIds.first
        } else {
            targetLightId = nil
        }
        
        guard let lightId = targetLightId else { return }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è hex picker
        if let savedColor = LightColorStateService.shared.getLightColor(lightId) {
            selectedColor = savedColor
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç –¥–ª—è –ª–∞–º–ø—ã \(lightId)")
        }
        
        if let savedPosition = LightColorStateService.shared.getColorPickerPosition(lightId) {
            selectedColorRelativePosition = savedPosition
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è color picker –¥–ª—è –ª–∞–º–ø—ã \(lightId)")
        }
        
        // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ warm/cold –ø–æ–∑–∏—Ü–∏–∏
        restoreWarmColdPosition(for: lightId)
    }
    
    /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —É–∫–∞–∑–∞—Ç–µ–ª—è –≤ warm/cold —Ä–µ–∂–∏–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞ –ª–∞–º–ø—ã
    private func restoreWarmColdPosition(for lightId: String) {
        let currentColor: Color
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç –ª–∞–º–ø—ã (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –∏–∑ –ª–∞–º–ø—ã)
        if let savedColor = LightColorStateService.shared.getLightColor(lightId) {
            currentColor = savedColor
            warmColdSelectedColor = savedColor
        } else {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –ª–∞–º–ø—ã –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
            let targetLight: Light?
            
            if let light = NavigationManager.shared.targetLightForColorChange {
                targetLight = light
            } else if let room = NavigationManager.shared.targetRoomForColorChange,
                      let firstLightId = room.lightIds.first {
                // –î–ª—è –∫–æ–º–Ω–∞—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç –ª–∞–º–ø—ã –ø–æ ID
                // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ü–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É –ª–∞–º–ø—ã –ø–æ ID
                targetLight = nil
            } else {
                targetLight = nil
            }
            
            if let light = targetLight {
                let baseColor = LightColorStateService.shared.getBaseColor(for: light)
                currentColor = baseColor
                warmColdSelectedColor = baseColor
            } else {
                // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–µ–ª—ã–π
                currentColor = Color(red: 1.0, green: 0.9, blue: 0.8)
                warmColdSelectedColor = currentColor
                warmColdRelativePosition = CGPoint(x: 0.5, y: 0.5)
                return
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç —Ç–µ–ø–ª—ã–º/—Ö–æ–ª–æ–¥–Ω—ã–º (–±–ª–∏–∑–∫–∏–º –∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —à–∫–∞–ª–µ)
        if let temperatureRatio = analyzeColorTemperature(currentColor) {
            // ‚úÖ –¶–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–ø–ª—ã–º/—Ö–æ–ª–æ–¥–Ω—ã–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            warmColdRelativePosition = CGPoint(x: temperatureRatio, y: 0.5)
            print("üå°Ô∏è –¶–≤–µ—Ç –ª–∞–º–ø—ã —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º, –ø–æ–∑–∏—Ü–∏—è: \(temperatureRatio)")
        } else {
            // ‚úÖ –¶–≤–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π (–∑–µ–ª–µ–Ω—ã–π, —Å–∏–Ω–∏–π –∏ —Ç.–¥.) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ
            warmColdRelativePosition = CGPoint(x: 0.5, y: 0.5)
            print("üé® –¶–≤–µ—Ç –ª–∞–º–ø—ã —Ü–≤–µ—Ç–Ω–æ–π, —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ")
        }
    }
    
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Ç–µ–ø–ª—ã–º/—Ö–æ–ª–æ–¥–Ω—ã–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —à–∫–∞–ª–µ)
    /// - Parameter color: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ü–≤–µ—Ç
    /// - Returns: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (0.0 = —Ç–µ–ø–ª—ã–π, 1.0 = —Ö–æ–ª–æ–¥–Ω—ã–π) –∏–ª–∏ nil –µ—Å–ª–∏ —Ü–≤–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π
    private func analyzeColorTemperature(_ color: Color) -> Double? {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Color –≤ RGB –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        #if canImport(UIKit)
        let uiColor = UIColor(color)
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0
        
        guard uiColor.getRed(&red, green: &green, blue: &blue, alpha: &alpha) else {
            return nil
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç –±–ª–∏–∑–∫–∏–º –∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —à–∫–∞–ª–µ
        // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–º–µ—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
        // - –¢–µ–ø–ª—ã–µ: –±–æ–ª—å—à–µ –∫—Ä–∞—Å–Ω–æ–≥–æ, –º–µ–Ω—å—à–µ —Å–∏–Ω–µ–≥–æ
        // - –•–æ–ª–æ–¥–Ω—ã–µ: –±–æ–ª—å—à–µ —Å–∏–Ω–µ–≥–æ, –º–µ–Ω—å—à–µ –∫—Ä–∞—Å–Ω–æ–≥–æ
        // - –ó–µ–ª–µ–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É –∫—Ä–∞—Å–Ω–æ–π –∏ —Å–∏–Ω–µ–π
        
        let redValue = Double(red)
        let greenValue = Double(green)
        let blueValue = Double(blue)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏–ª—å–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
        let maxComponent = max(redValue, greenValue, blueValue)
        let minComponent = min(redValue, greenValue, blueValue)
        let saturation = (maxComponent - minComponent) / maxComponent
        
        // –ï—Å–ª–∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è, —ç—Ç–æ —Ü–≤–µ—Ç–Ω–æ–π —Ü–≤–µ—Ç
        if saturation > 0.3 {
            return nil
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏–Ω–µ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        let temperatureRatio = blueValue / (redValue + 0.001) // –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —à–∫–∞–ª–µ (0.0 = —Ç–µ–ø–ª—ã–π, 1.0 = —Ö–æ–ª–æ–¥–Ω—ã–π)
        let normalizedRatio = min(max((temperatureRatio - 0.7) / (1.3 - 0.7), 0.0), 1.0)
        
        return normalizedRatio
        #else
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ü–µ–Ω—Ç—Ä)
        return nil
        #endif
    }
    
    // MARK: - Public Methods
    
    func selectTab(_ tab: ColorPickerTab) {
        selectedTab = tab
        
        // ‚úÖ –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ warm/cold —Ç–∞–± - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É–∫–∞–∑–∞—Ç–µ–ª—è
        if tab == .warmCold {
            updateWarmColdPositionForCurrentLamp()
        }
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é warm/cold —É–∫–∞–∑–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–∞–º–ø—ã
    private func updateWarmColdPositionForCurrentLamp() {
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ª–∞–º–ø—É –∏–∑ NavigationManager
        let targetLightId: String?
        
        if let targetLight = NavigationManager.shared.targetLightForColorChange {
            targetLightId = targetLight.id
        } else if let targetRoom = NavigationManager.shared.targetRoomForColorChange {
            // –î–ª—è –∫–æ–º–Ω–∞—Ç—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ª–∞–º–ø—É –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—É—é
            targetLightId = targetRoom.lightIds.first
        } else {
            return
        }
        
        guard let lightId = targetLightId else { return }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –ª–∞–º–ø—ã
        restoreWarmColdPosition(for: lightId)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    func getMarkerPosition(in containerSize: CGSize, imageSize: CGSize) -> CGPoint {
        let centerX = containerSize.width / 2
        let centerY = containerSize.height / 2
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        let offsetX = (selectedColorRelativePosition.x - 0.5) * imageSize.width
        let offsetY = (selectedColorRelativePosition.y - 0.5) * imageSize.height
        
        return CGPoint(
            x: centerX + offsetX,
            y: centerY + offsetY
        )
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è warm/cold –∫—Ä—É–≥–∞
    func getWarmColdMarkerPosition(in containerSize: CGSize, circleSize: CGSize) -> CGPoint {
        let centerX = containerSize.width / 2
        let centerY = containerSize.height / 2
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç warm/cold
        let offsetX = (warmColdRelativePosition.x - 0.5) * circleSize.width
        let offsetY = (warmColdRelativePosition.y - 0.5) * circleSize.height
        
        return CGPoint(
            x: centerX + offsetX,
            y: centerY + offsetY
        )
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É —Ü–µ–ª–µ–≤–æ–π –ª–∞–º–ø—ã
    func getTargetLightIcon() -> String {
        if let targetLight = NavigationManager.shared.targetLightForColorChange {
            return targetLight.metadata.userSubtypeIcon ?? "BulbFill"
        } else if let targetRoom = NavigationManager.shared.targetRoomForColorChange,
                  let firstLightId = targetRoom.lightIds.first {
            // –ò—â–µ–º –ø–µ—Ä–≤—É—é –ª–∞–º–ø—É –≤ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            if let appViewModel = NavigationManager.shared.dataPersistenceService?.appViewModel {
                let firstLight = appViewModel.lightsViewModel.lights.first { $0.id == firstLightId }
                return firstLight?.metadata.userSubtypeIcon ?? "BulbFill"
            }
        }
        return "BulbFill"
    }
    
    func handleColorSelection(at location: CGPoint, in containerSize: CGSize, imageSize: CGSize) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let centerX = containerSize.width / 2
        let centerY = containerSize.height / 2
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        let offsetX = location.x - centerX
        let offsetY = location.y - centerY
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫—Ä—É–≥–∞
        let radius = imageSize.width / 2
        let distance = sqrt(offsetX * offsetX + offsetY * offsetY)
        
        guard distance <= radius else { return }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ—Ç 0 –¥–æ 1)
        selectedColorRelativePosition = CGPoint(
            x: 0.5 + offsetX / imageSize.width,
            y: 0.5 + offsetY / imageSize.height
        )
        
        #if canImport(UIKit)
        if let image = pickerImage {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            let imageX = (offsetX / radius + 1.0) * 0.5
            let imageY = (offsetY / radius + 1.0) * 0.5
            
            if let pixelColor = image.getPixelColorNormalized(at: CGPoint(x: imageX, y: imageY)) {
                var red: CGFloat = 0
                var green: CGFloat = 0
                var blue: CGFloat = 0
                var alpha: CGFloat = 0
                
                pixelColor.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
                selectedColor = Color(red: Double(red), green: Double(green), blue: Double(blue), opacity: Double(alpha))
                
                // ‚úÖ –ñ–ò–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –ª–∞–º–ø–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–∏
                Task {
                    await applyLiveColorUpdate(selectedColor)
                }
                return
            }
        }
        #endif
        
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - HSV —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–ª–µ—Å–æ
        let angle = atan2(offsetY, offsetX)
        let hue = (angle + .pi) / (2 * .pi)
        let adjustedHue = (hue + 0.75) > 1.0 ? hue - 0.25 : hue + 0.75
        let saturation = min(distance / radius, 1.0)
        
        selectedColor = Color(hue: Double(adjustedHue), saturation: Double(saturation), brightness: 1.0)
        
        // ‚úÖ –ñ–ò–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –ª–∞–º–ø–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–∏
        Task {
            await applyLiveColorUpdate(selectedColor)
        }
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –≤ warm/cold –∫—Ä—É–≥–µ
    func handleWarmColdColorSelection(at location: CGPoint, in containerSize: CGSize, circleSize: CGSize) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let centerX = containerSize.width / 2
        let centerY = containerSize.height / 2
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        let offsetX = location.x - centerX
        let offsetY = location.y - centerY
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫—Ä—É–≥–∞
        let radius = circleSize.width / 2
        let distance = sqrt(offsetX * offsetX + offsetY * offsetY)
        
        guard distance <= radius else { return }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ—Ç 0 –¥–æ 1) –¥–ª—è warm/cold
        warmColdRelativePosition = CGPoint(
            x: 0.5 + offsetX / circleSize.width,
            y: 0.5 + offsetY / circleSize.height
        )
        
        // –í—ã—á–∏—Å–ª—è–µ–º color temperature –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (X)
        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ = —Ç–µ–ø–ª—ã–π (2700K), –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ = —Ö–æ–ª–æ–¥–Ω—ã–π (6500K)
        let temperatureRatio = warmColdRelativePosition.x // 0.0 = —Ç–µ–ø–ª—ã–π, 1.0 = —Ö–æ–ª–æ–¥–Ω—ã–π
        
        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É —Ç–µ–ø–ª—ã–º –∏ —Ö–æ–ª–æ–¥–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        let warmColor = Color(red: 1.0, green: 0.7, blue: 0.4) // 2700K
        let neutralColor = Color(red: 1.0, green: 0.9, blue: 0.8) // 4000K
        let coolColor = Color(red: 0.8, green: 0.9, blue: 1.0) // 6500K
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        if temperatureRatio <= 0.5 {
            // –ú–µ–∂–¥—É —Ç–µ–ø–ª—ã–º –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º
            let ratio = temperatureRatio * 2.0
            warmColdSelectedColor = interpolateColor(from: warmColor, to: neutralColor, ratio: ratio)
        } else {
            // –ú–µ–∂–¥—É –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º –∏ —Ö–æ–ª–æ–¥–Ω—ã–º
            let ratio = (temperatureRatio - 0.5) * 2.0
            warmColdSelectedColor = interpolateColor(from: neutralColor, to: coolColor, ratio: ratio)
        }
        
        print("üå°Ô∏è Warm/Cold temperature ratio: \(temperatureRatio), color: \(warmColdSelectedColor)")
        
        // ‚úÖ –ñ–ò–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –ª–∞–º–ø–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–∏
        Task {
            await applyLiveColorUpdate(warmColdSelectedColor)
        }
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫ –ª–∞–º–ø–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    @MainActor
    private func applyLiveColorUpdate(_ color: Color) async {
        do {
            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å AppViewModel –Ω–∞–ø—Ä—è–º—É—é
            guard let appViewModel = NavigationManager.shared.dataPersistenceService?.appViewModel else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å AppViewModel –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return
            }
            
            let lightControlService = LightControlService(appViewModel: appViewModel)
            let updatedService = LightingColorService(
                lightControlService: lightControlService,
                appViewModel: appViewModel
            )
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Ü–µ–ª–µ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ LightColorStateService
            if let targetLight = NavigationManager.shared.targetLightForColorChange {
                try await updatedService.setColor(for: targetLight, color: color)
                print("üé® –ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ª–∞–º–ø—ã '\(targetLight.metadata.name)'")
                
            } else if let targetRoom = NavigationManager.shared.targetRoomForColorChange {
                try await updatedService.setColor(for: targetRoom, color: color)
                print("üé® –ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã '\(targetRoom.name)'")
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∂–∏–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞: \(error.localizedDescription)")
        }
    }
    
    /// –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏
    private func interpolateColor(from: Color, to: Color, ratio: Double) -> Color {
        #if canImport(UIKit)
        let fromUIColor = UIColor(from)
        let toUIColor = UIColor(to)
        
        var fromRed: CGFloat = 0, fromGreen: CGFloat = 0, fromBlue: CGFloat = 0, fromAlpha: CGFloat = 0
        var toRed: CGFloat = 0, toGreen: CGFloat = 0, toBlue: CGFloat = 0, toAlpha: CGFloat = 0
        
        fromUIColor.getRed(&fromRed, green: &fromGreen, blue: &fromBlue, alpha: &fromAlpha)
        toUIColor.getRed(&toRed, green: &toGreen, blue: &toBlue, alpha: &toAlpha)
        
        let r = fromRed + (toRed - fromRed) * ratio
        let g = fromGreen + (toGreen - fromGreen) * ratio
        let b = fromBlue + (toBlue - fromBlue) * ratio
        let a = fromAlpha + (toAlpha - fromAlpha) * ratio
        
        return Color(red: Double(r), green: Double(g), blue: Double(b), opacity: Double(a))
        #else
        // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        return ratio < 0.5 ? from : to
        #endif
    }
    
    func selectWarmColdLamp(_ lampId: String) {
        for index in warmColdLamps.indices {
            warmColdLamps[index].isSelected = warmColdLamps[index].id == lampId
        }
    }
    
    func selectPalletColor(_ colorId: String) {
        for index in palletColors.indices {
            palletColors[index].isSelected = palletColors[index].id == colorId
        }
        selectedPalletColorItem = palletColors.first { $0.id == colorId }
        
        // ‚úÖ –ñ–ò–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –ª–∞–º–ø–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
        if let selectedItem = selectedPalletColorItem {
            Task {
                await applyLiveColorUpdate(selectedItem.color)
            }
        }
    }
    
    func saveColorSettings() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–∞–º–ø
        print("Saving color settings for tab: \(selectedTab)")
    }
    
    // MARK: - Private Methods
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç selectedColor –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
    private func updateSelectedColorFromCurrentPosition() {
        #if canImport(UIKit)
        guard let image = pickerImage else {
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º HSV —Ä–∞—Å—á–µ—Ç
            updateColorUsingHSV()
            return
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let imageSize = CGSize(width: 320, height: 320)
        let centerX = imageSize.width / 2
        let centerY = imageSize.height / 2
        
        let offsetX = (selectedColorRelativePosition.x - 0.5) * imageSize.width
        let offsetY = (selectedColorRelativePosition.y - 0.5) * imageSize.height
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ—á–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫—Ä—É–≥–∞
        let radius = imageSize.width / 2
        let distance = sqrt(offsetX * offsetX + offsetY * offsetY)
        
        if distance <= radius {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            let imageX = (offsetX / radius + 1.0) * 0.5
            let imageY = (offsetY / radius + 1.0) * 0.5
            
            if let pixelColor = image.getPixelColorNormalized(at: CGPoint(x: imageX, y: imageY)) {
                var red: CGFloat = 0
                var green: CGFloat = 0
                var blue: CGFloat = 0
                var alpha: CGFloat = 0
                
                pixelColor.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
                selectedColor = Color(red: Double(red), green: Double(green), blue: Double(blue), opacity: Double(alpha))
                return
            }
        }
        #endif
        
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - HSV —Ä–∞—Å—á–µ—Ç
        updateColorUsingHSV()
    }
    
    /// –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ HSV —Ä–∞—Å—á–µ—Ç
    private func updateColorUsingHSV() {
        let imageSize = CGSize(width: 320, height: 320)
        let offsetX = (selectedColorRelativePosition.x - 0.5) * imageSize.width
        let offsetY = (selectedColorRelativePosition.y - 0.5) * imageSize.height
        
        let radius = imageSize.width / 2
        let distance = sqrt(offsetX * offsetX + offsetY * offsetY)
        
        guard distance <= radius else { return }
        
        let angle = atan2(offsetY, offsetX)
        let hue = (angle + .pi) / (2 * .pi)
        let adjustedHue = (hue + 0.75) > 1.0 ? hue - 0.25 : hue + 0.75
        let saturation = min(distance / radius, 1.0)
        
        selectedColor = Color(hue: Double(adjustedHue), saturation: Double(saturation), brightness: 1.0)
    }

    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –ª–∞–º–ø –¥–ª—è warm/cold —Ä–µ–∂–∏–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–Ω–∞—Ç)
    private func setupWarmColdLamps() {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–¥–Ω—É –ª–∞–º–ø—É, –Ω–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        guard !isTargetingSingleLight else {
            warmColdLamps = []
            return
        }
        
        // –î–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
        guard let targetRoom = NavigationManager.shared.targetRoomForColorChange,
              let appViewModel = NavigationManager.shared.dataPersistenceService?.appViewModel else {
            warmColdLamps = []
            return
        }
        
        let roomLights = appViewModel.lightsViewModel.lights.filter { light in
            targetRoom.lightIds.contains(light.id)
        }
        
        var lamps: [WarmColdLamp] = []
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ª–∞–º–ø –ø–æ –∫—Ä—É–≥—É
        let positions = generateCirclePositions(count: roomLights.count, radius: 120, center: CGPoint(x: 160, y: 160))
        
        for (index, light) in roomLights.enumerated() {
            let position = positions[safe: index] ?? CGPoint(x: 160, y: 160)
            
            lamps.append(WarmColdLamp(
                id: light.id,
                position: position,
                iconName: light.metadata.userSubtypeIcon ?? "BulbFill",
                color: LightColorStateService.shared.getBaseColor(for: light),
                isSelected: index == 0 // –ü–µ—Ä–≤–∞—è –ª–∞–º–ø–∞ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            ))
        }
        
        warmColdLamps = lamps
    }
    
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –ª–∞–º–ø –¥–ª—è hex picker —Ä–µ–∂–∏–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–Ω–∞—Ç)
    private func setupRoomLightMarkers() {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–¥–Ω—É –ª–∞–º–ø—É, –Ω–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        guard !isTargetingSingleLight else {
            roomLightMarkers = []
            return
        }
        
        // –î–ª—è –∫–æ–º–Ω–∞—Ç—ã —Å–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
        guard let targetRoom = NavigationManager.shared.targetRoomForColorChange,
              let appViewModel = NavigationManager.shared.dataPersistenceService?.appViewModel else {
            roomLightMarkers = []
            return
        }
        
        let roomLights = appViewModel.lightsViewModel.lights.filter { light in
            targetRoom.lightIds.contains(light.id)
        }
        
        var markers: [RoomLightMarker] = []
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ª–∞–º–ø –ø–æ –∫—Ä—É–≥—É
        let positions = generateCirclePositions(count: roomLights.count, radius: 120, center: CGPoint(x: 160, y: 160))
        
        for (index, light) in roomLights.enumerated() {
            let position = positions[safe: index] ?? CGPoint(x: 160, y: 160)
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π
            let lightColor = LightColorStateService.shared.getLightColor(light.id) ??
                            LightColorStateService.shared.getBaseColor(for: light)
            
            markers.append(RoomLightMarker(
                id: light.id,
                position: position,
                iconName: light.metadata.userSubtypeIcon ?? "BulbFill",
                color: lightColor
            ))
        }
        
        roomLightMarkers = markers
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫—Ä—É–≥—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ª–∞–º–ø
    private func generateCirclePositions(count: Int, radius: Double, center: CGPoint) -> [CGPoint] {
        guard count > 0 else { return [] }
        
        if count == 1 {
            return [center]
        }
        
        var positions: [CGPoint] = []
        let angleStep = 2 * Double.pi / Double(count)
        
        for i in 0..<count {
            let angle = Double(i) * angleStep - Double.pi / 2 // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
            let x = center.x + radius * cos(angle)
            let y = center.y + radius * sin(angle)
            positions.append(CGPoint(x: x, y: y))
        }
        
        return positions
    }
    
    private func setupPalletColors() {
        // –¢–æ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ Figma (16 —Ä—è–¥–æ–≤ –ø–æ 9 —Ü–≤–µ—Ç–æ–≤)
        let figmaColors: [String] = [
            // –†—è–¥ 1 - –ö—Ä–∞—Å–Ω—ã–µ —Ç–æ–Ω–∞
            "#991B1B", "#B91C1C", "#DC2626", "#EF4444", "#F87171", "#FCA5A5", "#FECACA", "#FEE2E2", "#FEF2F2",
            // –†—è–¥ 2 - –û—Ä–∞–Ω–∂–µ–≤—ã–µ —Ç–æ–Ω–∞
            "#9A3412", "#C2410C", "#EA580C", "#F97316", "#FB923C", "#FDBA74", "#FED7AA", "#FFEDD5", "#FFF7ED",
            // –†—è–¥ 3 - –Ø–Ω—Ç–∞—Ä–Ω—ã–µ —Ç–æ–Ω–∞
            "#92400E", "#B45309", "#D97706", "#F59E0B", "#FBBF24", "#FCD34D", "#FDE68A", "#FEF3C7", "#FFFBEB",
            // –†—è–¥ 4 - –ñ–µ–ª—Ç—ã–µ —Ç–æ–Ω–∞
            "#854D0E", "#A16207", "#CA8A04", "#EAB308", "#FACC15", "#FDE047", "#FEF08A", "#FEF9C3", "#FEFCE8",
            // –†—è–¥ 5 - –õ–∞–π–º–æ–≤—ã–µ —Ç–æ–Ω–∞
            "#3F6212", "#4D7C0F", "#65A30D", "#84CC16", "#A3E635", "#BEF264", "#D9F99D", "#ECFCCB", "#F7FEE7",
            // –†—è–¥ 6 - –ó–µ–ª–µ–Ω—ã–µ —Ç–æ–Ω–∞
            "#166534", "#15803D", "#16A34A", "#22C55E", "#4ADE80", "#86EFAC", "#BBF7D0", "#DCFCE7", "#F0FDF4",
            // –†—è–¥ 7 - –ò–∑—É–º—Ä—É–¥–Ω—ã–µ —Ç–æ–Ω–∞
            "#065F46", "#047857", "#059669", "#10B981", "#34D399", "#6EE7B7", "#A7F3D0", "#D1FAE5", "#ECFDF5",
            // –†—è–¥ 8 - –ë–∏—Ä—é–∑–æ–≤—ã–µ —Ç–æ–Ω–∞
            "#115E59", "#0F766E", "#0D9488", "#14B8A6", "#2DD4BF", "#5EEAD4", "#99F6E4", "#CCFBF1", "#F0FDFA",
            // –†—è–¥ 9 - –ì–æ–ª—É–±—ã–µ —Ç–æ–Ω–∞
            "#155E75", "#0E7490", "#0891B2", "#06B6D4", "#22D3EE", "#67E8F9", "#A5F3FC", "#CFFAFE", "#ECFEFF",
            // –†—è–¥ 10 - –°–∏–Ω–∏–µ —Ç–æ–Ω–∞
            "#075985", "#0369A1", "#0284C7", "#0EA5E9", "#38BDF8", "#7DD3FC", "#BAE6FD", "#E0F2FE", "#F0F9FF",
            // –†—è–¥ 11 - –ò–Ω–¥–∏–≥–æ —Ç–æ–Ω–∞
            "#1E40AF", "#1D4ED8", "#2563EB", "#3B82F6", "#60A5FA", "#93C5FD", "#BFDBFE", "#DBEAFE", "#EFF6FF",
            // –†—è–¥ 12 - –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ —Ç–æ–Ω–∞
            "#3730A3", "#4338CA", "#4F46E5", "#6366F1", "#818CF8", "#A5B4FC", "#C7D2FE", "#E0E7FF", "#EEF2FF",
            // –†—è–¥ 13 - –ü—É—Ä–ø—É—Ä–Ω—ã–µ —Ç–æ–Ω–∞
            "#5B21B6", "#6D28D9", "#7C3AED", "#8B5CF6", "#A78BFA", "#C4B5FD", "#DDD6FE", "#EDE9FE", "#F5F3FF",
            // –†—è–¥ 14 - –§—É–∫—Å–∏—è —Ç–æ–Ω–∞
            "#6B21A8", "#7E22CE", "#9333EA", "#A855F7", "#C084FC", "#D8B4FE", "#E9D5FF", "#F3E8FF", "#FAF5FF",
            // –†—è–¥ 15 - –†–æ–∑–æ–≤—ã–µ —Ç–æ–Ω–∞
            "#86198F", "#A21CAF", "#C026D3", "#D946EF", "#E879F9", "#F0ABFC", "#F5D0FE", "#FAE8FF", "#FDF4FF",
            // –†—è–¥ 16 - –ê–ª—ã–µ —Ç–æ–Ω–∞
            "#9D174D", "#BE185D", "#DB2777", "#EC4899", "#F472B6", "#F9A8D4", "#FBCFE8", "#FCE7F3", "#FDF2F8",
            // –†—è–¥ 17 - –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥
            "#9F1239", "#BE123C", "#E11D48", "#F43F5E", "#FB7185", "#FDA4AF", "#FECDD3", "#FFE4E6", "#FFF1F2",
        ]
        
        var colors: [PalletColorItem] = []
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–ª–∏—Ç—Ä—ã
        for (index, hexColor) in figmaColors.enumerated() {
            let row = index / 9
            let col = index % 9
            
            colors.append(PalletColorItem(
                id: "figma_color_\(row)_\(col)",
                color: Color(hex: hexColor),
                isSelected: row == 1 && col == 3 // –í—ã–±–∏—Ä–∞–µ–º –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            ))
        }
        
        palletColors = colors
        selectedPalletColorItem = colors.first { $0.isSelected }
    }
}