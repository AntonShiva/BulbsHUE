//
//  MenuView.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/13/25.
//

import SwiftUI
import Combine

/// –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª–∞–º–ø—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
/// –¢–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π –Ω–∞–¥ UniversalMenuView –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
struct MenuView: View {
    let bulbName: String
    /// –¢–∏–ø –ª–∞–º–ø—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ–¥—Ç–∏–ø)
    let bulbType: String
   /// –ò–∫–æ–Ω–∫–∞ –ª–∞–º–ø—ã
    let bulbIcon: String
    /// –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ñ–æ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    let baseColor: Color
    
    /// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ Combine
    private static var cancellables = Set<AnyCancellable>()
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ª–∞–º–ø—ã
    /// - Parameters:
    ///   - bulbName: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–º–ø—ã
    ///   - bulbIcon: –ò–∫–æ–Ω–∫–∞ –ª–∞–º–ø—ã
    ///   - bulbType: –¢–∏–ø –ª–∞–º–ø—ã
    ///   - baseColor: –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    init(bulbName: String,
         bulbIcon: String,
         bulbType: String,
         baseColor: Color = .purple) {
        self.bulbName = bulbName
        self.bulbIcon = bulbIcon
        self.bulbType = bulbType
        self.baseColor = baseColor
    }
    
    var body: some View {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –ª–∞–º–ø—ã
        UniversalMenuView(
            itemData: .bulb(
                title: bulbName,
                subtitle: bulbType,
                icon: bulbIcon,
                baseColor: baseColor,
                bottomText: "no room"
            ),
            menuConfig: .forBulb(
                icon: bulbIcon,
                onChangeType: {
                    print("üîÑ Change bulb type pressed")
                    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–º–µ–Ω—É —Ç–∏–ø–∞ –ª–∞–º–ø—ã
                },
                onTypeChanged: { typeName, iconName in
                    print("‚úÖ Bulb type changed to: \(typeName), icon: \(iconName)")
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∞–º–ø—É –∏–∑ NavigationManager
                    guard let currentLight = NavigationManager.shared.selectedLightForMenu else {
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∞–º–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞")
                        return
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UpdateLightTypeUseCase –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    let updateUseCase = DIContainer.shared.updateLightTypeUseCase
                    let input = UpdateLightTypeUseCase.Input(
                        lightId: currentLight.id,
                        userSubtypeName: typeName,
                        userSubtypeIcon: iconName
                    )
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Combine
                    updateUseCase.execute(input)
                        .receive(on: DispatchQueue.main)
                        .sink(
                            receiveCompletion: { completion in
                                switch completion {
                                case .finished:
                                    print("‚úÖ –¢–∏–ø –ª–∞–º–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: \(typeName)")
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º selectedLightForMenu —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                    var updatedLight = currentLight
                                    updatedLight.metadata.userSubtypeName = typeName
                                    updatedLight.metadata.userSubtypeIcon = iconName
                                    NavigationManager.shared.selectedLightForMenu = updatedLight
                                    
                                case .failure(let error):
                                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ª–∞–º–ø—ã: \(error.localizedDescription)")
                                }
                            },
                            receiveValue: { _ in
                                // –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                            }
                        )
                        .store(in: &Self.cancellables)
                },
                onRename: { newName in
                    print("‚úèÔ∏è Rename bulb to: \(newName)")
                    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ UniversalMenuView —á–µ—Ä–µ–∑ Use Cases
                },
                onReorganize: {
                    print("üìã Reorganize bulb pressed")
                    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ª–∞–º–ø—ã
                },
                onDelete: {
                    print("üóëÔ∏è Delete bulb pressed")
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∞–º–ø—É –∏–∑ NavigationManager
                    guard let currentLight = NavigationManager.shared.selectedLightForMenu else {
                        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∞–º–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                        return
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DeleteLightUseCase –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–º–ø—ã
                    let deleteLightUseCase = DIContainer.shared.deleteLightUseCase
                    let input = DeleteLightUseCase.Input(
                        lightId: currentLight.id,
                        roomId: nil // nil –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Environment
                    )
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Combine
                    deleteLightUseCase.execute(input)
                        .receive(on: DispatchQueue.main)
                        .sink(
                            receiveCompletion: { completion in
                                switch completion {
                                case .finished:
                                    print("‚úÖ –õ–∞–º–ø–∞ '\(currentLight.metadata.name)' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Environment")
                                    
                                    // –û—á–∏—â–∞–µ–º selectedLightForMenu
                                    NavigationManager.shared.selectedLightForMenu = nil
                                    
                                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
                                    NavigationManager.shared.hideMenuView()
                                    
                                case .failure(let error):
                                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–º–ø—ã: \(error.localizedDescription)")
                                }
                            },
                            receiveValue: { _ in
                                // –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                            }
                        )
                        .store(in: &Self.cancellables)
                }
            )
        )
    }
}
#Preview {
    MenuView(bulbName: "–õ–∞–º–æ—á–∫–∞ —É–ª", bulbIcon: "f2", bulbType: "–õ—â–¥–∂–∏—è")
        .environment(NavigationManager.shared)
        .compare(with: URL(string: "https://www.figma.com/design/9yYMU69BSxasCD4lBnOtet/Bulbs_HUE--Copy-?node-id=120-879&t=aTBbxHC3igKeQH3e-4")!)
        .environment(\.figmaAccessToken, "figd_0tuspWW6vlV9tTm5dGXG002n2yoohRRd94dMxbXD")
       
}
#Preview {
    MenuView(bulbName: "bulb name", bulbIcon: "t1", bulbType: "–õ—â–¥–∂–∏—è")
        .environment(NavigationManager.shared)
}



