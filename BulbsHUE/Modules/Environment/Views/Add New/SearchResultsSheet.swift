//
//  SearchResultsSheet.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 04.08.2025.
//

import SwiftUI
import Combine

struct SearchResultsSheet: View {
    @Environment(NavigationManager.self) private var nav
    @Environment(AppViewModel.self) private var appViewModel
    
    var lightsViewModel: LightsViewModel {
        appViewModel.lightsViewModel
    }
    
    var body: some View {
        ZStack {
            UnevenRoundedRectangle(
                topLeadingRadius: 35,
                bottomLeadingRadius: 0,
                bottomTrailingRadius: 0,
                topTrailingRadius: 35
            )
            .fill(Color(red: 0.02, green: 0.09, blue: 0.13))
            .adaptiveFrame(width: 375, height: 342)
            
            Text("search results")
                .font(Font.custom("DMSans-Light", size: 14))
                .kerning(2.8)
                .multilineTextAlignment(.center)
                .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
                .textCase(.uppercase)
                .adaptiveOffset(y: -130)

            ScrollView {
                LazyVStack {
                                   if nav.searchType == .serialNumber && !lightsViewModel.lights.isEmpty {
                        // –ò–ù–°–¢–†–£–ö–¶–ò–Ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        VStack {
                            Text("Find your lamp by tapping each one.\nThe right lamp will respond.")
                                .font(Font.custom("DMSans-Light", size: 11))
                                .multilineTextAlignment(.center)
                                .foregroundColor(Color(red: 0.79, green: 1, blue: 1).opacity(0.8))
                        }
                        
                        .padding(.bottom, 5)
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
                        ForEach(getLightsToShow()) { light in
                            LightResultCell(
                                light: light,
                                onTap: {
                                    // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ª–∞–º–ø–∞ –º–∏–≥–∞–µ—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                                    _ = appViewModel.apiClient.identifyLight(id: light.id)
                                        .sink(
                                            receiveCompletion: { _ in },
                                            receiveValue: { success in
                                                if success {
                                                    print("üí° –õ–∞–º–ø–∞ \(light.metadata.name) –º–∏–≥–Ω—É–ª–∞")
                                                }
                                            }
                                        )
                                    
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                                    if let serialNumber = nav.enteredSerialNumber {
                                        appViewModel.apiClient.confirmLightSelection(light, forSerialNumber: serialNumber)
                                    }
                                    
                                    nav.selectedLight = light
                                    nav.showCategoriesSelection(for: light)
                                }
                            )
                        }
                        
                    } else if nav.searchType == .serialNumber && !lightsViewModel.isLoading {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –ª–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                        VStack(spacing: 16) {
                            if let error = lightsViewModel.error {
                                Text("lamp not found")
                                    .font(Font.custom("DMSans-Light", size: 16))
                                    .kerning(2.4)
                                    .foregroundColor(Color.red)
                                    .textCase(.uppercase)
                                
                                Text(error.localizedDescription)
                                    .font(Font.custom("DMSans-Light", size: 10))
                                    .kerning(1.0)
                                    .lineSpacing(2)
                                    .multilineTextAlignment(.center)
                                    .foregroundColor(Color.red)
                                    .opacity(0.8)
                            }
                        }
                        .padding(.top, 40)
                        
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        ForEach(getLightsToShow()) { light in
                            LightResultCell(
                                light: light,
                                onTap: {
                                    nav.selectedLight = light
                                    nav.showCategoriesSelection(for: light)
                                }
                            )
                        }
                    }
                }
                .padding()
            }
            .adaptiveOffset(y: 285)
        }
      
        .refreshable {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ pull-to-refresh
            print("üîÑ SearchResultsSheet: Pull-to-refresh")
            await lightsViewModel.refreshLightsWithStatus()
        }
    }
    
    // MARK: - Helper Functions
    private func getLightsToShow() -> [Light] {
        let lights: [Light]
        
        switch nav.searchType {
        case .network:
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            if !lightsViewModel.networkFoundLights.isEmpty {
                lights = lightsViewModel.networkFoundLights
            } else if !lightsViewModel.lights.isEmpty {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–º–ø—ã
                print("üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–º–ø—ã: \(lightsViewModel.lights.count)")
                lights = lightsViewModel.lights
            } else {
                // –§–æ–ª–ª–±–µ–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∞–º–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –Ω–æ–≤—ã–µ
                lights = lightsViewModel.lights.filter { $0.isNewLight }
            }
            
        case .serialNumber:
            // –î–ª—è serial search –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–º–ø—ã
            print("üìã Serial search: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞: \(lightsViewModel.lights.count)")
            lights = lightsViewModel.lights
        }
        
        // üîå –°–û–†–¢–ò–†–û–í–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫ —ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–∏, –ø–æ—Ç–æ–º –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ
        return lights.sorted { first, second in
            // –°–Ω–∞—á–∞–ª–∞ –∏–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ª–∞–º–ø—ã (isReachable = true)
            if first.isReachable && !second.isReachable {
                return true  // first (–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–∞—è) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ
            } else if !first.isReachable && second.isReachable {
                return false // second (–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–∞—è) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ
            } else {
                // –ï—Å–ª–∏ –æ–±–µ –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
                return first.metadata.name.localizedCaseInsensitiveCompare(second.metadata.name) == .orderedAscending
            }
        }
    }
}

#Preview {
    SearchResultsSheet()
        .environment(NavigationManager.shared)
        .environment(AppViewModel())
        .compare(with: URL(string: "https://www.figma.com/design/9yYMU69BSxasCD4lBnOtet/Bulbs_HUE--Copy-?node-id=2010-2&t=N7aN39c57LpreKLv-4")!)
        .environment(\.figmaAccessToken, "YOUR_FIGMA_TOKEN")
}

struct LightResultCell: View {
    let light: Light
    let onTap: () -> Void
    
    // –ü–æ–ª—É—á–∞–µ–º LightsViewModel –∏–∑ Environment
    @Environment(AppViewModel.self) private var appViewModel
    var lightsViewModel: LightsViewModel {
        appViewModel.lightsViewModel
    }
    
    var body: some View {
        // ‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê –°–í–Ø–ó–ò: effectiveState –∏ isReachable —É—á–∏—Ç—ã–≤–∞—é—Ç
        // CommunicationStatus –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ HueAPIClient
        let effectiveState = light.effectiveState
        let isReachable = light.isReachable
        let effectiveBrightness = light.effectiveBrightness
        
        HStack(spacing: 12) {
            // –ò–∫–æ–Ω–∫–∞ –ª–∞–º–ø—ã —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –≤–∫–ª—é—á–µ–Ω–∏—è
            ZStack {
                Image("lightBulb")
                    .resizable()
                    .scaledToFit()
                    .adaptiveFrame(width: 32, height: 32)
                    .foregroundColor(effectiveState.on ? .yellow : .gray)
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∏—Ç–∞–Ω–∏—è
                if effectiveState.on {
                    Circle()
                        .fill(Color.green)
                        .frame(width: 10, height: 10)
                        .offset(x: 12, y: -12)
                }
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                if !isReachable {
                    Circle()
                        .fill(Color.red)
                        .frame(width: 8, height: 8)
                        .offset(x: -12, y: 12)
                }
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(light.metadata.name)
                    .font(Font.custom("DMSans-Regular", size: 14))
                    .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
                    .textCase(.uppercase)
                
                // –°—Ç–∞—Ç—É—Å –ø–∏—Ç–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                HStack(spacing: 4) {
                    Circle()
                        .fill(getStatusColor(isReachable: isReachable, isOn: effectiveState.on))
                        .frame(width: 6, height: 6)
                    
                    Text(getStatusText(isReachable: isReachable, isOn: effectiveState.on))
                        .font(Font.custom("DMSans-Light", size: 10))
                        .foregroundColor(Color(red: 0.79, green: 1, blue: 1).opacity(0.7))
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if effectiveState.on && isReachable {
                    Text("–Ø—Ä–∫–æ—Å—Ç—å: \(Int(effectiveBrightness))%")
                        .font(Font.custom("DMSans-Light", size: 10))
                        .foregroundColor(Color(red: 0.79, green: 1, blue: 1).opacity(0.5))
                }
            }
            
            Spacer()
            
            ChevronButton {
                onTap()
            }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            Rectangle()
                .foregroundColor(.clear)
                .adaptiveFrame(width: 332, height: 64)
                .background(Color(red: 0.79, green: 1, blue: 1))
                .cornerRadius(15)
                .opacity(effectiveState.on && isReachable ? 0.15 : 0.08) // –ë–æ–ª–µ–µ —è—Ä–∫–∏–π —Ñ–æ–Ω –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        )
        .onTapGesture {
            // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —è—á–µ–π–∫—É –ª–∞–º–ø—ã –º–∏–≥–∞–µ–º –ª–∞–º–ø–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            lightsViewModel.blinkLight(light)
        }
    }
    
    // MARK: - Helper Methods
    
    private func getStatusColor(isReachable: Bool, isOn: Bool) -> Color {
        if !isReachable {
            return Color.orange // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        }
        return isOn ? Color.green : Color.red
    }
    
    private func getStatusText(isReachable: Bool, isOn: Bool) -> String {
        if !isReachable {
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
        return isOn ? "–í–∫–ª—é—á–µ–Ω–∞" : "–í—ã–∫–ª—é—á–µ–Ω–∞"
    }
}
#Preview {
   
    LightResultCell(
        light: Light(),
        onTap: {
           
        }
    )
    .background(.black)
    
}
