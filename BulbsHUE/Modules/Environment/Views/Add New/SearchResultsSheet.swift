//
//  SearchResultsSheet.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 04.08.2025.
//

import SwiftUI

struct SearchResultsSheet: View {
    @EnvironmentObject var nav: NavigationManager
    @EnvironmentObject var appViewModel: AppViewModel
    
    var lightsViewModel: LightsViewModel {
        appViewModel.lightsViewModel
    }
    var body: some View {
        ZStack {
            UnevenRoundedRectangle(
                topLeadingRadius: 35,
                bottomLeadingRadius: 0,
                bottomTrailingRadius: 0,
                topTrailingRadius: 35
            )
            .fill(Color(red: 0.02, green: 0.09, blue: 0.13))
            .adaptiveFrame(width: 375, height: 342)
            
            Text("search results")
                .font(Font.custom("DMSans-Light", size: 14))
                .kerning(2.8)
                .multilineTextAlignment(.center)
                .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
                .textCase(.uppercase)
                .adaptiveOffset(y: -130)
            

            
            
            ScrollView {
                LazyVStack(spacing: 12) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
                    if nav.searchType == .serialNumber && lightsViewModel.isLoading {
                        VStack(spacing: 16) {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle(tint: Color(red: 0.79, green: 1, blue: 1)))
                                .scaleEffect(1.2)
                            
                            Text("adding lamp...")
                                .font(Font.custom("DMSans-Light", size: 16))
                                .kerning(2.4)
                                .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
                                .textCase(.uppercase)
                            
                            Text("lamp should flash to confirm reset")
                                .font(Font.custom("DMSans-Light", size: 10))
                                .kerning(1.0)
                                .lineSpacing(2)
                                .multilineTextAlignment(.center)
                                .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
                                .opacity(0.7)
                        }
                        .padding(.top, 40)
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
                        ForEach(getLightsToShow()) { light in
                            VStack(alignment: .leading, spacing: 8) {
                                
                                //                                BulbCell(text: light.metadata.name, image: "lightBulb", width: 32, height: 32) {
                                //                                    nav.showCategoriesSelection(for: light)
                                //                                }
                                LightResultCell(
                                    light: light,
                                    onTap: {
                                        // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                        nav.selectedLight = light
                                        nav.showCategoriesSelection(for: light)
                                    }
                                )
                            }
                        }
                        // –ü–æ—Å–ª–µ ScrollView –¥–æ–±–∞–≤—å—Ç–µ:
                        if getLightsToShow().isEmpty && !lightsViewModel.isLoading {
                            VStack {
                                Text("DEBUG INFO")
                                    .font(.caption)
                                    .foregroundColor(.red)
                                Text("Lights count: \(lightsViewModel.lights.count)")
                                Text("Network found: \(lightsViewModel.networkFoundLights.count)")
                                Text("Search type: \(nav.searchType == .network ? "Network" : "Serial")")
                                Text("Bridge IP: \(appViewModel.apiClient.bridgeIP)")
                            }
                            .padding()
                        }
                        
//                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ—Ä–∏–π–Ω–∏–∫—É
//                        if nav.searchType == .serialNumber && lightsViewModel.serialNumberFoundLights.isEmpty && !lightsViewModel.isLoading {
//                            VStack(spacing: 16) {
//                                if let error = lightsViewModel.error {
//                                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
//                                    Text("connection error")
//                                        .font(Font.custom("DMSans-Light", size: 16))
//                                        .kerning(2.4)
//                                        .foregroundColor(Color.red)
//                                        .textCase(.uppercase)
//                                    
//                                    Text(error.localizedDescription)
//                                        .font(Font.custom("DMSans-Light", size: 10))
//                                        .kerning(1.0)
//                                        .lineSpacing(2)
//                                        .multilineTextAlignment(.center)
//                                        .foregroundColor(Color.red)
//                                        .opacity(0.8)
//                                } else {
//                                    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//                                    Text("lamp not found")
//                                        .font(Font.custom("DMSans-Light", size: 16))
//                                        .kerning(2.4)
//                                        .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
//                                        .textCase(.uppercase)
//                                    
//                                    Text("‚Ä¢ ensure lamp is within 1m of bridge\n‚Ä¢ check serial number (6 characters)\n‚Ä¢ make sure lamp is powered on")
//                                        .font(Font.custom("DMSans-Light", size: 10))
//                                        .kerning(1.0)
//                                        .lineSpacing(2)
//                                        .multilineTextAlignment(.center)
//                                        .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
//                                        .opacity(0.7)
//                                }
//                            }
//                            .padding(.top, 40)
//                        }
                    }
                }
                .padding()
            }
            .adaptiveOffset(y: 285)
        }
        // –í SearchResultsSheet.swift, –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        .onAppear {
            print("üîÑ SearchResultsSheet –ø–æ—è–≤–∏–ª—Å—è")
            
            // –î–æ–±–∞–≤—å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω
            if lightsViewModel.lights.isEmpty {
                print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ª–∞–º–ø –ø—É—Å—Ç!")
            }
            
            Task {
                // –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                lightsViewModel.runSearchDiagnostics { report in
                    print(report)
                    // –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ report –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ö–∞–Ω–∞–¥–µ
                }
            }
        }
        .onAppear {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
            // ‚úÖ –ù–û–í–û–ï –ü–û–í–ï–î–ï–ù–ò–ï: HueAPIClient.updateLightCommunicationStatus —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç 
            // —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑–∏ –≤ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ LightsViewModel –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ UI
            print("üîÑ SearchResultsSheet: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º")
            Task {
                await lightsViewModel.refreshLightsWithStatus()
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–º–ø –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            print("üì° SearchResultsSheet: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–º–ø")
            lightsViewModel.startLightStatusMonitoring()
        }
        .onDisappear {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            print("‚èπÔ∏è SearchResultsSheet: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–º–ø")
            lightsViewModel.stopLightStatusMonitoring()
        }
        .refreshable {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ pull-to-refresh —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
            print("üîÑ SearchResultsSheet: Pull-to-refresh —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞")
            await lightsViewModel.refreshLightsWithStatus()
        }
        
    }
    // MARK: - Helper Functions
        private func getLightsToShow() -> [Light] {
            switch nav.searchType {
            case .network:
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if !lightsViewModel.networkFoundLights.isEmpty {
                    return lightsViewModel.networkFoundLights
                }
                
                // –ï—Å–ª–∏ networkFoundLights –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ª–∞–º–ø—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                // —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                if !lightsViewModel.lights.isEmpty {
                    print("üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∞–º–ø—ã: \(lightsViewModel.lights.count)")
                    return lightsViewModel.lights.filter { light in
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∞–º–ø—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                        let needsConfiguration = light.metadata.userSubtypeName == nil ||
                                               light.metadata.userSubtypeName?.isEmpty == true
                        
                        if needsConfiguration {
                            print("   ‚ú® –õ–∞–º–ø–∞ '\(light.metadata.name)' —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                        }
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã, –¥–∞–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ (–¥–ª—è –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
                        return true
                    }
                }
                
                // –§–æ–ª–ª–±–µ–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∞–º–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –Ω–æ–≤—ã–µ
                return lightsViewModel.lights.filter { $0.isNewLight }
                
            case .serialNumber:
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
                if !lightsViewModel.serialNumberFoundLights.isEmpty {
                    return lightsViewModel.serialNumberFoundLights
                }
                // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –µ—â–µ –∏–¥–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                return lightsViewModel.isLoading ? [] : lightsViewModel.serialNumberFoundLights
            }
        }
    
    
}

#Preview {
    SearchResultsSheet()
        .environmentObject(NavigationManager.shared)
        .environmentObject(AppViewModel())
        .compare(with: URL(string: "https://www.figma.com/design/9yYMU69BSxasCD4lBnOtet/Bulbs_HUE--Copy-?node-id=2010-2&t=N7aN39c57LpreKLv-4")!)
        .environment(\.figmaAccessToken, "YOUR_FIGMA_TOKEN")
}

//            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
//            VStack(spacing: 8) {
//                // –ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç ForEach —Å –¥–∞–Ω–Ω—ã–º–∏
//                BulbCell(text: "Philips Hue Color", image: "lightBulb", width: 32, height: 32) {
//                    nav.showCategoriesSelection()
//                }
//
//                BulbCell(text: "IKEA TR√ÖDFRI", image: "lightBulb", width: 32, height: 32) {
//                    nav.showCategoriesSelection()
//                }
//
//                BulbCell(text: "Xiaomi Yeelight", image: "lightBulb", width: 32, height: 32) {
//                    nav.showCategoriesSelection()
//                }
//            }
// –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–º–ø—ã —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞
struct LightResultCell: View {
    let light: Light
    let onTap: () -> Void
    
    // –ü–æ–ª—É—á–∞–µ–º LightsViewModel –∏–∑ Environment
    @EnvironmentObject var appViewModel: AppViewModel
    var lightsViewModel: LightsViewModel {
        appViewModel.lightsViewModel
    }
    
    var body: some View {
        // ‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê –°–í–Ø–ó–ò: effectiveState –∏ isReachable —É—á–∏—Ç—ã–≤–∞—é—Ç 
        // CommunicationStatus –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ HueAPIClient
        let effectiveState = light.effectiveState
        let isReachable = light.isReachable
        let effectiveBrightness = light.effectiveBrightness
        
        HStack(spacing: 12) {
            // –ò–∫–æ–Ω–∫–∞ –ª–∞–º–ø—ã —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –≤–∫–ª—é—á–µ–Ω–∏—è
            ZStack {
                Image("lightBulb")
                    .resizable()
                    .scaledToFit()
                    .adaptiveFrame(width: 32, height: 32)
                    .foregroundColor(effectiveState.on ? .yellow : .gray)
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∏—Ç–∞–Ω–∏—è
                if effectiveState.on {
                    Circle()
                        .fill(Color.green)
                        .frame(width: 10, height: 10)
                        .offset(x: 12, y: -12)
                }
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                if !isReachable {
                    Circle()
                        .fill(Color.red)
                        .frame(width: 8, height: 8)
                        .offset(x: -12, y: 12)
                }
            }
            
            VStack(alignment: .leading, spacing: 4) {
                Text(light.metadata.name)
                    .font(Font.custom("DMSans-Regular", size: 14))
                    .foregroundColor(Color(red: 0.79, green: 1, blue: 1))
                    .textCase(.uppercase)
                
                // –°—Ç–∞—Ç—É—Å –ø–∏—Ç–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                HStack(spacing: 4) {
                    Circle()
                        .fill(getStatusColor(isReachable: isReachable, isOn: effectiveState.on))
                        .frame(width: 6, height: 6)
                    
                    Text(getStatusText(isReachable: isReachable, isOn: effectiveState.on))
                        .font(Font.custom("DMSans-Light", size: 10))
                        .foregroundColor(Color(red: 0.79, green: 1, blue: 1).opacity(0.7))
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                if effectiveState.on && isReachable {
                    Text("–Ø—Ä–∫–æ—Å—Ç—å: \(Int(effectiveBrightness))%")
                        .font(Font.custom("DMSans-Light", size: 10))
                        .foregroundColor(Color(red: 0.79, green: 1, blue: 1).opacity(0.5))
                }
            }
            
            Spacer()
            
            ChevronButton {
                onTap()
            }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            Rectangle()
                .foregroundColor(.clear)
                .adaptiveFrame(width: 332, height: 64)
                .background(Color(red: 0.79, green: 1, blue: 1))
                .cornerRadius(15)
                .opacity(effectiveState.on && isReachable ? 0.15 : 0.08) // –ë–æ–ª–µ–µ —è—Ä–∫–∏–π —Ñ–æ–Ω –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        )
        .onTapGesture {
            // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —è—á–µ–π–∫—É –ª–∞–º–ø—ã –º–∏–≥–∞–µ–º –ª–∞–º–ø–æ–π –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            lightsViewModel.blinkLight(light)
        }
    }
    
    // MARK: - Helper Methods
    
    private func getStatusColor(isReachable: Bool, isOn: Bool) -> Color {
        if !isReachable {
            return Color.orange // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        }
        return isOn ? Color.green : Color.red
    }
    
    private func getStatusText(isReachable: Bool, isOn: Bool) -> String {
        if !isReachable {
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
        return isOn ? "–í–∫–ª—é—á–µ–Ω–∞" : "–í—ã–∫–ª—é—á–µ–Ω–∞"
    }
}
#Preview {
   
    LightResultCell(
        light: Light(),
        onTap: {
           
        }
    )
    .background(.black)
    
}
