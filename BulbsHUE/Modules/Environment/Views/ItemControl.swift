//
//  ItemControl.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/9/25.
//

import SwiftUI
import Combine

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–∞–º–ø–æ–π
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é ViewModel –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∞–º–ø—ã
struct ItemControl: View {
    // MARK: - Environment Objects
    /// –û—Å–Ω–æ–≤–Ω–æ–π ViewModel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
    @EnvironmentObject var appViewModel: AppViewModel
    
    // MARK: - Properties
    
    /// –õ–∞–º–ø–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let light: Light
    
    /// –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ViewModel –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∞–º–ø—ã
    @StateObject private var itemControlViewModel: ItemControlViewModel
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π ViewModel –¥–ª—è –ª–∞–º–ø—ã
    /// - Parameter light: –õ–∞–º–ø–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    init(light: Light) {
        self.light = light
        
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é ViewModel –¥–ª—è —ç—Ç–æ–π –ª–∞–º–ø—ã
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ø—É—Å—Ç—ã–º —Å–µ—Ä–≤–∏—Å–æ–º, –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ onAppear
        self._itemControlViewModel = StateObject(wrappedValue: ItemControlViewModel.createIsolated())
    }

    // MARK: - Body
    
    var body: some View {
        HStack(spacing: 0) {
            ZStack {
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ViewModel
                ControlView(
                    isOn: $itemControlViewModel.isOn,
                    baseColor: itemControlViewModel.defaultWarmColor,
                    bulbName: light.metadata.name,
                    bulbType: itemControlViewModel.getBulbType(),
                    roomName: itemControlViewModel.getRoomName(),
                    bulbIcon: itemControlViewModel.getBulbIcon(),
                    roomIcon: itemControlViewModel.getRoomIcon(),
                    onToggle: { newState in
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ ViewModel
                        itemControlViewModel.setPower(newState)
                    }
                )
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–º–ø—ã (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Å–µ—Ç–∏)
                HStack(spacing: 8) {
                    Circle()
                        .fill(itemControlViewModel.isLightReachable() ? Color.green.opacity(0) : Color.red.opacity(0.6))
                        .frame(width: 8, height: 8)
                    Text(itemControlViewModel.isLightReachable() ? "" : "–û–±–µ—Å—Ç–æ—á–µ–Ω–∞")
                        .font(Font.custom("DMSans-Medium", size: 11))
                        .foregroundStyle(itemControlViewModel.isLightReachable() ? Color.green.opacity(0.9) : Color.red.opacity(0.8))
                        .textCase(.uppercase)
                }
                .adaptiveOffset(x: -10, y: -38)
//                    Text(itemControlViewModel.getRoomName())
//                        .font(Font.custom("DMSans-Regular", size: 12))
//                        .foregroundStyle(Color.white.opacity(0.75))
//                    Text(light.metadata.name)
//                        .font(Font.custom("DMSans-Medium", size: 14))
//                        .foregroundStyle(Color.white)
//                }
                
            }
            
            // –°–ª–∞–π–¥–µ—Ä —è—Ä–∫–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∞
            CustomSlider(
                percent: $itemControlViewModel.brightness,
                color: itemControlViewModel.defaultWarmColor,
                onChange: { value in
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ViewModel –¥–ª—è throttled –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    itemControlViewModel.setBrightnessThrottled(value)
                },
                onCommit: { value in
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ViewModel –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
                    itemControlViewModel.commitBrightness(value)
                }
            )
            .padding(.leading, 10)
        }
        .onAppear {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é ViewModel —Å —Å–µ—Ä–≤–∏—Å–æ–º –∏–∑ appViewModel
            let lightService = LightControlService(appViewModel: appViewModel)
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Ö–æ–¥—è—â—É—é –ª–∞–º–ø—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏ –∏–∑ –ë–î –ø–µ—Ä–µ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            var initialLight = light
            if let dataService = appViewModel.dataService {
                let saved = dataService.fetchAssignedLights().first { $0.id == light.id }
                if let saved {
                    initialLight.metadata.userSubtypeName = saved.metadata.userSubtypeName
                    initialLight.metadata.userSubtypeIcon = saved.metadata.userSubtypeIcon
                }
            }
            itemControlViewModel.configure(with: lightService, light: initialLight)
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ DataPersistenceService, 
            // –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –æ–±—ä–µ–∫—Ç Light –∏–∑ API
            loadActualLightData()
        }
        .onReceive(NotificationCenter.default.publisher(for: Notification.Name("LightDataUpdated"))) { notification in
            // –û–±–Ω–æ–≤–ª—è–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ–¥—Ç–∏–ø–∞
            if let userInfo = notification.userInfo,
               let updateType = userInfo["updateType"] as? String,
               updateType == "userSubtype" {
                print("üîÑ ItemControl: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ userSubtype –∏–∑ –ë–î")
                loadActualLightData()
            }
        }
        .onChange(of: light) { newLight in
            // ‚úÖ –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º ViewModel –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            print("üîÑ ItemControl.onChange: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç API (on=\(newLight.on.on), brightness=\(newLight.dimming?.brightness ?? 0))")
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ userSubtype –∏ –∏–∫–æ–Ω–∫–∞ –≤ –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –∏–∑ API
            if let dataService = appViewModel.dataService {
                let savedLights = dataService.fetchAssignedLights()
                if let savedLight = savedLights.first(where: { $0.id == newLight.id }) {
                    // –°–æ–∑–¥–∞—ë–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ API + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–¥—Ç–∏–ø –∏ –∏–∫–æ–Ω–∫–∞ –∏–∑ –ë–î
                    var hybridLight = newLight
                    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç API-–∞—Ä—Ö–µ—Ç–∏–ø–∞
                    hybridLight.metadata.userSubtypeName = savedLight.metadata.userSubtypeName
                    hybridLight.metadata.userSubtypeIcon = savedLight.metadata.userSubtypeIcon
                    print("üîÄ –û–±–Ω–æ–≤–ª—ë–Ω –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ API + userSubtypeName '\(savedLight.metadata.userSubtypeName ?? "nil")' + –∏–∫–æ–Ω–∫–∞ '\(savedLight.metadata.userSubtypeIcon ?? "nil")' –∏–∑ –ë–î")
                    itemControlViewModel.setCurrentLight(hybridLight)
                    return
                }
            }
            
            // –ï—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –∫–∞–∫ –µ—Å—Ç—å
            itemControlViewModel.setCurrentLight(newLight)
        }

    }
    
    // MARK: - Private Methods
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã –∏–∑ DataPersistenceService
    private func loadActualLightData() {
        print("üîÑ ItemControl.loadActualLightData –¥–ª—è –ª–∞–º–ø—ã: \(light.metadata.name) (ID: \(light.id))")
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ DataPersistenceService —á–µ—Ä–µ–∑ AppViewModel
        if let dataPersistenceService = appViewModel.dataService {
            let savedLights = dataPersistenceService.fetchAssignedLights()
            if let savedLight = savedLights.first(where: { $0.id == light.id }) {
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–∞–º–ø–∞ –≤ –ë–î —Å userSubtypeName: '\(savedLight.metadata.userSubtypeName ?? "nil")' –∏ –∏–∫–æ–Ω–∫–æ–π: '\(savedLight.metadata.userSubtypeIcon ?? "nil")'")
                
                // –°–û–ó–î–ê–Å–ú –ì–ò–ë–†–ò–î–ù–´–ô –û–ë–™–ï–ö–¢: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î + –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ API
                var hybridLight = light // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
                hybridLight.metadata.userSubtypeName = savedLight.metadata.userSubtypeName
                hybridLight.metadata.userSubtypeIcon = savedLight.metadata.userSubtypeIcon
                
                print("üîÄ –°–æ–∑–¥–∞–Ω –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç Light:")
                print("   ‚îî‚îÄ‚îÄ userSubtypeName –∏–∑ –ë–î: '\(hybridLight.metadata.userSubtypeName ?? "nil")'")
                print("   ‚îî‚îÄ‚îÄ userIcon –∏–∑ –ë–î: '\(hybridLight.metadata.userSubtypeIcon ?? "nil")'")
                print("   ‚îî‚îÄ‚îÄ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ API: on=\(hybridLight.on.on), brightness=\(hybridLight.dimming?.brightness ?? 0)")
                
                // –û–±–Ω–æ–≤–ª—è–µ–º ViewModel —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                itemControlViewModel.setCurrentLight(hybridLight)
            } else {
                print("‚ö†Ô∏è –õ–∞–º–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
                itemControlViewModel.setCurrentLight(light)
            }
        } else {
            print("‚ö†Ô∏è DataPersistenceService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API")
            itemControlViewModel.setCurrentLight(light)
        }
    }

}

// MARK: - Mock ItemControl –¥–ª—è –ø—Ä–µ–≤—å—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏

/// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ItemControl –¥–ª—è –ø—Ä–µ–≤—å—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–µ–º–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
struct MockItemControl: View {
    let light: Light
    let mockColor: Color
    @EnvironmentObject var appViewModel: AppViewModel
    @StateObject private var itemControlViewModel: ItemControlViewModel
    
    init(light: Light, mockColor: Color) {
        self.light = light
        self.mockColor = mockColor
        self._itemControlViewModel = StateObject(wrappedValue: ItemControlViewModel.createIsolated())
    }
    
    var body: some View {
        HStack(spacing: 0) {
            ZStack {
                ControlView(
                    isOn: $itemControlViewModel.isOn,
                    baseColor: mockColor,
                    bulbName: light.metadata.name,
                    bulbType: itemControlViewModel.getBulbType(),
                    roomName: itemControlViewModel.getRoomName(),
                    bulbIcon: itemControlViewModel.getBulbIcon(),
                    roomIcon: itemControlViewModel.getRoomIcon(),
                    onToggle: { newState in
                        itemControlViewModel.setPower(newState)
                    }
                )
                
                VStack(alignment: .leading, spacing: 6) {
                    HStack(spacing: 8) {
                        Circle()
                            .fill(itemControlViewModel.isOn ? Color.green.opacity(0.9) : Color.gray.opacity(0.6))
                            .frame(width: 8, height: 8)
                        Text(itemControlViewModel.isOn ? "ON" : "OFF")
                            .font(Font.custom("DMSans-Medium", size: 11))
                            .foregroundStyle(itemControlViewModel.isOn ? Color.green.opacity(0.9) : Color.gray.opacity(0.8))
                            .textCase(.uppercase)
                    }
                    Text(itemControlViewModel.getRoomName())
                        .font(Font.custom("DMSans-Regular", size: 12))
                        .foregroundStyle(Color.white.opacity(0.75))
                    Text(light.metadata.name)
                        .font(Font.custom("DMSans-Medium", size: 14))
                        .foregroundStyle(Color.white)
                }
                .adaptiveOffset(x: 40, y: -8)
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ª–∞–º–ø—ã –¥–ª—è Mock –≤–µ—Ä—Å–∏–∏
                HStack(spacing: 8) {
                    Circle()
                        .fill(itemControlViewModel.isLightReachable() ? Color.green.opacity(0) : Color.red.opacity(0.6))
                        .frame(width: 8, height: 8)
                    Text(itemControlViewModel.isLightReachable() ? "" : "–û–±–µ—Å—Ç–æ—á–µ–Ω–∞")
                        .font(Font.custom("DMSans-Medium", size: 11))
                        .foregroundStyle(itemControlViewModel.isLightReachable() ? Color.green.opacity(0.9) : Color.red.opacity(0.8))
                        .textCase(.uppercase)
                }
                .adaptiveOffset(x: -10, y: -38)
            }
            
            CustomSlider(
                percent: $itemControlViewModel.brightness,
                color: mockColor,
                onChange: { value in
                    itemControlViewModel.setBrightnessThrottled(value)
                },
                onCommit: { value in
                    itemControlViewModel.commitBrightness(value)
                }
            )
            .padding(.leading, 10)
        }
        .onAppear {
            itemControlViewModel.configure(
                with: LightControlService(appViewModel: appViewModel),
                light: light
            )
        }
        .onChange(of: light) { newLight in
            itemControlViewModel.setCurrentLight(newLight)
        }
    }
}

#Preview {
    let appViewModel = AppViewModel()
    
    let mockLight = Light(
        id: "light_mock_01",
        type: "light",
        metadata: LightMetadata(name: "Smart Bulb", archetype: nil),
        on: OnState(on: true),
        dimming: Dimming(brightness: 75),
        color: nil,
        color_temperature: nil,
        effects: nil,
        effects_v2: nil,
        mode: nil,
        capabilities: nil,
        color_gamut_type: nil,
        color_gamut: nil,
        gradient: nil
    )
    
    ItemControl(light: mockLight)
        .environmentObject(appViewModel)
}
