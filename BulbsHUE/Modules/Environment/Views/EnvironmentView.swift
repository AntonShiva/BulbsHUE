//
//  EnvironmentView.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 26.07.2025.
//

import SwiftUI

struct EnvironmentView: View {
    @EnvironmentObject var nav: NavigationManager
    @EnvironmentObject var appViewModel: AppViewModel
    @EnvironmentObject var dataPersistenceService: DataPersistenceService
    
    /// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ViewModel –¥–ª—è —ç–∫—Ä–∞–Ω–∞ Environment
    @State private var environmentViewModel: EnvironmentViewModel?
    
    var body: some View {
        ZStack {
            BG()
            
            Header(title: "ENVIRONMENT") {
                // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –≤–∞—à–µ –º–µ–Ω—é
                MenuButton { }
            } rightView: {
                // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–ª—é—Å
                AddHeaderButton {
                    nav.go(.addNewBulb)
                }
            }
            .adaptiveOffset(y: -330)
            .onTapGesture(count: 3) {
                // –°–µ–∫—Ä–µ—Ç–Ω—ã–π triple-tap –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Development –º–µ–Ω—é
                #if DEBUG
                nav.go(.development)
                #endif
            }
            
            SelectorTabEnviromentView()
                .adaptiveOffset(y: -264)
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ EnvironmentViewModel —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if let viewModel = environmentViewModel {
                if !viewModel.hasAssignedLights {
                    EmptyLightsView {
                        nav.go(.addNewBulb)
                    }
                } else  {
                    if  nav.–µnvironmentTab == .bulbs{
                        AssignedLightsListView(
                            lights: viewModel.assignedLights,
                            onRemoveLight: { lightId in
                                viewModel.removeLightFromEnvironment(lightId)
                            }
                        )
                        .adaptiveOffset(y: 30)
                    } else if  nav.–µnvironmentTab == .rooms{
                        RoomList()
                    }
                }
             }
        }
        .onAppear {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                    if appViewModel.connectionStatus == .connected {
                        // –°–æ–∑–¥–∞–µ–º ViewModel —Å –æ–±–æ–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
                        if environmentViewModel == nil {
                            environmentViewModel = EnvironmentViewModel(
                                appViewModel: appViewModel,
                                dataPersistenceService: dataPersistenceService
                            )
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞
                        print("üîÑ EnvironmentView: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø")
                        appViewModel.lightsViewModel.loadLights()
                        environmentViewModel?.refreshLights()
                    } else {
                        print("‚ö†Ô∏è EnvironmentView: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                    }
                }

        .refreshable {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ pull-to-refresh
            environmentViewModel?.refreshLights()
        }
        .onChange(of: nav.–µnvironmentTab) { newTab in
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø
            print("üîÑ EnvironmentView: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É \(newTab), –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–º–ø")
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            environmentViewModel?.forceStateSync()
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
            if appViewModel.connectionStatus == .connected {
                appViewModel.lightsViewModel.loadLights()
            }
        }
    }
}

// MARK: - Subviews

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
private struct EmptyLightsView: View {
    let onAddBulb: () -> Void
    
    var body: some View {
        VStack(spacing: 20) {
            Text("You don't have \nany bulbs yet")
                .font(Font.custom("DMSans-Regular", size: 16))
                .kerning(3.2)
                .multilineTextAlignment(.center)
                .foregroundColor(Color(red: 0.75, green: 0.85, blue: 1))
                .opacity(0.3)
                .textCase(.uppercase)

            AddButton(text: "add bulb", width: 427, height: 295) {
                onAddBulb()
            }
            .adaptiveOffset(y: 175)
        }
    }
}

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ª–∞–º–ø
private struct AssignedLightsListView: View {
    let lights: [Light]
    let onRemoveLight: ((String) -> Void)?
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            VStack(spacing: 24) {
                ForEach(lights) { light in
                    ItemControl(light: light)
                        .id("item_\(light.id)_\(light.on.on)_\(Int(light.dimming?.brightness ?? 0))") // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        .padding(.horizontal, 10) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                        .contextMenu {
                            Button("–£–±—Ä–∞—Ç—å –∏–∑ Environment", role: .destructive) {
                                onRemoveLight?(light.id)
                            }
                        }
                }
            }
            .padding(.horizontal, 20) // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –ø–æ –∫—Ä–∞—è–º
        }
        .adaptiveOffset(y: 180)
    }
}

// MARK: - Mock Components –¥–ª—è –ø—Ä–µ–≤—å—é

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∞–º–ø —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –≤ –ø—Ä–µ–≤—å—é
private struct MockAssignedLightsListView: View {
    let lights: [Light]
    let onRemoveLight: ((String) -> Void)?
    
    // –ú–∞—Å—Å–∏–≤ —Ç–µ–º–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
    private let mockColors: [Color] = [
        Color(hue: 0.60, saturation: 0.8, brightness: 0.6),   // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        Color(hue: 0.33, saturation: 0.8, brightness: 0.5),   // –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π  
        Color(hue: 0.83, saturation: 0.7, brightness: 0.6),   // –¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        Color(hue: 0.08, saturation: 0.9, brightness: 0.6),   // –¢–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        Color(hue: 0.97, saturation: 0.8, brightness: 0.7),   // –¢–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
        Color(hue: 0.50, saturation: 0.7, brightness: 0.5),   // –¢–µ–º–Ω–æ-–±–∏—Ä—é–∑–æ–≤—ã–π
    ]
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            VStack(spacing: 24) {
                ForEach(Array(lights.enumerated()), id: \.element.id) { index, light in
                    MockItemControl(
                        light: light,
                        mockColor: mockColors[index % mockColors.count]
                    )
                    .padding(.horizontal, 10)
                    .contextMenu {
                        Button("–£–±—Ä–∞—Ç—å –∏–∑ Environment", role: .destructive) {
                            onRemoveLight?(light.id)
                        }
                    }
                }
            }
            .padding(.horizontal, 20)
        }
        .adaptiveOffset(y: 180)
    }
}

#Preview("Environment with Mock Lights") {
    EnvironmentView()
        .environmentObject(NavigationManager.shared)
        .environmentObject(AppViewModel())
        .environmentObject(DataPersistenceService.createMock())
}

#Preview("Environment with Colorful Mock Lights") {
    ZStack {
        BG()
        
        Header(title: "ENVIRONMENT") {
            MenuButton { }
        } rightView: {
            AddHeaderButton { }
        }
        .adaptiveOffset(y: -330)
        
        SelectorTabEnviromentView()
            .adaptiveOffset(y: -264)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º MockAssignedLightsListView —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ ItemControl
        MockAssignedLightsListView(
            lights: [
                Light(id: "mock1", type: "light", metadata: LightMetadata(name: "Living Room Ceiling", archetype: "ceiling_round"), on: OnState(on: true), dimming: Dimming(brightness: 85), color: nil, color_temperature: nil, effects: nil, effects_v2: nil, mode: nil, capabilities: nil, color_gamut_type: nil, color_gamut: nil, gradient: nil),
                Light(id: "mock2", type: "light", metadata: LightMetadata(name: "Bedroom Table Lamp", archetype: "table_shade"), on: OnState(on: false), dimming: Dimming(brightness: 0), color: nil, color_temperature: nil, effects: nil, effects_v2: nil, mode: nil, capabilities: nil, color_gamut_type: nil, color_gamut: nil, gradient: nil),
                Light(id: "mock3", type: "light", metadata: LightMetadata(name: "Kitchen Spots", archetype: "ceiling_square"), on: OnState(on: true), dimming: Dimming(brightness: 65), color: nil, color_temperature: nil, effects: nil, effects_v2: nil, mode: nil, capabilities: nil, color_gamut_type: nil, color_gamut: nil, gradient: nil),
                Light(id: "mock4", type: "light", metadata: LightMetadata(name: "Office Floor Lamp", archetype: "floor_shade"), on: OnState(on: true), dimming: Dimming(brightness: 45), color: nil, color_temperature: nil, effects: nil, effects_v2: nil, mode: nil, capabilities: nil, color_gamut_type: nil, color_gamut: nil, gradient: nil)
            ],
            onRemoveLight: nil
        )
        .adaptiveOffset(y: 30)
    }
    .environmentObject(NavigationManager.shared)
    .environmentObject(AppViewModel())
}

#Preview("Environment with Figma") {
    EnvironmentView()
        .environmentObject(NavigationManager.shared)
        .environmentObject(AppViewModel())
        .environmentObject(DataPersistenceService.createMock())
        .compare(with: URL(string: "https://www.figma.com/design/9yYMU69BSxasCD4lBnOtet/Bulbs_HUE--Copy-?node-id=120-1187&t=B04C893qA3iLYnq6-4")!)
        .environment(\.figmaAccessToken, "figd_0tuspWW6vlV9tTm5dGXG002n2yoohRRd94dMxbXD")
}

#Preview("MasterView") {
    MasterView()
        .environmentObject(NavigationManager.shared)
        .environmentObject(AppViewModel())
        .environmentObject(DataPersistenceService.createMock())
        .compare(with: URL(string: "https://www.figma.com/design/9yYMU69BSxasCD4lBnOtet/Bulbs_HUE--Copy-?node-id=2002-3&t=B04C893qA3iLYnq6-4")!)
        .environment(\.figmaAccessToken, "figd_0tuspWW6vlV9tTm5dGXG002n2yoohRRd94dMxbXD")
}


