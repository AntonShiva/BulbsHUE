//
//  RoomControl.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/18/25.
//

import SwiftUI
import Combine

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π (–≤—Å–µ–º–∏ –ª–∞–º–ø–∞–º–∏ –≤ –Ω–µ–π)
/// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ItemControl, –Ω–æ –¥–ª—è –∫–æ–º–Ω–∞—Ç
struct RoomControl: View {
    // MARK: - Environment Objects
    @EnvironmentObject var appViewModel: AppViewModel
    @EnvironmentObject var nav: NavigationManager
    
    // MARK: - Properties
    
    /// –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let room: RoomEntity
    
    /// –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ViewModel –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    @StateObject private var roomControlViewModel: RoomControlViewModel
    
    // MARK: - Initialization
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π ViewModel –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    /// - Parameter room: –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    init(room: RoomEntity) {
        self.room = room
        
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é ViewModel –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
        self._roomControlViewModel = StateObject(wrappedValue: RoomControlViewModel.createIsolated())
    }
    
    // MARK: - Body
    
    var body: some View {
        HStack(spacing: 0) {
            ZStack {
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ViewModel
                ControlView(
                    isOn: $roomControlViewModel.isOn,
                    baseColor: roomControlViewModel.defaultWarmColor,
                    bulbName: room.name,
                    bulbType: roomControlViewModel.getRoomType(),
                    roomName: "\(roomControlViewModel.getLightCount()) lights",
                    bulbIcon: roomControlViewModel.getRoomIcon(),
                    roomIcon: "",
                    onToggle: { newState in
                        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–∞–º–ø—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
                        roomControlViewModel.setPower(newState)
                    },
                    onMenuTap: {
                        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã
                        print("üè† –ú–µ–Ω—é –∫–æ–º–Ω–∞—Ç—ã \(room.name)")
                    }
                )
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
                HStack(spacing: 8) {
                    Circle()
                        .fill(roomControlViewModel.isRoomAvailable() ? Color.green.opacity(0) : Color.red.opacity(0.6))
                        .frame(width: 8, height: 8)
                    Text(roomControlViewModel.isRoomAvailable() ? "" : "–ü—É—Å—Ç–∞—è")
                        .font(Font.custom("DMSans-Medium", size: 11))
                        .foregroundStyle(roomControlViewModel.isRoomAvailable() ? Color.green.opacity(0.9) : Color.red.opacity(0.8))
                        .textCase(.uppercase)
                }
                .adaptiveOffset(x: -10, y: -38)
            }
            
            // –°–ª–∞–π–¥–µ—Ä —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ª–∞–º–ø –≤ –∫–æ–º–Ω–∞—Ç–µ
            CustomSlider(
                percent: $roomControlViewModel.brightness,
                color: roomControlViewModel.defaultWarmColor,
                onChange: { value in
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ViewModel –¥–ª—è throttled –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ—Ö –ª–∞–º–ø
                    roomControlViewModel.setBrightnessThrottled(value)
                },
                onCommit: { value in
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ViewModel –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –≤—Å–µ—Ö –ª–∞–º–ø
                    roomControlViewModel.commitBrightness(value)
                }
            )
            .padding(.leading, 10)
        }
        .onAppear {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º ViewModel —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏–∑ appViewModel
            let lightService = LightControlService(appViewModel: appViewModel)
            let roomService = RoomService()
            
            roomControlViewModel.configure(
                with: lightService,
                roomService: roomService,
                room: room
            )
        }
        .onChange(of: room) { newRoom in
            // –û–±–Ω–æ–≤–ª—è–µ–º ViewModel –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
            roomControlViewModel.setCurrentRoom(newRoom)
        }
    }
}

#Preview {
    let mockRoom = RoomEntity(
        id: "room_mock_01",
        name: "Living Room",
        type: .livingRoom,
        iconName: "tr1",
        lightIds: ["light1", "light2", "light3"],
        isActive: true,
        createdAt: Date(),
        updatedAt: Date()
    )
    
    RoomControl(room: mockRoom)
        .environmentObject(AppViewModel())
        .environmentObject(NavigationManager.shared)
}
