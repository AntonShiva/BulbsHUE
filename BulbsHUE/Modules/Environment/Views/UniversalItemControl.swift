//
//  UniversalItemControl.swift
//  BulbsHUE
//
//  Created by Anton Reasin on 8/18/25.
//

import SwiftUI

/// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–∞–º–∏ –∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
/// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª ItemData
struct UniversalItemControl: View {
    // MARK: - Properties
    let data: ItemData
    let onToggle: (Bool) -> Void
    let onBrightnessChange: (Double) -> Void
    let onMenuTap: () -> Void
    
    // MARK: - State
    @State private var isOn: Bool
    @State private var brightness: Double
    
    // MARK: - Initialization
    init(
        data: ItemData,
        onToggle: @escaping (Bool) -> Void = { _ in },
        onBrightnessChange: @escaping (Double) -> Void = { _ in },
        onMenuTap: @escaping () -> Void = { }
    ) {
        self.data = data
        self.onToggle = onToggle
        self.onBrightnessChange = onBrightnessChange
        self.onMenuTap = onMenuTap
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        self._isOn = State(initialValue: data.isOn)
        self._brightness = State(initialValue: data.brightness)
    }
    
    // MARK: - Body
    var body: some View {
        HStack(spacing: 0) {
            ZStack {
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª
                ControlView(
                    isOn: $isOn,
                    baseColor: data.color,
                    bulbName: data.name,
                    bulbType: data.type,
                    roomName: data.subtitle ?? "",
                    bulbIcon: data.iconName,
                    roomIcon: data.secondaryIcon ?? "",
                    onToggle: { newState in
                        isOn = newState
                        onToggle(newState)
                    },
                    onMenuTap: onMenuTap
                )
                
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                if !data.isAvailable {
                    HStack(spacing: 8) {
                        Circle()
                            .fill(Color.red.opacity(0.6))
                            .frame(width: 8, height: 8)
                        Text(data.statusMessage)
                            .font(Font.custom("DMSans-Medium", size: 11))
                            .foregroundStyle(Color.red.opacity(0.8))
                            .textCase(.uppercase)
                    }
                    .adaptiveOffset(x: -10, y: -38)
                }
            }
            
            // –°–ª–∞–π–¥–µ—Ä —è—Ä–∫–æ—Å—Ç–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            if data.supportsBrightness {
                CustomSlider(
                    percent: $brightness,
                    color: data.color,
                    onChange: { value in
                        brightness = value
                        onBrightnessChange(value)
                    },
                    onCommit: { value in
                        brightness = value
                        onBrightnessChange(value)
                    }
                )
                .padding(.leading, 10)
            }
        }
        .onChange(of: data.isOn) { newValue in
            isOn = newValue
        }
        .onChange(of: data.brightness) { newValue in
            brightness = newValue
        }
    }
}

// MARK: - Protocol Definition

/// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ UniversalItemControl
protocol ItemData {
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    var id: String { get }
    
    /// –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    var name: String { get }
    
    /// –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    var type: String { get }
    
    /// –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    var subtitle: String? { get }
    
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–∫–æ–Ω–∫–∏
    var iconName: String { get }
    
    /// –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–∏—á–Ω–æ–π –∏–∫–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    var secondaryIcon: String? { get }
    
    /// –í–∫–ª—é—á–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    var isOn: Bool { get }
    
    /// –£—Ä–æ–≤–µ–Ω—å —è—Ä–∫–æ—Å—Ç–∏ (0.0 - 100.0)
    var brightness: Double { get }
    
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é
    var supportsBrightness: Bool { get }
    
    /// –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç
    var isAvailable: Bool { get }
    
    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    var statusMessage: String { get }
    
    /// –¶–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    var color: Color { get }
}

// MARK: - Data Structs

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–º–ø—ã
struct LightItemData: ItemData {
    let id: String
    let name: String
    let type: String
    let subtitle: String?
    let iconName: String
    let secondaryIcon: String?
    let isOn: Bool
    let brightness: Double
    let supportsBrightness: Bool
    let isAvailable: Bool
    let statusMessage: String
    let color: Color
    
    /// –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∞–º–ø—ã –∏–∑ Light –æ–±—ä–µ–∫—Ç–∞
    static func from(_ light: Light) -> LightItemData {
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ defaultWarmColor —á—Ç–æ –∏ –≤ ItemControlViewModel
        let defaultWarmColor = Color(hue: 0.13, saturation: 0.25, brightness: 1.0)
        
        return LightItemData(
            id: light.id,
            name: light.metadata.name,
            type: light.metadata.userSubtypeName ?? "LIGHT",
            subtitle: nil, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            iconName: light.metadata.userSubtypeIcon ?? "bulb",
            secondaryIcon: nil,
            isOn: light.on.on,
            brightness: Double(light.dimming?.brightness ?? 0),
            supportsBrightness: light.dimming != nil,
            isAvailable: light.isReachable,
            statusMessage: "–û–±–µ—Å—Ç–æ—á–µ–Ω–∞",
            color: defaultWarmColor // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
        )
    }
}

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
struct RoomItemData: ItemData {
    let id: String
    let name: String
    let type: String
    let subtitle: String?
    let iconName: String
    let secondaryIcon: String?
    let isOn: Bool
    let brightness: Double
    let supportsBrightness: Bool
    let isAvailable: Bool
    let statusMessage: String
    let color: Color
    
    /// –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ RoomEntity –æ–±—ä–µ–∫—Ç–∞
    static func from(_ room: RoomEntity) -> RoomItemData {
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ defaultWarmColor —á—Ç–æ –∏ —É –ª–∞–º–ø
        let defaultWarmColor = Color(hue: 0.13, saturation: 0.25, brightness: 1.0)
        
        return RoomItemData(
            id: room.id,
            name: room.name,
            type: room.type.displayName,
            subtitle: "\(room.lightCount) lights",
            iconName: room.iconName, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É –ø–æ–¥—Ç–∏–ø–∞
            secondaryIcon: nil,
            isOn: room.isActive,
            brightness: 50.0, // TODO: –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —è—Ä–∫–æ—Å—Ç—å –ª–∞–º–ø –∫–æ–º–Ω–∞—Ç—ã
            supportsBrightness: !room.isEmpty,
            isAvailable: !room.isEmpty,
            statusMessage: "–ü—É—Å—Ç–∞—è",
            color: defaultWarmColor // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç, –∫–∞–∫ —É –ª–∞–º–ø
        )
    }
}

// MARK: - Convenience Extensions

extension UniversalItemControl {
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ª–∞–º–ø—ã
    static func forLight(
        _ light: Light,
        onToggle: @escaping (Bool) -> Void = { _ in },
        onBrightnessChange: @escaping (Double) -> Void = { _ in },
        onMenuTap: @escaping () -> Void = { }
    ) -> UniversalItemControl {
        return UniversalItemControl(
            data: LightItemData.from(light),
            onToggle: onToggle,
            onBrightnessChange: onBrightnessChange,
            onMenuTap: onMenuTap
        )
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
    static func forRoom(
        _ room: RoomEntity,
        onToggle: @escaping (Bool) -> Void = { _ in },
        onBrightnessChange: @escaping (Double) -> Void = { _ in },
        onMenuTap: @escaping () -> Void = { }
    ) -> UniversalItemControl {
        return UniversalItemControl(
            data: RoomItemData.from(room),
            onToggle: onToggle,
            onBrightnessChange: onBrightnessChange,
            onMenuTap: onMenuTap
        )
    }
}

#Preview("Light Control") {
    let mockLight = Light(
        id: "light_mock_01",
        type: "light",
        metadata: LightMetadata(name: "Smart Bulb", archetype: nil),
        on: OnState(on: true),
        dimming: Dimming(brightness: 75),
        color: nil,
        color_temperature: nil,
        effects: nil,
        effects_v2: nil,
        mode: nil,
        capabilities: nil,
        color_gamut_type: nil,
        color_gamut: nil,
        gradient: nil
    )
    
    UniversalItemControl.forLight(
        mockLight,
        onToggle: { isOn in
            print("üí° Light toggled: \(isOn)")
        },
        onBrightnessChange: { brightness in
            print("üí° Brightness: \(brightness)%")
        },
        onMenuTap: {
            print("üí° Menu tapped")
        }
    )
    .environmentObject(AppViewModel())
    .environmentObject(NavigationManager.shared)
}

#Preview("Room Control") {
    let mockRoom = RoomEntity(
        id: "room_mock_01",
        name: "Living Room",
        type: .livingRoom,
        subtypeName: "LIVING ROOM",
        iconName: "tr1", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        lightIds: ["light1", "light2", "light3"],
        isActive: true,
        createdAt: Date(),
        updatedAt: Date()
    )
    
    UniversalItemControl.forRoom(
        mockRoom,
        onToggle: { isOn in
            print("üè† Room toggled: \(isOn)")
        },
        onBrightnessChange: { brightness in
            print("üè† Room brightness: \(brightness)%")
        },
        onMenuTap: {
            print("üè† Room menu tapped")
        }
    )
    .environmentObject(AppViewModel())
    .environmentObject(NavigationManager.shared)
}

#Preview("Both Controls") {
    VStack(spacing: 20) {
        // –õ–∞–º–ø–∞
        UniversalItemControl.forLight(
            Light(
                id: "light1",
                type: "light",
                metadata: LightMetadata(name: "Kitchen Light", userSubtypeName: "CEILING", userSubtypeIcon: "ceiling"),
                on: OnState(on: true),
                dimming: Dimming(brightness: 80),
                color: nil,
                color_temperature: nil,
                effects: nil,
                effects_v2: nil,
                mode: nil,
                capabilities: nil,
                color_gamut_type: nil,
                color_gamut: nil,
                gradient: nil
            )
        )
        
        // –ö–æ–º–Ω–∞—Ç–∞
        UniversalItemControl.forRoom(
            RoomEntity(
                id: "room1",
                name: "Kitchen",
                type: .kitchen,
                subtypeName: "KITCHEN",
                iconName: "tr2", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
                lightIds: ["light1", "light2"],
                isActive: true,
                createdAt: Date(),
                updatedAt: Date()
            )
        )
    }
    .padding()
    .environmentObject(AppViewModel())
    .environmentObject(NavigationManager.shared)
}
